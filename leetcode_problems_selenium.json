[
    {
        "Question": "Single Number - Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n \n\nExample 1:\n\nInput: nums = [2,2,1]\n\nOutput: 1\n\nExample 2:\n\nInput: nums = [4,1,2,1,2]\n\nOutput: 4\n\nExample 3:\n\nInput: nums = [1]\n\nOutput: 1\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * -3 * 104 <= nums[i] <= 3 * 104\n * Each element in the array appears twice except for one element which appears only once.",
        "Answer": "",
        "title": "single-number"
    },
    {
        "Question": "Single Number II - Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n \n\nExample 1:\n\nInput: nums = [2,2,3,2]\nOutput: 3\n\n\nExample 2:\n\nInput: nums = [0,1,0,1,0,1,99]\nOutput: 99\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * -231 <= nums[i] <= 231 - 1\n * Each element in nums appears exactly three times except for one element which appears once.",
        "Answer": "",
        "title": "single-number-ii"
    },
    {
        "Question": "Reverse Bits - Reverse bits of a given 32 bits unsigned integer.\n\nNote:\n\n * Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n * In Java, the compiler represents the signed integers using 2's complement notation [https://en.wikipedia.org/wiki/Two%27s_complement]. Therefore, in Example 2 below, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n\n \n\nExample 1:\n\nInput: n = 43261596\n\nOutput: 964176192\n\nExplanation:\n\nInteger Binary 43261596 00000010100101000001111010011100 964176192 00111001011110000010100101000000\n\nExample 2:\n\nInput: n = 2147483644\n\nOutput: 1073741822\n\nExplanation:\n\nInteger Binary 2147483644 01111111111111111111111111111100 1073741822 00111111111111111111111111111110\n\n \n\nConstraints:\n\n * 0 <= n <= 231 - 2\n * n is even.\n\n \n\nFollow up: If this function is called many times, how would you optimize it?",
        "Answer": "",
        "title": "reverse-bits"
    },
    {
        "Question": "Number of 1 Bits - Given a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight [http://en.wikipedia.org/wiki/Hamming_weight]).\n\n \n\nExample 1:\n\nInput: n = 11\n\nOutput: 3\n\nExplanation:\n\nThe input binary string 1011 has a total of three set bits.\n\nExample 2:\n\nInput: n = 128\n\nOutput: 1\n\nExplanation:\n\nThe input binary string 10000000 has a total of one set bit.\n\nExample 3:\n\nInput: n = 2147483645\n\nOutput: 30\n\nExplanation:\n\nThe input binary string 1111111111111111111111111111101 has a total of thirty set bits.\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1\n\n \n\nFollow up: If this function is called many times, how would you optimize it?",
        "Answer": "",
        "title": "number-of-1-bits"
    },
    {
        "Question": "Bitwise AND of Numbers Range - Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\n\n \n\nExample 1:\n\n\nInput: left = 5, right = 7\nOutput: 4\n\n\nExample 2:\n\n\nInput: left = 0, right = 0\nOutput: 0\n\n\nExample 3:\n\n\nInput: left = 1, right = 2147483647\nOutput: 0\n\n\n \n\nConstraints:\n\n * 0 <= left <= right <= 231 - 1",
        "Answer": "",
        "title": "bitwise-and-of-numbers-range"
    },
    {
        "Question": "Power of Two - Given an integer n, return true if it is a power of two. Otherwise, return false.\n\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\n\n \n\nExample 1:\n\n\nInput: n = 1\nOutput: true\nExplanation: 20 = 1\n\n\nExample 2:\n\n\nInput: n = 16\nOutput: true\nExplanation: 24 = 16\n\n\nExample 3:\n\n\nInput: n = 3\nOutput: false\n\n\n \n\nConstraints:\n\n * -231 <= n <= 231 - 1\n\n \n\nFollow up: Could you solve it without loops/recursion?",
        "Answer": "",
        "title": "power-of-two"
    },
    {
        "Question": "Single Number III - Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\n\nYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,1,3,2,5]\nOutput: [3,5]\nExplanation:  [5, 3] is also a valid answer.\n\n\nExample 2:\n\n\nInput: nums = [-1,0]\nOutput: [-1,0]\n\n\nExample 3:\n\n\nInput: nums = [0,1]\nOutput: [1,0]\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 3 * 104\n * -231 <= nums[i] <= 231 - 1\n * Each integer in nums will appear twice, only two integers will appear once.",
        "Answer": "",
        "title": "single-number-iii"
    },
    {
        "Question": "Missing Number - Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n\n \n\nExample 1:\n\nInput: nums = [3,0,1]\n\nOutput: 2\n\nExplanation:\n\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 2:\n\nInput: nums = [0,1]\n\nOutput: 2\n\nExplanation:\n\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 3:\n\nInput: nums = [9,6,4,2,3,5,7,0,1]\n\nOutput: 8\n\nExplanation:\n\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\n \n \n\n \n\n \n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 104\n * 0 <= nums[i] <= n\n * All the numbers of nums are unique.\n\n \n\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?",
        "Answer": "",
        "title": "missing-number"
    },
    {
        "Question": "Maximum Product of Word Lengths - Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n\n \n\nExample 1:\n\n\nInput: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\nOutput: 16\nExplanation: The two words can be \"abcw\", \"xtfn\".\n\n\nExample 2:\n\n\nInput: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\nOutput: 4\nExplanation: The two words can be \"ab\", \"cd\".\n\n\nExample 3:\n\n\nInput: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: 0\nExplanation: No such pair of words.\n\n\n \n\nConstraints:\n\n * 2 <= words.length <= 1000\n * 1 <= words[i].length <= 1000\n * words[i] consists only of lowercase English letters.",
        "Answer": "",
        "title": "maximum-product-of-word-lengths"
    },
    {
        "Question": "Power of Four - Given an integer n, return true if it is a power of four. Otherwise, return false.\n\nAn integer n is a power of four, if there exists an integer x such that n == 4x.\n\n \n\nExample 1:\n\nInput: n = 16\nOutput: true\n\n\nExample 2:\n\nInput: n = 5\nOutput: false\n\n\nExample 3:\n\nInput: n = 1\nOutput: true\n\n\n \n\nConstraints:\n\n * -231 <= n <= 231 - 1\n\n \n\nFollow up: Could you solve it without loops/recursion?",
        "Answer": "",
        "title": "power-of-four"
    },
    {
        "Question": "Sum of Two Integers - Given two integers a and b, return the sum of the two integers without using the operators + and -.\n\n \n\nExample 1:\n\nInput: a = 1, b = 2\nOutput: 3\n\n\nExample 2:\n\nInput: a = 2, b = 3\nOutput: 5\n\n\n \n\nConstraints:\n\n * -1000 <= a, b <= 1000",
        "Answer": "",
        "title": "sum-of-two-integers"
    },
    {
        "Question": "Find the Difference - You are given two strings s and t.\n\nString t is generated by random shuffling string s and then add one more letter at a random position.\n\nReturn the letter that was added to t.\n\n \n\nExample 1:\n\n\nInput: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.\n\n\nExample 2:\n\n\nInput: s = \"\", t = \"y\"\nOutput: \"y\"\n\n\n \n\nConstraints:\n\n * 0 <= s.length <= 1000\n * t.length == s.length + 1\n * s and t consist of lowercase English letters.",
        "Answer": "",
        "title": "find-the-difference"
    },
    {
        "Question": "UTF-8 Validation - Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n\n 1. For a 1-byte character, the first bit is a 0, followed by its Unicode code.\n 2. For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n\nThis is how the UTF-8 encoding would work:\n\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n\nx denotes a bit in the binary form of a byte that may be either 0 or 1.\n\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n\n \n\nExample 1:\n\n\nInput: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n\n\nExample 2:\n\n\nInput: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n\n\n \n\nConstraints:\n\n * 1 <= data.length <= 2 * 104\n * 0 <= data[i] <= 255",
        "Answer": "",
        "title": "utf-8-validation"
    },
    {
        "Question": "Binary Watch - A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\n * For example, the below binary watch reads \"4:51\".\n\n[https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg]\n\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\n\nThe hour must not contain a leading zero.\n\n * For example, \"01:00\" is not valid. It should be \"1:00\".\n\nThe minute must consist of two digits and may contain a leading zero.\n\n * For example, \"10:2\" is not valid. It should be \"10:02\".\n\n \n\nExample 1:\n\nInput: turnedOn = 1\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n\n\nExample 2:\n\nInput: turnedOn = 9\nOutput: []\n\n\n \n\nConstraints:\n\n * 0 <= turnedOn <= 10",
        "Answer": "",
        "title": "binary-watch"
    },
    {
        "Question": "Maximum XOR of Two Numbers in an Array - Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\n\n \n\nExample 1:\n\n\nInput: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.\n\n\nExample 2:\n\n\nInput: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\nOutput: 127\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 105\n * 0 <= nums[i] <= 231 - 1",
        "Answer": "",
        "title": "maximum-xor-of-two-numbers-in-an-array"
    },
    {
        "Question": "Hamming Distance - The Hamming distance [https://en.wikipedia.org/wiki/Hamming_distance] between two integers is the number of positions at which the corresponding bits are different.\n\nGiven two integers x and y, return the Hamming distance between them.\n\n \n\nExample 1:\n\n\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.\n\n\nExample 2:\n\n\nInput: x = 3, y = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 0 <= x, y <= 231 - 1\n\n \n\nNote: This question is the same as 2220: Minimum Bit Flips to Convert Number. [https://leetcode.com/problems/minimum-bit-flips-to-convert-number/description/]",
        "Answer": "",
        "title": "hamming-distance"
    },
    {
        "Question": "Number Complement - The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n\n * For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n\nGiven an integer num, return its complement.\n\n \n\nExample 1:\n\n\nInput: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n\n\nExample 2:\n\n\nInput: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n\n \n\nConstraints:\n\n * 1 <= num < 231\n\n \n\nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/ [https://leetcode.com/problems/complement-of-base-10-integer/]",
        "Answer": "",
        "title": "number-complement"
    },
    {
        "Question": "Total Hamming Distance - The Hamming distance [https://en.wikipedia.org/wiki/Hamming_distance] between two integers is the number of positions at which the corresponding bits are different.\n\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\n\n \n\nExample 1:\n\n\nInput: nums = [4,14,2]\nOutput: 6\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n\n\nExample 2:\n\n\nInput: nums = [4,14,4]\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * 0 <= nums[i] <= 109\n * The answer for the given input will fit in a 32-bit integer.",
        "Answer": "",
        "title": "total-hamming-distance"
    },
    {
        "Question": "Set Mismatch - You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\n\nYou are given an integer array nums representing the data status of this set after the error.\n\nFind the number that occurs twice and the number that is missing and return them in the form of an array.\n\n \n\nExample 1:\n\nInput: nums = [1,2,2,4]\nOutput: [2,3]\n\n\nExample 2:\n\nInput: nums = [1,1]\nOutput: [1,2]\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 104\n * 1 <= nums[i] <= 104",
        "Answer": "",
        "title": "set-mismatch"
    },
    {
        "Question": "Binary Number with Alternating Bits - Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n\n \n\nExample 1:\n\n\nInput: n = 5\nOutput: true\nExplanation: The binary representation of 5 is: 101\n\n\nExample 2:\n\n\nInput: n = 7\nOutput: false\nExplanation: The binary representation of 7 is: 111.\n\nExample 3:\n\n\nInput: n = 11\nOutput: false\nExplanation: The binary representation of 11 is: 1011.\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "binary-number-with-alternating-bits"
    },
    {
        "Question": "Prime Number of Set Bits in Binary Representation - Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\nRecall that the number of set bits an integer has is the number of 1's present when written in binary.\n\n * For example, 21 written in binary is 10101, which has 3 set bits.\n\n \n\nExample 1:\n\n\nInput: left = 6, right = 10\nOutput: 4\nExplanation:\n6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.\n\n\nExample 2:\n\n\nInput: left = 10, right = 15\nOutput: 5\nExplanation:\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.\n\n\n \n\nConstraints:\n\n * 1 <= left <= right <= 106\n * 0 <= right - left <= 104",
        "Answer": "",
        "title": "prime-number-of-set-bits-in-binary-representation"
    },
    {
        "Question": "Binary Gap - Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\n\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.\n\n \n\nExample 1:\n\n\nInput: n = 22\nOutput: 2\nExplanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.\n\n\nExample 2:\n\n\nInput: n = 8\nOutput: 0\nExplanation: 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n\n\nExample 3:\n\n\nInput: n = 5\nOutput: 2\nExplanation: 5 in binary is \"101\".\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109",
        "Answer": "",
        "title": "binary-gap"
    },
    {
        "Question": "Bitwise ORs of Subarrays - Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.\n\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\n\nA subarray is a contiguous non-empty sequence of elements within an array.\n\n \n\nExample 1:\n\n\nInput: arr = [0]\nOutput: 1\nExplanation: There is only one possible result: 0.\n\n\nExample 2:\n\n\nInput: arr = [1,1,2]\nOutput: 3\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n\n\nExample 3:\n\n\nInput: arr = [1,2,4]\nOutput: 6\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7.\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 5 * 104\n * 0 <= arr[i] <= 109",
        "Answer": "",
        "title": "bitwise-ors-of-subarrays"
    },
    {
        "Question": "Remove Duplicates from Sorted Array - Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place [https://en.wikipedia.org/wiki/In-place_algorithm] such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\n * Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\n * Return k.\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \n\nExample 1:\n\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * -100 <= nums[i] <= 100\n * nums is sorted in non-decreasing order.",
        "Answer": "",
        "title": "remove-duplicates-from-sorted-array"
    },
    {
        "Question": "Remove Element - Given an integer array nums and an integer val, remove all occurrences of val in nums in-place [https://en.wikipedia.org/wiki/In-place_algorithm]. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\n\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n\n * Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\n * Return k.\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\n\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \n\nExample 1:\n\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\n\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \n\nConstraints:\n\n * 0 <= nums.length <= 100\n * 0 <= nums[i] <= 50\n * 0 <= val <= 100",
        "Answer": "",
        "title": "remove-element"
    },
    {
        "Question": "Next Permutation - A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n\n * For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n * For example, the next permutation of arr = [1,2,3] is [1,3,2].\n * Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n * While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n\nGiven an array of integers nums, find the next permutation of nums.\n\nThe replacement must be in place [http://en.wikipedia.org/wiki/In-place_algorithm] and use only constant extra memory.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\n\nExample 2:\n\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\n\nExample 3:\n\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 100\n * 0 <= nums[i] <= 100",
        "Answer": "",
        "title": "next-permutation"
    },
    {
        "Question": "First Missing Positive - Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\n\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n\n\nExample 2:\n\n\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n\n\nExample 3:\n\n\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -231 <= nums[i] <= 231 - 1",
        "Answer": "",
        "title": "first-missing-positive"
    },
    {
        "Question": "Rotate Image - You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place [https://en.wikipedia.org/wiki/In-place_algorithm], which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg]\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg]\n\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n\n \n\nConstraints:\n\n * n == matrix.length == matrix[i].length\n * 1 <= n <= 20\n * -1000 <= matrix[i][j] <= 1000",
        "Answer": "",
        "title": "rotate-image"
    },
    {
        "Question": "Spiral Matrix - Given an m x n matrix, return all elements of the matrix in spiral order.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg]\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg]\n\n\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 10\n * -100 <= matrix[i][j] <= 100",
        "Answer": "",
        "title": "spiral-matrix"
    },
    {
        "Question": "Spiral Matrix II - Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg]\n\n\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: [[1]]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 20",
        "Answer": "",
        "title": "spiral-matrix-ii"
    },
    {
        "Question": "Plus One - You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n\nIncrement the large integer by one and return the resulting array of digits.\n\n \n\nExample 1:\n\n\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n\n\nExample 2:\n\n\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n\n\nExample 3:\n\n\nInput: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n\n\n \n\nConstraints:\n\n * 1 <= digits.length <= 100\n * 0 <= digits[i] <= 9\n * digits does not contain any leading 0's.",
        "Answer": "",
        "title": "plus-one"
    },
    {
        "Question": "Set Matrix Zeroes - Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n\nYou must do it in place [https://en.wikipedia.org/wiki/In-place_algorithm].\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg]\n\n\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg]\n\n\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[0].length\n * 1 <= m, n <= 200\n * -231 <= matrix[i][j] <= 231 - 1\n\n \n\nFollow up:\n\n * A straightforward solution using O(mn) space is probably a bad idea.\n * A simple improvement uses O(m + n) space, but still not the best solution.\n * Could you devise a constant space solution?",
        "Answer": "",
        "title": "set-matrix-zeroes"
    },
    {
        "Question": "Remove Duplicates from Sorted Array II - Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place [https://en.wikipedia.org/wiki/In-place_algorithm] such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n\nReturn k after placing the final result in the first k slots of nums.\n\nDo not allocate extra space for another array. You must do this by modifying the input array in-place [https://en.wikipedia.org/wiki/In-place_algorithm] with O(1) extra memory.\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \n\nExample 1:\n\n\nInput: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\n\nInput: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * -104 <= nums[i] <= 104\n * nums is sorted in non-decreasing order.",
        "Answer": "",
        "title": "remove-duplicates-from-sorted-array-ii"
    },
    {
        "Question": "Pascal's Triangle - Given an integer numRows, return the first numRows of Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n[https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif]\n\n \n\nExample 1:\n\nInput: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n\n\nExample 2:\n\nInput: numRows = 1\nOutput: [[1]]\n\n\n \n\nConstraints:\n\n * 1 <= numRows <= 30",
        "Answer": "",
        "title": "pascals-triangle"
    },
    {
        "Question": "Pascal's Triangle II - Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n[https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif]\n\n \n\nExample 1:\n\nInput: rowIndex = 3\nOutput: [1,3,3,1]\n\n\nExample 2:\n\nInput: rowIndex = 0\nOutput: [1]\n\n\nExample 3:\n\nInput: rowIndex = 1\nOutput: [1,1]\n\n\n \n\nConstraints:\n\n * 0 <= rowIndex <= 33\n\n \n\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?",
        "Answer": "",
        "title": "pascals-triangle-ii"
    },
    {
        "Question": "Best Time to Buy and Sell Stock - You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\n \n\nExample 1:\n\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n\nExample 2:\n\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\n\n \n\nConstraints:\n\n * 1 <= prices.length <= 105\n * 0 <= prices[i] <= 104",
        "Answer": "",
        "title": "best-time-to-buy-and-sell-stock"
    },
    {
        "Question": "Longest Consecutive Sequence - Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n\nYou must write an algorithm that runs in O(n) time.\n\n \n\nExample 1:\n\n\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\n\nExample 2:\n\n\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n\n\nExample 3:\n\n\nInput: nums = [1,0,1,2]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 0 <= nums.length <= 105\n * -109 <= nums[i] <= 109",
        "Answer": "",
        "title": "longest-consecutive-sequence"
    },
    {
        "Question": "Majority Element - Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n\n \n\nExample 1:\n\nInput: nums = [3,2,3]\nOutput: 3\n\n\nExample 2:\n\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 5 * 104\n * -109 <= nums[i] <= 109\n\n \n\nFollow-up: Could you solve the problem in linear time and in O(1) space?",
        "Answer": "",
        "title": "majority-element"
    },
    {
        "Question": "Rotate Array - Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\n\nExample 2:\n\n\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -231 <= nums[i] <= 231 - 1\n * 0 <= k <= 105\n\n \n\nFollow up:\n\n * Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.\n * Could you do it in-place with O(1) extra space?",
        "Answer": "",
        "title": "rotate-array"
    },
    {
        "Question": "Kth Largest Element in an Array - Given an integer array nums and an integer k, return the kth largest element in the array.\n\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\n\nCan you solve it without sorting?\n\n \n\nExample 1:\n\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n\n\nExample 2:\n\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= k <= nums.length <= 105\n * -104 <= nums[i] <= 104",
        "Answer": "",
        "title": "kth-largest-element-in-an-array"
    },
    {
        "Question": "Summary Ranges - You are given a sorted unique integer array nums.\n\nA range [a,b] is the set of all integers from a to b (inclusive).\n\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\n\nEach range [a,b] in the list should be output as:\n\n * \"a->b\" if a != b\n * \"a\" if a == b\n\n \n\nExample 1:\n\n\nInput: nums = [0,1,2,4,5,7]\nOutput: [\"0->2\",\"4->5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\"\n\n\nExample 2:\n\n\nInput: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\nExplanation: The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\"\n\n\n \n\nConstraints:\n\n * 0 <= nums.length <= 20\n * -231 <= nums[i] <= 231 - 1\n * All the values of nums are unique.\n * nums is sorted in ascending order.",
        "Answer": "",
        "title": "summary-ranges"
    },
    {
        "Question": "Majority Element II - Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\n\n \n\nExample 1:\n\n\nInput: nums = [3,2,3]\nOutput: [3]\n\n\nExample 2:\n\n\nInput: nums = [1]\nOutput: [1]\n\n\nExample 3:\n\n\nInput: nums = [1,2]\nOutput: [1,2]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5 * 104\n * -109 <= nums[i] <= 109\n\n \n\nFollow up: Could you solve the problem in linear time and in O(1) space?",
        "Answer": "",
        "title": "majority-element-ii"
    },
    {
        "Question": "Product of Array Except Self - Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n\n \n\nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n\n\nExample 2:\n\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 105\n * -30 <= nums[i] <= 30\n * The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.\n\n \n\nFollow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)",
        "Answer": "",
        "title": "product-of-array-except-self"
    },
    {
        "Question": "Search a 2D Matrix II - Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n\n * Integers in each row are sorted in ascending from left to right.\n * Integers in each column are sorted in ascending from top to bottom.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg]\n\n\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg]\n\n\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= n, m <= 300\n * -109 <= matrix[i][j] <= 109\n * All the integers in each row are sorted in ascending order.\n * All the integers in each column are sorted in ascending order.\n * -109 <= target <= 109",
        "Answer": "",
        "title": "search-a-2d-matrix-ii"
    },
    {
        "Question": "Game of Life - According to Wikipedia's article [https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life]: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n\nThe board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors [https://en.wikipedia.org/wiki/Moore_neighborhood] (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n\n 1. Any live cell with fewer than two live neighbors dies as if caused by under-population.\n 2. Any live cell with two or three live neighbors lives on to the next generation.\n 3. Any live cell with more than three live neighbors dies, as if by over-population.\n 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state of the board is determined by applying the above rules simultaneously to every cell in the current state of the m x n grid board. In this process, births and deaths occur simultaneously.\n\nGiven the current state of the board, update the board to reflect its next state.\n\nNote that you do not need to return anything.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg]\n\n\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg]\n\n\nInput: board = [[1,1],[1,0]]\nOutput: [[1,1],[1,1]]\n\n\n \n\nConstraints:\n\n * m == board.length\n * n == board[i].length\n * 1 <= m, n <= 25\n * board[i][j] is 0 or 1.\n\n \n\nFollow up:\n\n * Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\n * In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?",
        "Answer": "",
        "title": "game-of-life"
    },
    {
        "Question": "Increasing Triplet Subsequence - Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i < j < k is valid.\n\n\nExample 2:\n\n\nInput: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.\n\n\nExample 3:\n\n\nInput: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5 * 105\n * -231 <= nums[i] <= 231 - 1\n\n \n\nFollow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?",
        "Answer": "",
        "title": "increasing-triplet-subsequence"
    },
    {
        "Question": "Shuffle an Array - Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\n\nImplement the Solution class:\n\n * Solution(int[] nums) Initializes the object with the integer array nums.\n * int[] reset() Resets the array to its original configuration and returns it.\n * int[] shuffle() Returns a random shuffling of the array.\n\n \n\nExample 1:\n\n\nInput\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 50\n * -106 <= nums[i] <= 106\n * All the elements of nums are unique.\n * At most 104 calls in total will be made to reset and shuffle.",
        "Answer": "",
        "title": "shuffle-an-array"
    },
    {
        "Question": "Rotate Function - You are given an integer array nums of length n.\n\nAssume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\n\n * F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].\n\nReturn the maximum value of F(0), F(1), ..., F(n-1).\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [4,3,2,6]\nOutput: 26\nExplanation:\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n\n\nExample 2:\n\n\nInput: nums = [100]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 105\n * -100 <= nums[i] <= 100",
        "Answer": "",
        "title": "rotate-function"
    },
    {
        "Question": "Fizz Buzz - Given an integer n, return a string array answer (1-indexed) where:\n\n * answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n * answer[i] == \"Fizz\" if i is divisible by 3.\n * answer[i] == \"Buzz\" if i is divisible by 5.\n * answer[i] == i (as a string) if none of the above conditions are true.\n\n \n\nExample 1:\n\nInput: n = 3\nOutput: [\"1\",\"2\",\"Fizz\"]\n\n\nExample 2:\n\nInput: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n\n\nExample 3:\n\nInput: n = 15\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 104",
        "Answer": "",
        "title": "fizz-buzz"
    },
    {
        "Question": "Third Maximum Number - Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n\n \n\nExample 1:\n\n\nInput: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n\n\nExample 2:\n\n\nInput: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n\n\nExample 3:\n\n\nInput: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -231 <= nums[i] <= 231 - 1\n\n \n\nFollow up: Can you find an O(n) solution?",
        "Answer": "",
        "title": "third-maximum-number"
    },
    {
        "Question": "Battleships in a Board - Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\n\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2024/06/21/image.png]\n\n\nInput: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\nOutput: 2\n\n\nExample 2:\n\n\nInput: board = [[\".\"]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * m == board.length\n * n == board[i].length\n * 1 <= m, n <= 200\n * board[i][j] is either '.' or 'X'.\n\n \n\nFollow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?",
        "Answer": "",
        "title": "battleships-in-a-board"
    },
    {
        "Question": "Find All Duplicates in an Array - Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears at most twice, return an array of all the integers that appears twice.\n\nYou must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output\n\n \n\nExample 1:\n\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [2,3]\n\n\nExample 2:\n\nInput: nums = [1,1,2]\nOutput: [1]\n\n\nExample 3:\n\nInput: nums = [1]\nOutput: []\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 105\n * 1 <= nums[i] <= n\n * Each element in nums appears once or twice.",
        "Answer": "",
        "title": "find-all-duplicates-in-an-array"
    },
    {
        "Question": "Find All Numbers Disappeared in an Array - Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n\n \n\nExample 1:\n\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n\n\nExample 2:\n\nInput: nums = [1,1]\nOutput: [2]\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 105\n * 1 <= nums[i] <= n\n\n \n\nFollow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.",
        "Answer": "",
        "title": "find-all-numbers-disappeared-in-an-array"
    },
    {
        "Question": "Minimum Moves to Equal Array Elements II - Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n\nIn one move, you can increment or decrement an element of the array by 1.\n\nTest cases are designed so that the answer will fit in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3]\nOutput: 2\nExplanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n\n\nExample 2:\n\n\nInput: nums = [1,10,2,9]\nOutput: 16\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= nums.length <= 105\n * -109 <= nums[i] <= 109",
        "Answer": "",
        "title": "minimum-moves-to-equal-array-elements-ii"
    },
    {
        "Question": "Island Perimeter - You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\n\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/12/island.png]\n\n\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.\n\n\nExample 2:\n\n\nInput: grid = [[1]]\nOutput: 4\n\n\nExample 3:\n\n\nInput: grid = [[1,0]]\nOutput: 4\n\n\n \n\nConstraints:\n\n * row == grid.length\n * col == grid[i].length\n * 1 <= row, col <= 100\n * grid[i][j] is 0 or 1.\n * There is exactly one island in grid.",
        "Answer": "",
        "title": "island-perimeter"
    },
    {
        "Question": "Max Consecutive Ones - Given a binary array nums, return the maximum number of consecutive 1's in the array.\n\n \n\nExample 1:\n\n\nInput: nums = [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n\n\nExample 2:\n\n\nInput: nums = [1,0,1,1,0,1]\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * nums[i] is either 0 or 1.",
        "Answer": "",
        "title": "max-consecutive-ones"
    },
    {
        "Question": "Teemo Attacking - Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\n\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\n\nReturn the total number of seconds that Ashe is poisoned.\n\n \n\nExample 1:\n\n\nInput: timeSeries = [1,4], duration = 2\nOutput: 4\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n\n\nExample 2:\n\n\nInput: timeSeries = [1,2], duration = 2\nOutput: 3\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n\n \n\nConstraints:\n\n * 1 <= timeSeries.length <= 104\n * 0 <= timeSeries[i], duration <= 107\n * timeSeries is sorted in non-decreasing order.",
        "Answer": "",
        "title": "teemo-attacking"
    },
    {
        "Question": "Diagonal Traverse - Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg]\n\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,4,7,5,3,6,8,9]\n\n\nExample 2:\n\n\nInput: mat = [[1,2],[3,4]]\nOutput: [1,2,3,4]\n\n\n \n\nConstraints:\n\n * m == mat.length\n * n == mat[i].length\n * 1 <= m, n <= 104\n * 1 <= m * n <= 104\n * -105 <= mat[i][j] <= 105",
        "Answer": "",
        "title": "diagonal-traverse"
    },
    {
        "Question": "Relative Ranks - You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\n\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\n * The 1st place athlete's rank is \"Gold Medal\".\n * The 2nd place athlete's rank is \"Silver Medal\".\n * The 3rd place athlete's rank is \"Bronze Medal\".\n * For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\n\n \n\nExample 1:\n\n\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\n\nExample 2:\n\n\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\n\n\n\n \n\nConstraints:\n\n * n == score.length\n * 1 <= n <= 104\n * 0 <= score[i] <= 106\n * All the values in score are unique.",
        "Answer": "",
        "title": "relative-ranks"
    },
    {
        "Question": "Array Nesting - You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\n\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:\n\n * The first element in s[k] starts with the selection of the element nums[k] of index = k.\n * The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.\n * We stop adding right before a duplicate element occurs in s[k].\n\nReturn the longest length of a set s[k].\n\n \n\nExample 1:\n\n\nInput: nums = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation: \nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\n\n\nExample 2:\n\n\nInput: nums = [0,1,2]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 0 <= nums[i] < nums.length\n * All the values of nums are unique.",
        "Answer": "",
        "title": "array-nesting"
    },
    {
        "Question": "Reshape the Matrix - In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\n\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\n\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg]\n\n\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg]\n\n\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\nOutput: [[1,2],[3,4]]\n\n\n \n\nConstraints:\n\n * m == mat.length\n * n == mat[i].length\n * 1 <= m, n <= 100\n * -1000 <= mat[i][j] <= 1000\n * 1 <= r, c <= 300",
        "Answer": "",
        "title": "reshape-the-matrix"
    },
    {
        "Question": "Shortest Unsorted Continuous Subarray - Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\n\nReturn the shortest such subarray and output its length.\n\n \n\nExample 1:\n\n\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4]\nOutput: 0\n\n\nExample 3:\n\n\nInput: nums = [1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -105 <= nums[i] <= 105\n\n \n\nFollow up: Can you solve it in O(n) time complexity?",
        "Answer": "",
        "title": "shortest-unsorted-continuous-subarray"
    },
    {
        "Question": "Can Place Flowers - You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\n\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.\n\n \n\nExample 1:\n\nInput: flowerbed = [1,0,0,0,1], n = 1\nOutput: true\n\n\nExample 2:\n\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= flowerbed.length <= 2 * 104\n * flowerbed[i] is 0 or 1.\n * There are no two adjacent flowers in flowerbed.\n * 0 <= n <= flowerbed.length",
        "Answer": "",
        "title": "can-place-flowers"
    },
    {
        "Question": "Maximum Average Subarray I - You are given an integer array nums consisting of n elements, and an integer k.\n\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n\n \n\nExample 1:\n\n\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n\n\nExample 2:\n\n\nInput: nums = [5], k = 1\nOutput: 5.00000\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= k <= n <= 105\n * -104 <= nums[i] <= 104",
        "Answer": "",
        "title": "maximum-average-subarray-i"
    },
    {
        "Question": "Image Smoother - An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\n[https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg]\n\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg]\n\n\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg]\n\n\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n\n\n \n\nConstraints:\n\n * m == img.length\n * n == img[i].length\n * 1 <= m, n <= 200\n * 0 <= img[i][j] <= 255",
        "Answer": "",
        "title": "image-smoother"
    },
    {
        "Question": "Non-decreasing Array - Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\n\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).\n\n \n\nExample 1:\n\n\nInput: nums = [4,2,3]\nOutput: true\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\n\n\nExample 2:\n\n\nInput: nums = [4,2,1]\nOutput: false\nExplanation: You cannot get a non-decreasing array by modifying at most one element.\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 104\n * -105 <= nums[i] <= 105",
        "Answer": "",
        "title": "non-decreasing-array"
    },
    {
        "Question": "Beautiful Arrangement II - Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:\n\n * Suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.\n\nReturn the list answer. If there multiple valid answers, return any of them.\n\n \n\nExample 1:\n\n\nInput: n = 3, k = 1\nOutput: [1,2,3]\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1\n\n\nExample 2:\n\n\nInput: n = 3, k = 2\nOutput: [1,3,2]\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.\n\n\n \n\nConstraints:\n\n * 1 <= k < n <= 104",
        "Answer": "",
        "title": "beautiful-arrangement-ii"
    },
    {
        "Question": "Maximum Swap - You are given an integer num. You can swap two digits at most once to get the maximum valued number.\n\nReturn the maximum valued number you can get.\n\n \n\nExample 1:\n\n\nInput: num = 2736\nOutput: 7236\nExplanation: Swap the number 2 and the number 7.\n\n\nExample 2:\n\n\nInput: num = 9973\nOutput: 9973\nExplanation: No swap.\n\n\n \n\nConstraints:\n\n * 0 <= num <= 108",
        "Answer": "",
        "title": "maximum-swap"
    },
    {
        "Question": "Longest Continuous Increasing Subsequence - Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\n\nA continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,5,4,7]\nOutput: 3\nExplanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.\n\n\nExample 2:\n\n\nInput: nums = [2,2,2,2,2]\nOutput: 1\nExplanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -109 <= nums[i] <= 109",
        "Answer": "",
        "title": "longest-continuous-increasing-subsequence"
    },
    {
        "Question": "K Empty Slots - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "k-empty-slots"
    },
    {
        "Question": "Degree of an Array - Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\n\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,2,3,1]\nOutput: 2\nExplanation: \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n\n\nExample 2:\n\n\nInput: nums = [1,2,2,3,1,4,2]\nOutput: 6\nExplanation: \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n\n\n \n\nConstraints:\n\n * nums.length will be between 1 and 50,000.\n * nums[i] will be an integer between 0 and 49,999.",
        "Answer": "",
        "title": "degree-of-an-array"
    },
    {
        "Question": "Subarray Product Less Than K - Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.\n\n \n\nExample 1:\n\n\nInput: nums = [10,5,2,6], k = 100\nOutput: 8\nExplanation: The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3], k = 0\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * 1 <= nums[i] <= 1000\n * 0 <= k <= 106",
        "Answer": "",
        "title": "subarray-product-less-than-k"
    },
    {
        "Question": "1-bit and 2-bit Characters - We have two special characters:\n\n * The first character can be represented by one bit 0.\n * The second character can be represented by two bits (10 or 11).\n\nGiven a binary array bits that ends with 0, return true if the last character must be a one-bit character.\n\n \n\nExample 1:\n\n\nInput: bits = [1,0,0]\nOutput: true\nExplanation: The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n\n\nExample 2:\n\n\nInput: bits = [1,1,1,0]\nOutput: false\nExplanation: The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\n\n\n \n\nConstraints:\n\n * 1 <= bits.length <= 1000\n * bits[i] is either 0 or 1.",
        "Answer": "",
        "title": "1-bit-and-2-bit-characters"
    },
    {
        "Question": "Candy Crush - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "candy-crush"
    },
    {
        "Question": "Find Pivot Index - Given an array of integers nums, calculate the pivot index of this array.\n\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\n\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\n\nReturn the leftmost pivot index. If no such index exists, return -1.\n\n \n\nExample 1:\n\n\nInput: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n\n\nExample 2:\n\n\nInput: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.\n\nExample 3:\n\n\nInput: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -1000 <= nums[i] <= 1000\n\n \n\nNote: This question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/ [https://leetcode.com/problems/find-the-middle-index-in-array/]",
        "Answer": "",
        "title": "find-pivot-index"
    },
    {
        "Question": "My Calendar I - You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\n\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\n\nThe event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.\n\nImplement the MyCalendar class:\n\n * MyCalendar() Initializes the calendar object.\n * boolean book(int startTime, int endTime) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\n\n \n\nExample 1:\n\n\nInput\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]\nOutput\n[null, true, false, true]\n\nExplanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.\n\n \n\nConstraints:\n\n * 0 <= start < end <= 109\n * At most 1000 calls will be made to book.",
        "Answer": "",
        "title": "my-calendar-i"
    },
    {
        "Question": "My Calendar II - You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.\n\nA triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\n\nThe event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.\n\nImplement the MyCalendarTwo class:\n\n * MyCalendarTwo() Initializes the calendar object.\n * boolean book(int startTime, int endTime) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.\n\n \n\nExample 1:\n\n\nInput\n[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, true, true, true, false, true, true]\n\nExplanation\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\n\n\n \n\nConstraints:\n\n * 0 <= start < end <= 109\n * At most 1000 calls will be made to book.",
        "Answer": "",
        "title": "my-calendar-ii"
    },
    {
        "Question": "My Calendar III - A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\n\nYou are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events.\n\nImplement the MyCalendarThree class:\n\n * MyCalendarThree() Initializes the object.\n * int book(int startTime, int endTime) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.\n\n \n\nExample 1:\n\n\nInput\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, 1, 1, 2, 3, 3, 3]\n\nExplanation\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1\nmyCalendarThree.book(50, 60); // return 1\nmyCalendarThree.book(10, 40); // return 2\nmyCalendarThree.book(5, 15); // return 3\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3\n\n\n\n \n\nConstraints:\n\n * 0 <= startTime < endTime <= 109\n * At most 400 calls will be made to book.",
        "Answer": "",
        "title": "my-calendar-iii"
    },
    {
        "Question": "Largest Number At Least Twice of Others - You are given an integer array nums where the largest integer is unique.\n\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.\n\n \n\nExample 1:\n\n\nInput: nums = [3,6,1,0]\nOutput: 1\nExplanation: 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: 4 is less than twice the value of 3, so we return -1.\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 50\n * 0 <= nums[i] <= 100\n * The largest element in nums is unique.",
        "Answer": "",
        "title": "largest-number-at-least-twice-of-others"
    },
    {
        "Question": "Pour Water - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "pour-water"
    },
    {
        "Question": "Toeplitz Matrix - Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.\n\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg]\n\n\nInput: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\nOutput: true\nExplanation:\nIn the above grid, the diagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\nIn each diagonal all elements are the same, so the answer is True.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg]\n\n\nInput: matrix = [[1,2],[2,2]]\nOutput: false\nExplanation:\nThe diagonal \"[1, 2]\" has different elements.\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 20\n * 0 <= matrix[i][j] <= 99\n\n \n\nFollow up:\n\n * What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\n * What if the matrix is so large that you can only load up a partial row into the memory at once?",
        "Answer": "",
        "title": "toeplitz-matrix"
    },
    {
        "Question": "Max Chunks To Make Sorted II - You are given an integer array arr.\n\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\nReturn the largest number of chunks we can make to sort the array.\n\n \n\nExample 1:\n\n\nInput: arr = [5,4,3,2,1]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\n\n\nExample 2:\n\n\nInput: arr = [2,1,3,4,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 2000\n * 0 <= arr[i] <= 108",
        "Answer": "",
        "title": "max-chunks-to-make-sorted-ii"
    },
    {
        "Question": "Max Chunks To Make Sorted - You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\n\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\nReturn the largest number of chunks we can make to sort the array.\n\n \n\nExample 1:\n\n\nInput: arr = [4,3,2,1,0]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\n\n\nExample 2:\n\n\nInput: arr = [1,0,2,3,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n\n\n \n\nConstraints:\n\n * n == arr.length\n * 1 <= n <= 10\n * 0 <= arr[i] < n\n * All the elements of arr are unique.",
        "Answer": "",
        "title": "max-chunks-to-make-sorted"
    },
    {
        "Question": "Swim in Rising Water - You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\n\nIt starts raining, and water gradually rises over time. At time t, the water level is t, meaning any cell with elevation less than equal to t is submerged or reachable.\n\nYou can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nReturn the minimum time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/29/swim1-grid.jpg]\n\n\nInput: grid = [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/29/swim2-grid-1.jpg]\n\n\nInput: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation: The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\n\n \n\nConstraints:\n\n * n == grid.length\n * n == grid[i].length\n * 1 <= n <= 50\n * 0 <= grid[i][j] < n2\n * Each value grid[i][j] is unique.",
        "Answer": "",
        "title": "swim-in-rising-water"
    },
    {
        "Question": "Number of Matching Subsequences - Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n * For example, \"ace\" is a subsequence of \"abcde\".\n\n \n\nExample 1:\n\n\nInput: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\nOutput: 3\nExplanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".\n\n\nExample 2:\n\n\nInput: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 5 * 104\n * 1 <= words.length <= 5000\n * 1 <= words[i].length <= 50\n * s and words[i] consist of only lowercase English letters.",
        "Answer": "",
        "title": "number-of-matching-subsequences"
    },
    {
        "Question": "Valid Tic-Tac-Toe State - Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\n\nThe board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.\n\nHere are the rules of Tic-Tac-Toe:\n\n * Players take turns placing characters into empty squares ' '.\n * The first player always places 'X' characters, while the second player always places 'O' characters.\n * 'X' and 'O' characters are always placed into empty squares, never filled ones.\n * The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n * The game also ends if all squares are non-empty.\n * No more moves can be played if the game is over.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/15/tictactoe1-grid.jpg]\n\n\nInput: board = [\"O  \",\"   \",\"   \"]\nOutput: false\nExplanation: The first player always plays \"X\".\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/15/tictactoe2-grid.jpg]\n\n\nInput: board = [\"XOX\",\" X \",\"   \"]\nOutput: false\nExplanation: Players take turns making moves.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/05/15/tictactoe4-grid.jpg]\n\n\nInput: board = [\"XOX\",\"O O\",\"XOX\"]\nOutput: true\n\n\n \n\nConstraints:\n\n * board.length == 3\n * board[i].length == 3\n * board[i][j] is either 'X', 'O', or ' '.",
        "Answer": "",
        "title": "valid-tic-tac-toe-state"
    },
    {
        "Question": "Number of Subarrays with Bounded Maximum - Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\n\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [2,1,4,3], left = 2, right = 3\nOutput: 3\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\n\n\nExample 2:\n\n\nInput: nums = [2,9,2,5,6], left = 2, right = 8\nOutput: 7\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 0 <= nums[i] <= 109\n * 0 <= left <= right <= 109",
        "Answer": "",
        "title": "number-of-subarrays-with-bounded-maximum"
    },
    {
        "Question": "Bricks Falling When Hit - You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:\n\n * It is directly connected to the top of the grid, or\n * At least one other brick in its four adjacent cells is stable.\n\nYou are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).\n\nReturn an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.\n\nNote that an erasure may refer to a location with no brick, and if it does, no bricks drop.\n\n \n\nExample 1:\n\n\nInput: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\nOutput: [2]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n [1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2].\n\n\nExample 2:\n\n\nInput: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\nOutput: [0,0]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n [1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0].\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 200\n * grid[i][j] is 0 or 1.\n * 1 <= hits.length <= 4 * 104\n * hits[i].length == 2\n * 0 <= xi <= m - 1\n * 0 <= yi <= n - 1\n * All (xi, yi) are unique.",
        "Answer": "",
        "title": "bricks-falling-when-hit"
    },
    {
        "Question": "Max Increase to Keep City Skyline - There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\n\nA city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.\n\nWe are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\n\nReturn the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/21/807-ex1.png]\n\n\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\nOutput: 35\nExplanation: The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\n\nExample 2:\n\n\nInput: grid = [[0,0,0],[0,0,0],[0,0,0]]\nOutput: 0\nExplanation: Increasing the height of any building will result in the skyline changing.\n\n\n \n\nConstraints:\n\n * n == grid.length\n * n == grid[r].length\n * 2 <= n <= 50\n * 0 <= grid[r][c] <= 100",
        "Answer": "",
        "title": "max-increase-to-keep-city-skyline"
    },
    {
        "Question": "Shortest Distance to a Character - Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\n\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.\n\n \n\nExample 1:\n\n\nInput: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\nExplanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n\n\nExample 2:\n\n\nInput: s = \"aaab\", c = \"b\"\nOutput: [3,2,1,0]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s[i] and c are lowercase English letters.\n * It is guaranteed that c occurs at least once in s.",
        "Answer": "",
        "title": "shortest-distance-to-a-character"
    },
    {
        "Question": "Positions of Large Groups - In a string s of lowercase letters, these letters form consecutive groups of the same character.\n\nFor example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\".\n\nA group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, \"xxxx\" has the interval [3,6].\n\nA group is considered large if it has 3 or more characters.\n\nReturn the intervals of every large group sorted in increasing order by start index.\n\n \n\nExample 1:\n\n\nInput: s = \"abbxxxxzzy\"\nOutput: [[3,6]]\nExplanation: \"xxxx\" is the only large group with start index 3 and end index 6.\n\n\nExample 2:\n\n\nInput: s = \"abc\"\nOutput: []\nExplanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.\n\n\nExample 3:\n\n\nInput: s = \"abcdddeeeeaabbbcd\"\nOutput: [[3,5],[6,9],[12,14]]\nExplanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s contains lowercase English letters only.",
        "Answer": "",
        "title": "positions-of-large-groups"
    },
    {
        "Question": "Flipping an Image - Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\n\nTo flip an image horizontally means that each row of the image is reversed.\n\n * For example, flipping [1,1,0] horizontally results in [0,1,1].\n\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\n\n * For example, inverting [0,1,1] results in [1,0,0].\n\n \n\nExample 1:\n\n\nInput: image = [[1,1,0],[1,0,1],[0,0,0]]\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n\n\nExample 2:\n\n\nInput: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\nOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\nExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\n\n \n\nConstraints:\n\n * n == image.length\n * n == image[i].length\n * 1 <= n <= 20\n * images[i][j] is either 0 or 1.",
        "Answer": "",
        "title": "flipping-an-image"
    },
    {
        "Question": "Image Overlap - You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\n\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\n\nNote also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\n\nReturn the largest possible overlap.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg]\n\n\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\nOutput: 3\nExplanation: We translate img1 to right by 1 unit and down by 1 unit.\n[https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg]\nThe number of positions that have a 1 in both images is 3 (shown in red).\n[https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg]\n\n\nExample 2:\n\n\nInput: img1 = [[1]], img2 = [[1]]\nOutput: 1\n\n\nExample 3:\n\n\nInput: img1 = [[0]], img2 = [[0]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == img1.length == img1[i].length\n * n == img2.length == img2[i].length\n * 1 <= n <= 30\n * img1[i][j] is either 0 or 1.\n * img2[i][j] is either 0 or 1.",
        "Answer": "",
        "title": "image-overlap"
    },
    {
        "Question": "Magic Squares In Grid - A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\n\nGiven a row x col grid of integers, how many 3 x 3 magic square subgrids are there?\n\nNote: while a magic square can only contain numbers from 1 to 9, grid may contain numbers up to 15.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/11/magic_main.jpg]\n\n\nInput: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\nOutput: 1\nExplanation: \nThe following subgrid is a 3 x 3 magic square:\n[https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg]\nwhile this one is not:\n[https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg]\nIn total, there is only one magic square inside the given grid.\n\n\nExample 2:\n\n\nInput: grid = [[8]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * row == grid.length\n * col == grid[i].length\n * 1 <= row, col <= 10\n * 0 <= grid[i][j] <= 15",
        "Answer": "",
        "title": "magic-squares-in-grid"
    },
    {
        "Question": "Split Array into Fibonacci Sequence - You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\n\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\n\n * 0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),\n * f.length >= 3, and\n * f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\n\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\n\n \n\nExample 1:\n\n\nInput: num = \"1101111\"\nOutput: [11,0,11,11]\nExplanation: The output [110, 1, 111] would also be accepted.\n\n\nExample 2:\n\n\nInput: num = \"112358130\"\nOutput: []\nExplanation: The task is impossible.\n\n\nExample 3:\n\n\nInput: num = \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n\n\n \n\nConstraints:\n\n * 1 <= num.length <= 200\n * num contains only digits.",
        "Answer": "",
        "title": "split-array-into-fibonacci-sequence"
    },
    {
        "Question": "Longest Mountain in Array - You may recall that an array arr is a mountain array if and only if:\n\n * arr.length >= 3\n * There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]\n   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\n\n \n\nExample 1:\n\n\nInput: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n\n\nExample 2:\n\n\nInput: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 104\n * 0 <= arr[i] <= 104\n\n \n\nFollow up:\n\n * Can you solve it using only one pass?\n * Can you solve it in O(1) space?",
        "Answer": "",
        "title": "longest-mountain-in-array"
    },
    {
        "Question": "Maximize Distance to Closest Person - You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\n\nThere is at least one empty seat, and at least one person sitting.\n\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized. \n\nReturn that maximum distance to the closest person.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/10/distance.jpg]\n\n\nInput: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n\n\nExample 2:\n\n\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n\n\nExample 3:\n\n\nInput: seats = [0,1]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 2 <= seats.length <= 2 * 104\n * seats[i] is 0 or 1.\n * At least one seat is empty.\n * At least one seat is occupied.",
        "Answer": "",
        "title": "maximize-distance-to-closest-person"
    },
    {
        "Question": "Lemonade Change - At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\n\nNote that you do not have any change in hand at first.\n\nGiven an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: bills = [5,5,5,10,20]\nOutput: true\nExplanation: \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n\n\nExample 2:\n\n\nInput: bills = [5,5,10,10,20]\nOutput: false\nExplanation: \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.\n\n\n \n\nConstraints:\n\n * 1 <= bills.length <= 105\n * bills[i] is either 5, 10, or 20.",
        "Answer": "",
        "title": "lemonade-change"
    },
    {
        "Question": "Transpose Matrix - Given a 2D integer array matrix, return the transpose of matrix.\n\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\n\n[https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png]\n\n \n\nExample 1:\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[1,4,7],[2,5,8],[3,6,9]]\n\n\nExample 2:\n\n\nInput: matrix = [[1,2,3],[4,5,6]]\nOutput: [[1,4],[2,5],[3,6]]\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 1000\n * 1 <= m * n <= 105\n * -109 <= matrix[i][j] <= 109",
        "Answer": "",
        "title": "transpose-matrix"
    },
    {
        "Question": "Spiral Matrix III - You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\n\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.\n\nReturn an array of coordinates representing the positions of the grid in the order you visited them.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png]\n\n\nInput: rows = 1, cols = 4, rStart = 0, cStart = 0\nOutput: [[0,0],[0,1],[0,2],[0,3]]\n\n\nExample 2:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png]\n\n\nInput: rows = 5, cols = 6, rStart = 1, cStart = 4\nOutput: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n\n\n \n\nConstraints:\n\n * 1 <= rows, cols <= 100\n * 0 <= rStart < rows\n * 0 <= cStart < cols",
        "Answer": "",
        "title": "spiral-matrix-iii"
    },
    {
        "Question": "Fair Candy Swap - Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\n\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\n\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\n\n \n\nExample 1:\n\n\nInput: aliceSizes = [1,1], bobSizes = [2,2]\nOutput: [1,2]\n\n\nExample 2:\n\n\nInput: aliceSizes = [1,2], bobSizes = [2,3]\nOutput: [1,2]\n\n\nExample 3:\n\n\nInput: aliceSizes = [2], bobSizes = [1,3]\nOutput: [2,3]\n\n\n \n\nConstraints:\n\n * 1 <= aliceSizes.length, bobSizes.length <= 104\n * 1 <= aliceSizes[i], bobSizes[j] <= 105\n * Alice and Bob have a different total number of candies.\n * There will be at least one valid answer for the given input.",
        "Answer": "",
        "title": "fair-candy-swap"
    },
    {
        "Question": "Monotonic Array - An array is monotonic if it is either monotone increasing or monotone decreasing.\n\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\n\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,2,3]\nOutput: true\n\n\nExample 2:\n\n\nInput: nums = [6,5,4,4]\nOutput: true\n\n\nExample 3:\n\n\nInput: nums = [1,3,2]\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -105 <= nums[i] <= 105",
        "Answer": "",
        "title": "monotonic-array"
    },
    {
        "Question": "Sort Array By Parity - Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\n\nReturn any array that satisfies this condition.\n\n \n\nExample 1:\n\n\nInput: nums = [3,1,2,4]\nOutput: [2,4,3,1]\nExplanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\n\nExample 2:\n\n\nInput: nums = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5000\n * 0 <= nums[i] <= 5000",
        "Answer": "",
        "title": "sort-array-by-parity"
    },
    {
        "Question": "Snakes and Ladders - You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style [https://en.wikipedia.org/wiki/Boustrophedon] starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\n\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\n\n * Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\n   * This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\n * If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\n * The game ends when you reach the square n2.\n\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.\n\nNote that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\n\n * For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\n\nReturn the least number of dice rolls required to reach the square n2. If it is not possible to reach the square, return -1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/09/23/snakes.png]\n\n\nInput: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\nOutput: 4\nExplanation: \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.\n\n\nExample 2:\n\n\nInput: board = [[-1,-1],[-1,3]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == board.length == board[i].length\n * 2 <= n <= 20\n * board[i][j] is either -1 or in the range [1, n2].\n * The squares labeled 1 and n2 are not the starting points of any snake or ladder.",
        "Answer": "",
        "title": "snakes-and-ladders"
    },
    {
        "Question": "Partition Array into Disjoint Intervals - Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:\n\n * Every element in left is less than or equal to every element in right.\n * left and right are non-empty.\n * left has the smallest possible size.\n\nReturn the length of left after such a partitioning.\n\nTest cases are generated such that partitioning exists.\n\n \n\nExample 1:\n\n\nInput: nums = [5,0,3,8,6]\nOutput: 3\nExplanation: left = [5,0,3], right = [8,6]\n\n\nExample 2:\n\n\nInput: nums = [1,1,1,0,6,12]\nOutput: 4\nExplanation: left = [1,1,1,0], right = [6,12]\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 105\n * 0 <= nums[i] <= 106\n * There is at least one valid answer for the given input.",
        "Answer": "",
        "title": "partition-array-into-disjoint-intervals"
    },
    {
        "Question": "Maximum Sum Circular Subarray - Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\n\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\n\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\n\n \n\nExample 1:\n\n\nInput: nums = [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3.\n\n\nExample 2:\n\n\nInput: nums = [5,-3,5]\nOutput: 10\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10.\n\n\nExample 3:\n\n\nInput: nums = [-3,-2,-3]\nOutput: -2\nExplanation: Subarray [-2] has maximum sum -2.\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 3 * 104\n * -3 * 104 <= nums[i] <= 3 * 104",
        "Answer": "",
        "title": "maximum-sum-circular-subarray"
    },
    {
        "Question": "Sort Array By Parity II - Given an array of integers nums, half of the integers in nums are odd, and the other half are even.\n\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\n\nReturn any answer array that satisfies this condition.\n\n \n\nExample 1:\n\n\nInput: nums = [4,2,5,7]\nOutput: [4,5,2,7]\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n\n\nExample 2:\n\n\nInput: nums = [2,3]\nOutput: [2,3]\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 2 * 104\n * nums.length is even.\n * Half of the integers in nums are even.\n * 0 <= nums[i] <= 1000\n\n \n\nFollow Up: Could you solve it in-place?",
        "Answer": "",
        "title": "sort-array-by-parity-ii"
    },
    {
        "Question": "3Sum With Multiplicity - Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\n\nAs the answer can be very large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation: \nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n\n\nExample 2:\n\n\nInput: arr = [1,1,2,2,2,2], target = 5\nOutput: 12\nExplanation: \narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n\n\nExample 3:\n\n\nInput: arr = [2,1,3], target = 6\nOutput: 1\nExplanation: (1, 2, 3) occured one time in the array so we return 1.\n\n\n \n\nConstraints:\n\n * 3 <= arr.length <= 3000\n * 0 <= arr[i] <= 100\n * 0 <= target <= 300",
        "Answer": "",
        "title": "3sum-with-multiplicity"
    },
    {
        "Question": "Three Equal Parts - You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\n\nIf it is possible, return any [i, j] with i + 1 < j, such that:\n\n * arr[0], arr[1], ..., arr[i] is the first part,\n * arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and\n * arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.\n * All three parts have equal binary values.\n\nIf it is not possible, return [-1, -1].\n\nNote that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\n\n \n\nExample 1:\n\nInput: arr = [1,0,1,0,1]\nOutput: [0,3]\n\n\nExample 2:\n\nInput: arr = [1,1,0,1,1]\nOutput: [-1,-1]\n\n\nExample 3:\n\nInput: arr = [1,1,0,0,1]\nOutput: [0,2]\n\n\n \n\nConstraints:\n\n * 3 <= arr.length <= 3 * 104\n * arr[i] is 0 or 1",
        "Answer": "",
        "title": "three-equal-parts"
    },
    {
        "Question": "Beautiful Array - An array nums of length n is beautiful if:\n\n * nums is a permutation of the integers in the range [1, n].\n * For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].\n\nGiven the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.\n\n \n\nExample 1:\n\nInput: n = 4\nOutput: [2,1,4,3]\n\n\nExample 2:\n\nInput: n = 5\nOutput: [3,1,2,5,4]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1000",
        "Answer": "",
        "title": "beautiful-array"
    },
    {
        "Question": "Valid Mountain Array - Given an array of integers arr, return true if and only if it is a valid mountain array.\n\nRecall that arr is a mountain array if and only if:\n\n * arr.length >= 3\n * There exists some i with 0 < i < arr.length - 1 such that:\n   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]\n   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n[https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png]\n\n \n\nExample 1:\n\nInput: arr = [2,1]\nOutput: false\n\n\nExample 2:\n\nInput: arr = [3,5,5]\nOutput: false\n\n\nExample 3:\n\nInput: arr = [0,3,2,1]\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 104\n * 0 <= arr[i] <= 104",
        "Answer": "",
        "title": "valid-mountain-array"
    },
    {
        "Question": "Minimum Increment to Make Array Unique - You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.\n\nReturn the minimum number of moves to make every value in nums unique.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,2]\nOutput: 1\nExplanation: After 1 move, the array could be [1, 2, 3].\n\n\nExample 2:\n\n\nInput: nums = [3,2,1,2,1,7]\nOutput: 6\nExplanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown that it is impossible for the array to have all unique values with 5 or less moves.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 0 <= nums[i] <= 105",
        "Answer": "",
        "title": "minimum-increment-to-make-array-unique"
    },
    {
        "Question": "Most Stones Removed with Same Row or Column - On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\n\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\n\n \n\nExample 1:\n\n\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\nOutput: 5\nExplanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n\n\nExample 2:\n\n\nInput: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\nOutput: 3\nExplanation: One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n\n\nExample 3:\n\n\nInput: stones = [[0,0]]\nOutput: 0\nExplanation: [0,0] is the only stone on the plane, so you cannot remove it.\n\n\n \n\nConstraints:\n\n * 1 <= stones.length <= 1000\n * 0 <= xi, yi <= 104\n * No two stones are at the same coordinate point.",
        "Answer": "",
        "title": "most-stones-removed-with-same-row-or-column"
    },
    {
        "Question": "Largest Time for Given Digits - Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\n\nReturn the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.\n\n \n\nExample 1:\n\n\nInput: arr = [1,2,3,4]\nOutput: \"23:41\"\nExplanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.\n\n\nExample 2:\n\n\nInput: arr = [5,5,5,5]\nOutput: \"\"\nExplanation: There are no valid 24-hour times as \"55:55\" is not valid.\n\n\n \n\nConstraints:\n\n * arr.length == 4\n * 0 <= arr[i] <= 9",
        "Answer": "",
        "title": "largest-time-for-given-digits"
    },
    {
        "Question": "Reveal Cards In Increasing Order - You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].\n\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\n\nYou will do the following steps repeatedly until all cards are revealed:\n\n 1. Take the top card of the deck, reveal it, and take it out of the deck.\n 2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\n 3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.\n\nReturn an ordering of the deck that would reveal the cards in increasing order.\n\nNote that the first entry in the answer is considered to be the top of the deck.\n\n \n\nExample 1:\n\n\nInput: deck = [17,13,11,2,3,5,7]\nOutput: [2,13,3,11,5,17,7]\nExplanation: \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n\n\nExample 2:\n\n\nInput: deck = [1,1000]\nOutput: [1,1000]\n\n\n \n\nConstraints:\n\n * 1 <= deck.length <= 1000\n * 1 <= deck[i] <= 106\n * All the values of deck are unique.",
        "Answer": "",
        "title": "reveal-cards-in-increasing-order"
    },
    {
        "Question": "Largest Component Size by Common Factor - You are given an integer array of unique positive integers nums. Consider the following graph:\n\n * There are nums.length nodes, labeled nums[0] to nums[nums.length - 1],\n * There is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.\n\nReturn the size of the largest connected component in the graph.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/01/ex1.png]\n\n\nInput: nums = [4,6,15,35]\nOutput: 4\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/01/ex2.png]\n\n\nInput: nums = [20,50,9,63]\nOutput: 2\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2018/12/01/ex3.png]\n\n\nInput: nums = [2,3,6,7,4,12,21,39]\nOutput: 8\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * 1 <= nums[i] <= 105\n * All the values of nums are unique.",
        "Answer": "",
        "title": "largest-component-size-by-common-factor"
    },
    {
        "Question": "Array of Doubled Pairs - Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: arr = [3,1,3,6]\nOutput: false\n\n\nExample 2:\n\n\nInput: arr = [2,1,2,6]\nOutput: false\n\n\nExample 3:\n\n\nInput: arr = [4,-2,2,-4]\nOutput: true\nExplanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].\n\n\n \n\nConstraints:\n\n * 2 <= arr.length <= 3 * 104\n * arr.length is even.\n * -105 <= arr[i] <= 105",
        "Answer": "",
        "title": "array-of-doubled-pairs"
    },
    {
        "Question": "N-Repeated Element in Size 2N Array - You are given an integer array nums with the following properties:\n\n * nums.length == 2 * n.\n * nums contains n + 1 unique elements.\n * Exactly one element of nums is repeated n times.\n\nReturn the element that is repeated n times.\n\n \n\nExample 1:\n\nInput: nums = [1,2,3,3]\nOutput: 3\n\n\nExample 2:\n\nInput: nums = [2,1,2,5,3,2]\nOutput: 2\n\n\nExample 3:\n\nInput: nums = [5,1,5,2,5,3,5,4]\nOutput: 5\n\n\n \n\nConstraints:\n\n * 2 <= n <= 5000\n * nums.length == 2 * n\n * 0 <= nums[i] <= 104\n * nums contains n + 1 unique elements and one of them is repeated exactly n times.",
        "Answer": "",
        "title": "n-repeated-element-in-size-2n-array"
    },
    {
        "Question": "Longest Turbulent Subarray - Given an integer array arr, return the length of a maximum size turbulent subarray of arr.\n\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\n\nMore formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:\n\n * For i <= k < j:\n   * arr[k] > arr[k + 1] when k is odd, and\n   * arr[k] < arr[k + 1] when k is even.\n * Or, for i <= k < j:\n   * arr[k] > arr[k + 1] when k is even, and\n   * arr[k] < arr[k + 1] when k is odd.\n\n \n\nExample 1:\n\n\nInput: arr = [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]\n\n\nExample 2:\n\n\nInput: arr = [4,8,12,16]\nOutput: 2\n\n\nExample 3:\n\n\nInput: arr = [100]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 4 * 104\n * 0 <= arr[i] <= 109",
        "Answer": "",
        "title": "longest-turbulent-subarray"
    },
    {
        "Question": "Sum of Even Numbers After Queries - You are given an integer array nums and an array queries where queries[i] = [vali, indexi].\n\nFor each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.\n\nReturn an integer array answer where answer[i] is the answer to the ith query.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n\n\nExample 2:\n\n\nInput: nums = [1], queries = [[4,0]]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -104 <= nums[i] <= 104\n * 1 <= queries.length <= 104\n * -104 <= vali <= 104\n * 0 <= indexi < nums.length",
        "Answer": "",
        "title": "sum-of-even-numbers-after-queries"
    },
    {
        "Question": "Add to Array-Form of Integer - The array-form of an integer num is an array representing its digits in left to right order.\n\n * For example, for num = 1321, the array form is [1,3,2,1].\n\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.\n\n \n\nExample 1:\n\n\nInput: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234\n\n\nExample 2:\n\n\nInput: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455\n\n\nExample 3:\n\n\nInput: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021\n\n\n \n\nConstraints:\n\n * 1 <= num.length <= 104\n * 0 <= num[i] <= 9\n * num does not contain any leading zeros except for the zero itself.\n * 1 <= k <= 104",
        "Answer": "",
        "title": "add-to-array-form-of-integer"
    },
    {
        "Question": "Find the Town Judge - In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.\n\nIf the town judge exists, then:\n\n 1. The town judge trusts nobody.\n 2. Everybody (except for the town judge) trusts the town judge.\n 3. There is exactly one person that satisfies properties 1 and 2.\n\nYou are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.\n\nReturn the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.\n\n \n\nExample 1:\n\n\nInput: n = 2, trust = [[1,2]]\nOutput: 2\n\n\nExample 2:\n\n\nInput: n = 3, trust = [[1,3],[2,3]]\nOutput: 3\n\n\nExample 3:\n\n\nInput: n = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1000\n * 0 <= trust.length <= 104\n * trust[i].length == 2\n * All the pairs of trust are unique.\n * ai != bi\n * 1 <= ai, bi <= n",
        "Answer": "",
        "title": "find-the-town-judge"
    },
    {
        "Question": "Available Captures for Rook - You are given an 8 x 8 matrix representing a chessboard. There is exactly one white rook represented by 'R', some number of white bishops 'B', and some number of black pawns 'p'. Empty squares are represented by '.'.\n\nA rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece or the edge of the board. A rook is attacking a pawn if it can move to the pawn's square in one move.\n\nNote: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path.\n\nReturn the number of pawns the white rook is attacking.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/02/20/1253_example_1_improved.PNG]\n\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n\nOutput: 3\n\nExplanation:\n\nIn this example, the rook is attacking all the pawns.\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/02/19/1253_example_2_improved.PNG]\n\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n\nOutput: 0\n\nExplanation:\n\nThe bishops are blocking the rook from attacking any of the pawns.\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2019/02/20/1253_example_3_improved.PNG]\n\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n\nOutput: 3\n\nExplanation:\n\nThe rook is attacking the pawns at positions b5, d6, and f5.\n\n \n\nConstraints:\n\n * board.length == 8\n * board[i].length == 8\n * board[i][j] is either 'R', '.', 'B', or 'p'\n * There is exactly one cell with board[i][j] == 'R'",
        "Answer": "",
        "title": "available-captures-for-rook"
    },
    {
        "Question": "Longest Palindromic Substring - Given a string s, return the longest palindromic substring in s.\n\n \n\nExample 1:\n\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\n\nExample 2:\n\n\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s consist of only digits and English letters.",
        "Answer": "",
        "title": "longest-palindromic-substring"
    },
    {
        "Question": "Zigzag Conversion - The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\n\nstring convert(string s, int numRows);\n\n\n \n\nExample 1:\n\n\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n\n\nExample 2:\n\n\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\n\nExample 3:\n\n\nInput: s = \"A\", numRows = 1\nOutput: \"A\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s consists of English letters (lower-case and upper-case), ',' and '.'.\n * 1 <= numRows <= 1000",
        "Answer": "",
        "title": "zigzag-conversion"
    },
    {
        "Question": "String to Integer (atoi) - Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\n\nThe algorithm for myAtoi(string s) is as follows:\n\n 1. Whitespace: Ignore any leading whitespace (\" \").\n 2. Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present.\n 3. Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\n 4. Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\n\nReturn the integer as the final result.\n\n \n\nExample 1:\n\nInput: s = \"42\"\n\nOutput: 42\n\nExplanation:\n\n\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\n\n\nExample 2:\n\nInput: s = \" -042\"\n\nOutput: -42\n\nExplanation:\n\n\nStep 1: \"   -042\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -042\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -042\" (\"042\" is read in, leading zeros ignored in the result)\n               ^\n\n\nExample 3:\n\nInput: s = \"1337c0d3\"\n\nOutput: 1337\n\nExplanation:\n\n\nStep 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"1337c0d3\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\n             ^\n\n\nExample 4:\n\nInput: s = \"0-1\"\n\nOutput: 0\n\nExplanation:\n\n\nStep 1: \"0-1\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"0-1\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit)\n          ^\n\n\nExample 5:\n\nInput: s = \"words and 987\"\n\nOutput: 0\n\nExplanation:\n\nReading stops at the first non-digit character 'w'.\n\n \n\nConstraints:\n\n * 0 <= s.length <= 200\n * s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.",
        "Answer": "",
        "title": "string-to-integer-atoi"
    },
    {
        "Question": "Longest Common Prefix - Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\n \n\nExample 1:\n\n\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\n\nExample 2:\n\n\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n\n \n\nConstraints:\n\n * 1 <= strs.length <= 200\n * 0 <= strs[i].length <= 200\n * strs[i] consists of only lowercase English letters if it is non-empty.",
        "Answer": "",
        "title": "longest-common-prefix"
    },
    {
        "Question": "Find the Index of the First Occurrence in a String - Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\n \n\nExample 1:\n\n\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\n\nExample 2:\n\n\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n\n \n\nConstraints:\n\n * 1 <= haystack.length, needle.length <= 104\n * haystack and needle consist of only lowercase English characters.",
        "Answer": "",
        "title": "implement-strstr"
    },
    {
        "Question": "Count and Say - The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\n * countAndSay(1) = \"1\"\n * countAndSay(n) is the run-length encoding of countAndSay(n - 1).\n\nRun-length encoding [http://en.wikipedia.org/wiki/Run-length_encoding] (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\".\n\nGiven a positive integer n, return the nth element of the count-and-say sequence.\n\n \n\nExample 1:\n\nInput: n = 4\n\nOutput: \"1211\"\n\nExplanation:\n\n\ncountAndSay(1) = \"1\"\ncountAndSay(2) = RLE of \"1\" = \"11\"\ncountAndSay(3) = RLE of \"11\" = \"21\"\ncountAndSay(4) = RLE of \"21\" = \"1211\"\n\n\nExample 2:\n\nInput: n = 1\n\nOutput: \"1\"\n\nExplanation:\n\nThis is the base case.\n\n \n\nConstraints:\n\n * 1 <= n <= 30\n\n \n\nFollow up: Could you solve it iteratively?",
        "Answer": "",
        "title": "count-and-say"
    },
    {
        "Question": "Multiply Strings - Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n \n\nExample 1:\n\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\n\n\nExample 2:\n\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n\n \n\nConstraints:\n\n * 1 <= num1.length, num2.length <= 200\n * num1 and num2 consist of digits only.\n * Both num1 and num2 do not contain any leading zero, except the number 0 itself.",
        "Answer": "",
        "title": "multiply-strings"
    },
    {
        "Question": "Length of Last Word - Given a string s consisting of words and spaces, return the length of the last word in the string.\n\nA word is a maximal substring consisting of non-space characters only.\n\n \n\nExample 1:\n\n\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.\n\n\nExample 2:\n\n\nInput: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.\n\n\nExample 3:\n\n\nInput: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s consists of only English letters and spaces ' '.\n * There will be at least one word in s.",
        "Answer": "",
        "title": "length-of-last-word"
    },
    {
        "Question": "Add Binary - Given two binary strings a and b, return their sum as a binary string.\n\n \n\nExample 1:\n\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\n\n\nExample 2:\n\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\n\n \n\nConstraints:\n\n * 1 <= a.length, b.length <= 104\n * a and b consist only of '0' or '1' characters.\n * Each string does not contain leading zeros except for the zero itself.",
        "Answer": "",
        "title": "add-binary"
    },
    {
        "Question": "Text Justification - Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\n\nNote:\n\n * A word is defined as a character sequence consisting of non-space characters only.\n * Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n * The input array words contains at least one word.\n\n \n\nExample 1:\n\n\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput:\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n\nExample 2:\n\n\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput:\n[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\n\nExample 3:\n\n\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\nOutput:\n[\n  \"Science  is  what we\",\n  \"understand      well\",\n  \"enough to explain to\",\n  \"a  computer.  Art is\",\n  \"everything  else  we\",\n  \"do                  \"\n]\n\n \n\nConstraints:\n\n * 1 <= words.length <= 300\n * 1 <= words[i].length <= 20\n * words[i] consists of only English letters and symbols.\n * 1 <= maxWidth <= 100\n * words[i].length <= maxWidth",
        "Answer": "",
        "title": "text-justification"
    },
    {
        "Question": "Valid Palindrome - A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string s, return true if it is a palindrome, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\n\nExample 2:\n\n\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\n\nExample 3:\n\n\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 2 * 105\n * s consists only of printable ASCII characters.",
        "Answer": "",
        "title": "valid-palindrome"
    },
    {
        "Question": "Reverse Words in a String - Given an input string s, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n \n\nExample 1:\n\n\nInput: s = \"the sky is blue\"\nOutput: \"blue is sky the\"\n\n\nExample 2:\n\n\nInput: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n\n\nExample 3:\n\n\nInput: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s contains English letters (upper-case and lower-case), digits, and spaces ' '.\n * There is at least one word in s.\n\n \n\nFollow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?",
        "Answer": "",
        "title": "reverse-words-in-a-string"
    },
    {
        "Question": "Compare Version Numbers - Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.\n\nTo compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0.\n\nReturn the following:\n\n * If version1 < version2, return -1.\n * If version1 > version2, return 1.\n * Otherwise, return 0.\n\n \n\nExample 1:\n\nInput: version1 = \"1.2\", version2 = \"1.10\"\n\nOutput: -1\n\nExplanation:\n\nversion1's second revision is \"2\" and version2's second revision is \"10\": 2 < 10, so version1 < version2.\n\nExample 2:\n\nInput: version1 = \"1.01\", version2 = \"1.001\"\n\nOutput: 0\n\nExplanation:\n\nIgnoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n\nExample 3:\n\nInput: version1 = \"1.0\", version2 = \"1.0.0.0\"\n\nOutput: 0\n\nExplanation:\n\nversion1 has less revisions, which means every missing revision are treated as \"0\".\n\n \n\nConstraints:\n\n * 1 <= version1.length, version2.length <= 500\n * version1 and version2 only contain digits and '.'.\n * version1 and version2 are valid version numbers.\n * All the given revisions in version1 and version2 can be stored in a 32-bit integer.",
        "Answer": "",
        "title": "compare-version-numbers"
    },
    {
        "Question": "Shortest Palindrome - You are given a string s. You can convert s to a palindrome by adding characters in front of it.\n\nReturn the shortest palindrome you can find by performing this transformation.\n\n \n\nExample 1:\n\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\n\n\nExample 2:\n\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"\n\n\n \n\nConstraints:\n\n * 0 <= s.length <= 5 * 104\n * s consists of lowercase English letters only.",
        "Answer": "",
        "title": "shortest-palindrome"
    },
    {
        "Question": "Valid Anagram - Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n\n \n\nExample 1:\n\nInput: s = \"anagram\", t = \"nagaram\"\n\nOutput: true\n\nExample 2:\n\nInput: s = \"rat\", t = \"car\"\n\nOutput: false\n\n \n\nConstraints:\n\n * 1 <= s.length, t.length <= 5 * 104\n * s and t consist of lowercase English letters.\n\n \n\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",
        "Answer": "",
        "title": "valid-anagram"
    },
    {
        "Question": "Integer to English Words - Convert a non-negative integer num to its English words representation.\n\n \n\nExample 1:\n\n\nInput: num = 123\nOutput: \"One Hundred Twenty Three\"\n\n\nExample 2:\n\n\nInput: num = 12345\nOutput: \"Twelve Thousand Three Hundred Forty Five\"\n\n\nExample 3:\n\n\nInput: num = 1234567\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n\n\n \n\nConstraints:\n\n * 0 <= num <= 231 - 1",
        "Answer": "",
        "title": "integer-to-english-words"
    },
    {
        "Question": "Additive Number - An additive number is a string whose digits can form an additive sequence.\n\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\n\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n\n \n\nExample 1:\n\n\nInput: \"112358\"\nOutput: true\nExplanation: \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n\n\nExample 2:\n\n\nInput: \"199100199\"\nOutput: true\nExplanation: \nThe additive sequence is: 1, 99, 100, 199. \n1 + 99 = 100, 99 + 100 = 199\n\n\n \n\nConstraints:\n\n * 1 <= num.length <= 35\n * num consists only of digits.\n\n \n\nFollow up: How would you handle overflow for very large input integers?",
        "Answer": "",
        "title": "additive-number"
    },
    {
        "Question": "Ransom Note - Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\n\nEach letter in magazine can only be used once in ransomNote.\n\n \n\nExample 1:\n\nInput: ransomNote = \"a\", magazine = \"b\"\nOutput: false\n\n\nExample 2:\n\nInput: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false\n\n\nExample 3:\n\nInput: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= ransomNote.length, magazine.length <= 105\n * ransomNote and magazine consist of lowercase English letters.",
        "Answer": "",
        "title": "ransom-note"
    },
    {
        "Question": "Convert a Number to Hexadecimal - Given a 32-bit integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement [https://en.wikipedia.org/wiki/Two%27s_complement] method is used.\n\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n\nNote: You are not allowed to use any built-in library method to directly solve this problem.\n\n \n\nExample 1:\n\nInput: num = 26\nOutput: \"1a\"\n\n\nExample 2:\n\nInput: num = -1\nOutput: \"ffffffff\"\n\n\n \n\nConstraints:\n\n * -231 <= num <= 231 - 1",
        "Answer": "",
        "title": "convert-a-number-to-hexadecimal"
    },
    {
        "Question": "Add Strings - Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\n\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n\n \n\nExample 1:\n\n\nInput: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"\n\n\nExample 2:\n\n\nInput: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"\n\n\nExample 3:\n\n\nInput: num1 = \"0\", num2 = \"0\"\nOutput: \"0\"\n\n\n \n\nConstraints:\n\n * 1 <= num1.length, num2.length <= 104\n * num1 and num2 consist of only digits.\n * num1 and num2 don't have any leading zeros except for the zero itself.",
        "Answer": "",
        "title": "add-strings"
    },
    {
        "Question": "Strong Password Checker - A password is considered strong if the below conditions are all met:\n\n * It has at least 6 characters and at most 20 characters.\n * It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\n * It does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\n\nIn one step, you can:\n\n * Insert one character to password,\n * Delete one character from password, or\n * Replace one character of password with another character.\n\n \n\nExample 1:\n\nInput: password = \"a\"\nOutput: 5\n\n\nExample 2:\n\nInput: password = \"aA1\"\nOutput: 3\n\n\nExample 3:\n\nInput: password = \"1337C0d3\"\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= password.length <= 50\n * password consists of letters, digits, dot '.' or exclamation mark '!'.",
        "Answer": "",
        "title": "strong-password-checker"
    },
    {
        "Question": "Number of Segments in a String - Given a string s, return the number of segments in the string.\n\nA segment is defined to be a contiguous sequence of non-space characters.\n\n \n\nExample 1:\n\n\nInput: s = \"Hello, my name is John\"\nOutput: 5\nExplanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\n\n\nExample 2:\n\n\nInput: s = \"Hello\"\nOutput: 1\n\n\n \n\nConstraints:\n\n * 0 <= s.length <= 300\n * s consists of lowercase and uppercase English letters, digits, or one of the following characters \"!@#$%^&*()_+-=',.:\".\n * The only space character in s is ' '.",
        "Answer": "",
        "title": "number-of-segments-in-a-string"
    },
    {
        "Question": "String Compression - Given an array of characters chars, compress it using the following algorithm:\n\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\n\n * If the group's length is 1, append the character to s.\n * Otherwise, append the character followed by the group's length.\n\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\n\nAfter you are done modifying the input array, return the new length of the array.\n\nYou must write an algorithm that uses only constant extra space.\n\n \n\nExample 1:\n\n\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n\n\nExample 2:\n\n\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n\n\nExample 3:\n\n\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n\n \n\nConstraints:\n\n * 1 <= chars.length <= 2000\n * chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.",
        "Answer": "",
        "title": "string-compression"
    },
    {
        "Question": "Repeated Substring Pattern - Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\n \n\nExample 1:\n\n\nInput: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.\n\n\nExample 2:\n\n\nInput: s = \"aba\"\nOutput: false\n\n\nExample 3:\n\n\nInput: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "repeated-substring-pattern"
    },
    {
        "Question": "Validate IP Address - Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\n\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\n\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n\n * 1 <= xi.length <= 4\n * xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\n * Leading zeros are allowed in xi.\n\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n\n \n\nExample 1:\n\n\nInput: queryIP = \"172.16.254.1\"\nOutput: \"IPv4\"\nExplanation: This is a valid IPv4 address, return \"IPv4\".\n\n\nExample 2:\n\n\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\nOutput: \"IPv6\"\nExplanation: This is a valid IPv6 address, return \"IPv6\".\n\n\nExample 3:\n\n\nInput: queryIP = \"256.256.256.256\"\nOutput: \"Neither\"\nExplanation: This is neither a IPv4 address nor a IPv6 address.\n\n\n \n\nConstraints:\n\n * queryIP consists only of English letters, digits and the characters '.' and ':'.",
        "Answer": "",
        "title": "validate-ip-address"
    },
    {
        "Question": "Magical String - A magical string s consists of only '1' and '2' and obeys the following rules:\n\n * The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n\nThe first few elements of s is s = \"1221121221221121122……\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\n\nGiven an integer n, return the number of 1's in the first n number in the magical string s.\n\n \n\nExample 1:\n\n\nInput: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 105",
        "Answer": "",
        "title": "magical-string"
    },
    {
        "Question": "License Key Formatting - You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\n\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n\nReturn the reformatted license key.\n\n \n\nExample 1:\n\n\nInput: s = \"5F3Z-2e-9-w\", k = 4\nOutput: \"5F3Z-2E9W\"\nExplanation: The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n\n\nExample 2:\n\n\nInput: s = \"2-5g-3-J\", k = 2\nOutput: \"2-5G-3J\"\nExplanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of English letters, digits, and dashes '-'.\n * 1 <= k <= 104",
        "Answer": "",
        "title": "license-key-formatting"
    },
    {
        "Question": "Keyboard Row - Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\n\nNote that the strings are case-insensitive, both lowercased and uppercased of the same letter are treated as if they are at the same row.\n\nIn the American keyboard:\n\n * the first row consists of the characters \"qwertyuiop\",\n * the second row consists of the characters \"asdfghjkl\", and\n * the third row consists of the characters \"zxcvbnm\".\n\n[https://assets.leetcode.com/uploads/2018/10/12/keyboard.png]\n\n \n\nExample 1:\n\nInput: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n\nOutput: [\"Alaska\",\"Dad\"]\n\nExplanation:\n\nBoth \"a\" and \"A\" are in the 2nd row of the American keyboard due to case insensitivity.\n\nExample 2:\n\nInput: words = [\"omk\"]\n\nOutput: []\n\nExample 3:\n\nInput: words = [\"adsdf\",\"sfd\"]\n\nOutput: [\"adsdf\",\"sfd\"]\n\n \n\nConstraints:\n\n * 1 <= words.length <= 20\n * 1 <= words[i].length <= 100\n * words[i] consists of English letters (both lowercase and uppercase).",
        "Answer": "",
        "title": "keyboard-row"
    },
    {
        "Question": "Detect Capital - We define the usage of capitals in a word to be right when one of the following cases holds:\n\n * All letters in this word are capitals, like \"USA\".\n * All letters in this word are not capitals, like \"leetcode\".\n * Only the first letter in this word is capital, like \"Google\".\n\nGiven a string word, return true if the usage of capitals in it is right.\n\n \n\nExample 1:\n\nInput: word = \"USA\"\nOutput: true\n\n\nExample 2:\n\nInput: word = \"FlaG\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= word.length <= 100\n * word consists of lowercase and uppercase English letters.",
        "Answer": "",
        "title": "detect-capital"
    },
    {
        "Question": "Longest Uncommon Subsequence I - Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If no such uncommon subsequence exists, return -1.\n\nAn uncommon subsequence between two strings is a string that is a subsequence of exactly one of them.\n\n \n\nExample 1:\n\n\nInput: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence.\n\n\nExample 2:\n\n\nInput: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".\n\n\nExample 3:\n\n\nInput: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be -1.\n\n\n \n\nConstraints:\n\n * 1 <= a.length, b.length <= 100\n * a and b consist of lower-case English letters.",
        "Answer": "",
        "title": "longest-uncommon-subsequence-i"
    },
    {
        "Question": "Longest Uncommon Subsequence II - Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\n\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\n\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n\n * For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\n\n \n\nExample 1:\n\nInput: strs = [\"aba\",\"cdc\",\"eae\"]\nOutput: 3\n\n\nExample 2:\n\nInput: strs = [\"aaa\",\"aaa\",\"aa\"]\nOutput: -1\n\n\n \n\nConstraints:\n\n * 2 <= strs.length <= 50\n * 1 <= strs[i].length <= 10\n * strs[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "longest-uncommon-subsequence-ii"
    },
    {
        "Question": "Longest Word in Dictionary through Deleting - Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n\n \n\nExample 1:\n\n\nInput: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\nOutput: \"apple\"\n\n\nExample 2:\n\n\nInput: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\nOutput: \"a\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * 1 <= dictionary.length <= 1000\n * 1 <= dictionary[i].length <= 1000\n * s and dictionary[i] consist of lowercase English letters.",
        "Answer": "",
        "title": "longest-word-in-dictionary-through-deleting"
    },
    {
        "Question": "Minimum Time Difference - Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.\n\n \n\nExample 1:\n\nInput: timePoints = [\"23:59\",\"00:00\"]\nOutput: 1\n\n\nExample 2:\n\nInput: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 2 <= timePoints.length <= 2 * 104\n * timePoints[i] is in the format \"HH:MM\".",
        "Answer": "",
        "title": "minimum-time-difference"
    },
    {
        "Question": "Reverse String II - Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\n\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\n\n \n\nExample 1:\n\nInput: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"\n\n\nExample 2:\n\nInput: s = \"abcd\", k = 2\nOutput: \"bacd\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s consists of only lowercase English letters.\n * 1 <= k <= 104",
        "Answer": "",
        "title": "reverse-string-ii"
    },
    {
        "Question": "Student Attendance Record I - You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n * 'A': Absent.\n * 'L': Late.\n * 'P': Present.\n\nThe student is eligible for an attendance award if they meet both of the following criteria:\n\n * The student was absent ('A') for strictly fewer than 2 days total.\n * The student was never late ('L') for 3 or more consecutive days.\n\nReturn true if the student is eligible for an attendance award, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: s = \"PPALLP\"\nOutput: true\nExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.\n\n\nExample 2:\n\n\nInput: s = \"PPALLL\"\nOutput: false\nExplanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s[i] is either 'A', 'L', or 'P'.",
        "Answer": "",
        "title": "student-attendance-record-i"
    },
    {
        "Question": "Split Concatenated Strings - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "split-concatenated-strings"
    },
    {
        "Question": "Next Greater Element III - Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.\n\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.\n\n \n\nExample 1:\n\nInput: n = 12\nOutput: 21\n\n\nExample 2:\n\nInput: n = 21\nOutput: -1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "next-greater-element-iii"
    },
    {
        "Question": "Reverse Words in a String III - Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n \n\nExample 1:\n\n\nInput: s = \"Let's take LeetCode contest\"\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\n\n\nExample 2:\n\n\nInput: s = \"Mr Ding\"\nOutput: \"rM gniD\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 5 * 104\n * s contains printable ASCII characters.\n * s does not contain any leading or trailing spaces.\n * There is at least one word in s.\n * All the words in s are separated by a single space.",
        "Answer": "",
        "title": "reverse-words-in-a-string-iii"
    },
    {
        "Question": "Find the Closest Palindrome - Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\n\nThe closest is defined as the absolute difference minimized between two integers.\n\n \n\nExample 1:\n\n\nInput: n = \"123\"\nOutput: \"121\"\n\n\nExample 2:\n\n\nInput: n = \"1\"\nOutput: \"0\"\nExplanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.\n\n\n \n\nConstraints:\n\n * 1 <= n.length <= 18\n * n consists of only digits.\n * n does not have leading zeros.\n * n is representing an integer in the range [1, 1018 - 1].",
        "Answer": "",
        "title": "find-the-closest-palindrome"
    },
    {
        "Question": "Tag Validator - Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\n\nA code snippet is valid if all the following rules hold:\n\n 1. The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\n 2. A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\n 3. A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\n 4. A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\n 5. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n 6. A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\n 7. The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\n 8. CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\n\n \n\nExample 1:\n\n\nInput: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\nOutput: true\nExplanation: \nThe code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n\n\nExample 2:\n\n\nInput: code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\nOutput: true\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> \"<DIV>\"\nend_tag -> \"</DIV>\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> \">>  ![cdata[]] \"\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\n\n\nExample 3:\n\n\nInput: code = \"<A>  <B> </A>   </B>\"\nOutput: false\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n\n\n \n\nConstraints:\n\n * 1 <= code.length <= 500\n * code consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.",
        "Answer": "",
        "title": "tag-validator"
    },
    {
        "Question": "Palindromic Substrings - Given a string s, return the number of palindromic substrings in it.\n\nA string is a palindrome when it reads the same backward as forward.\n\nA substring is a contiguous sequence of characters within the string.\n\n \n\nExample 1:\n\n\nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n\n\nExample 2:\n\n\nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "palindromic-substrings"
    },
    {
        "Question": "Replace Words - In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. For example, when the root \"help\" is followed by the word \"ful\", we can form a derivative \"helpful\".\n\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.\n\nReturn the sentence after the replacement.\n\n \n\nExample 1:\n\n\nInput: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\nOutput: \"the cat was rat by the bat\"\n\n\nExample 2:\n\n\nInput: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\nOutput: \"a a b c\"\n\n\n \n\nConstraints:\n\n * 1 <= dictionary.length <= 1000\n * 1 <= dictionary[i].length <= 100\n * dictionary[i] consists of only lower-case letters.\n * 1 <= sentence.length <= 106\n * sentence consists of only lower-case letters and spaces.\n * The number of words in sentence is in the range [1, 1000]\n * The length of each word in sentence is in the range [1, 1000]\n * Every two consecutive words in sentence will be separated by exactly one space.\n * sentence does not have leading or trailing spaces.",
        "Answer": "",
        "title": "replace-words"
    },
    {
        "Question": "Robot Return to Origin - There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\n\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\n\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\n\nNote: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\n \n\nExample 1:\n\n\nInput: moves = \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n\n\nExample 2:\n\n\nInput: moves = \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n\n\n \n\nConstraints:\n\n * 1 <= moves.length <= 2 * 104\n * moves only contains the characters 'U', 'D', 'L' and 'R'.",
        "Answer": "",
        "title": "robot-return-to-origin"
    },
    {
        "Question": "Valid Parenthesis String - Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\n\nThe following rules define a valid string:\n\n * Any left parenthesis '(' must have a corresponding right parenthesis ')'.\n * Any right parenthesis ')' must have a corresponding left parenthesis '('.\n * Left parenthesis '(' must go before the corresponding right parenthesis ')'.\n * '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string \"\".\n\n \n\nExample 1:\n\nInput: s = \"()\"\nOutput: true\n\n\nExample 2:\n\nInput: s = \"(*)\"\nOutput: true\n\n\nExample 3:\n\nInput: s = \"(*))\"\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 100\n * s[i] is '(', ')' or '*'.",
        "Answer": "",
        "title": "valid-parenthesis-string"
    },
    {
        "Question": "Valid Palindrome II - Given a string s, return true if the s can be palindrome after deleting at most one character from it.\n\n \n\nExample 1:\n\n\nInput: s = \"aba\"\nOutput: true\n\n\nExample 2:\n\n\nInput: s = \"abca\"\nOutput: true\nExplanation: You could delete the character 'c'.\n\n\nExample 3:\n\n\nInput: s = \"abc\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "valid-palindrome-ii"
    },
    {
        "Question": "Next Closest Time - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "next-closest-time"
    },
    {
        "Question": "Repeated String Match - Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b to be a substring of a after repeating it, return -1.\n\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\n\n \n\nExample 1:\n\n\nInput: a = \"abcd\", b = \"cdabcdab\"\nOutput: 3\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.\n\n\nExample 2:\n\n\nInput: a = \"a\", b = \"aa\"\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= a.length, b.length <= 104\n * a and b consist of lowercase English letters.",
        "Answer": "",
        "title": "repeated-string-match"
    },
    {
        "Question": "Count Binary Substrings - Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\n\nSubstrings that occur multiple times are counted the number of times they occur.\n\n \n\nExample 1:\n\n\nInput: s = \"00110011\"\nOutput: 6\nExplanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.\n\n\nExample 2:\n\n\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is either '0' or '1'.",
        "Answer": "",
        "title": "count-binary-substrings"
    },
    {
        "Question": "To Lower Case - Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.\n\n \n\nExample 1:\n\n\nInput: s = \"Hello\"\nOutput: \"hello\"\n\n\nExample 2:\n\n\nInput: s = \"here\"\nOutput: \"here\"\n\n\nExample 3:\n\n\nInput: s = \"LOVELY\"\nOutput: \"lovely\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 100\n * s consists of printable ASCII characters.",
        "Answer": "",
        "title": "to-lower-case"
    },
    {
        "Question": "Longest Word in Dictionary - Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n\nNote that the word should be built from left to right with each additional character being added to the end of a previous word. \n\n \n\nExample 1:\n\n\nInput: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\nOutput: \"world\"\nExplanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\n\n\nExample 2:\n\n\nInput: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\nOutput: \"apple\"\nExplanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 1000\n * 1 <= words[i].length <= 30\n * words[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "longest-word-in-dictionary"
    },
    {
        "Question": "Remove Comments - Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\n * The string \"//\" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\n * The string \"/*\" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string \"/*/\" does not yet end the block comment, as the ending would be overlapping the beginning.\n\nThe first effective comment takes precedence over others.\n\n * For example, if the string \"//\" occurs in a block comment, it is ignored.\n * Similarly, if the string \"/*\" occurs in a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n\nThere will be no control characters, single quote, or double quote characters.\n\n * For example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case.\n\nAlso, nothing else such as defines or macros will interfere with the comments.\n\nIt is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\n\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\n\nAfter removing the comments from the source code, return the source code in the same format.\n\n \n\nExample 1:\n\n\nInput: source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\nOutput: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\nExplanation: The line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n\nExample 2:\n\n\nInput: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\nOutput: [\"ab\"]\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\n\n\n \n\nConstraints:\n\n * 1 <= source.length <= 100\n * 0 <= source[i].length <= 80\n * source[i] consists of printable ASCII characters.\n * Every open block comment is eventually closed.\n * There are no single-quote or double-quote in the input.",
        "Answer": "",
        "title": "remove-comments"
    },
    {
        "Question": "IP to CIDR - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "ip-to-cidr"
    },
    {
        "Question": "Custom Sort String - You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\n\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\n\nReturn any permutation of s that satisfies this property.\n\n \n\nExample 1:\n\nInput: order = \"cba\", s = \"abcd\"\n\nOutput: \"cbad\"\n\nExplanation: \"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\".\n\nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n\nExample 2:\n\nInput: order = \"bcafg\", s = \"abcd\"\n\nOutput: \"bcad\"\n\nExplanation: The characters \"b\", \"c\", and \"a\" from order dictate the order for the characters in s. The character \"d\" in s does not appear in order, so its position is flexible.\n\nFollowing the order of appearance in order, \"b\", \"c\", and \"a\" from s should be arranged as \"b\", \"c\", \"a\". \"d\" can be placed at any position since it's not in order. The output \"bcad\" correctly follows this rule. Other arrangements like \"dbca\" or \"bcda\" would also be valid, as long as \"b\", \"c\", \"a\" maintain their order.\n\n \n\nConstraints:\n\n * 1 <= order.length <= 26\n * 1 <= s.length <= 200\n * order and s consist of lowercase English letters.\n * All the characters of order are unique.",
        "Answer": "",
        "title": "custom-sort-string"
    },
    {
        "Question": "Rotate String - Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\n\nA shift on s consists of moving the leftmost character of s to the rightmost position.\n\n * For example, if s = \"abcde\", then it will be \"bcdea\" after one shift.\n\n \n\nExample 1:\n\nInput: s = \"abcde\", goal = \"cdeab\"\nOutput: true\n\n\nExample 2:\n\nInput: s = \"abcde\", goal = \"abced\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= s.length, goal.length <= 100\n * s and goal consist of lowercase English letters.",
        "Answer": "",
        "title": "rotate-string"
    },
    {
        "Question": "Unique Morse Code Words - International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n\n * 'a' maps to \".-\",\n * 'b' maps to \"-...\",\n * 'c' maps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n\n\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\n\n * For example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n\n \n\nExample 1:\n\n\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\nOutput: 2\nExplanation: The transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\".\n\n\nExample 2:\n\n\nInput: words = [\"a\"]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 100\n * 1 <= words[i].length <= 12\n * words[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "unique-morse-code-words"
    },
    {
        "Question": "Number of Lines To Write String - You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\n\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\n\nReturn an array result of length 2 where:\n\n * result[0] is the total number of lines.\n * result[1] is the width of the last line in pixels.\n\n \n\nExample 1:\n\n\nInput: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.\n\nExample 2:\n\n\nInput: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.\n\n \n\nConstraints:\n\n * widths.length == 26\n * 2 <= widths[i] <= 10\n * 1 <= s.length <= 1000\n * s contains only lowercase English letters.",
        "Answer": "",
        "title": "number-of-lines-to-write-string"
    },
    {
        "Question": "Expressive Words - Sometimes people repeat letters to represent extra feeling. For example:\n\n * \"hello\" -> \"heeellooo\"\n * \"hi\" -> \"hiiii\"\n\nIn these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\".\n\nYou are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.\n\n * For example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has a size less than three. Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\". If s = \"helllllooo\", then the query word \"hello\" would be stretchy because of these two extension operations: query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s.\n\nReturn the number of query strings that are stretchy.\n\n \n\nExample 1:\n\n\nInput: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]\nOutput: 1\nExplanation: \nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.\n\n\nExample 2:\n\n\nInput: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= s.length, words.length <= 100\n * 1 <= words[i].length <= 100\n * s and words[i] consist of lowercase letters.",
        "Answer": "",
        "title": "expressive-words"
    },
    {
        "Question": "Ambiguous Coordinates - We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n\n * For example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\".\n\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\n\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\n\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n\n \n\nExample 1:\n\n\nInput: s = \"(123)\"\nOutput: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\n\n\nExample 2:\n\n\nInput: s = \"(0123)\"\nOutput: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\nExplanation: 0.0, 00, 0001 or 00.01 are not allowed.\n\n\nExample 3:\n\n\nInput: s = \"(00011)\"\nOutput: [\"(0, 0.011)\",\"(0.001, 1)\"]\n\n\n \n\nConstraints:\n\n * 4 <= s.length <= 12\n * s[0] == '(' and s[s.length - 1] == ')'.\n * The rest of s are digits.",
        "Answer": "",
        "title": "ambiguous-coordinates"
    },
    {
        "Question": "Most Common Word - Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\n\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.\n\nNote that words can not contain punctuation symbols.\n\n \n\nExample 1:\n\n\nInput: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\nOutput: \"ball\"\nExplanation: \n\"hit\" occurs 3 times, but it is a banned word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is banned.\n\n\nExample 2:\n\n\nInput: paragraph = \"a.\", banned = []\nOutput: \"a\"\n\n\n \n\nConstraints:\n\n * 1 <= paragraph.length <= 1000\n * paragraph consists of English letters, space ' ', or one of the symbols: \"!?',;.\".\n * 0 <= banned.length <= 100\n * 1 <= banned[i].length <= 10\n * banned[i] consists of only lowercase English letters.",
        "Answer": "",
        "title": "most-common-word"
    },
    {
        "Question": "Short Encoding of Words - A valid encoding of an array of words is any reference string s and array of indices indices such that:\n\n * words.length == indices.length\n * The reference string s ends with the '#' character.\n * For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].\n\nGiven an array of words, return the length of the shortest reference string s possible of any valid encoding of words.\n\n \n\nExample 1:\n\n\nInput: words = [\"time\", \"me\", \"bell\"]\nOutput: 10\nExplanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"\n\n\nExample 2:\n\n\nInput: words = [\"t\"]\nOutput: 2\nExplanation: A valid encoding would be s = \"t#\" and indices = [0].\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 2000\n * 1 <= words[i].length <= 7\n * words[i] consists of only lowercase letters.",
        "Answer": "",
        "title": "short-encoding-of-words"
    },
    {
        "Question": "Goat Latin - You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\n\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n\n * If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word.\n   * For example, the word \"apple\" becomes \"applema\".\n * If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\".\n   * For example, the word \"goat\" becomes \"oatgma\".\n * Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.\n   * For example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on.\n\nReturn the final sentence representing the conversion from sentence to Goat Latin.\n\n \n\nExample 1:\n\nInput: sentence = \"I speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n\n\nExample 2:\n\nInput: sentence = \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n\n\n \n\nConstraints:\n\n * 1 <= sentence.length <= 150\n * sentence consists of English letters and spaces.\n * sentence has no leading or trailing spaces.\n * All the words in sentence are separated by a single space.",
        "Answer": "",
        "title": "goat-latin"
    },
    {
        "Question": "Masking Personal Information - You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.\n\nEmail address:\n\nAn email address is:\n\n * A name consisting of uppercase and lowercase English letters, followed by\n * The '@' symbol, followed by\n * The domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).\n\nTo mask an email:\n\n * The uppercase letters in the name and domain must be converted to lowercase letters.\n * The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks \"*****\".\n\nPhone number:\n\nA phone number is formatted as follows:\n\n * The phone number contains 10-13 digits.\n * The last 10 digits make up the local number.\n * The remaining 0-3 digits, in the beginning, make up the country code.\n * Separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.\n\nTo mask a phone number:\n\n * Remove all separation characters.\n * The masked phone number should have the form:\n   * \"***-***-XXXX\" if the country code has 0 digits.\n   * \"+*-***-***-XXXX\" if the country code has 1 digit.\n   * \"+**-***-***-XXXX\" if the country code has 2 digits.\n   * \"+***-***-***-XXXX\" if the country code has 3 digits.\n * \"XXXX\" is the last 4 digits of the local number.\n\n \n\nExample 1:\n\n\nInput: s = \"LeetCode@LeetCode.com\"\nOutput: \"l*****e@leetcode.com\"\nExplanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n\n\nExample 2:\n\n\nInput: s = \"AB@qq.com\"\nOutput: \"a*****b@qq.com\"\nExplanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.\n\n\nExample 3:\n\n\nInput: s = \"1(234)567-890\"\nOutput: \"***-***-7890\"\nExplanation: s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is \"***-***-7890\".\n\n\n \n\nConstraints:\n\n * s is either a valid email or a phone number.\n * If s is an email:\n   * 8 <= s.length <= 40\n   * s consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol.\n * If s is a phone number:\n   * 10 <= s.length <= 20\n   * s consists of digits, spaces, and the symbols '(', ')', '-', and '+'.",
        "Answer": "",
        "title": "masking-personal-information"
    },
    {
        "Question": "Find And Replace in String - You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\n\nTo complete the ith replacement operation:\n\n 1. Check if the substring sources[i] occurs at index indices[i] in the original string s.\n 2. If it does not occur, do nothing.\n 3. Otherwise if it does occur, replace that substring with targets[i].\n\nFor example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\n\nAll replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.\n\n * For example, a testcase with s = \"abc\", indices = [0, 1], and sources = [\"ab\",\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap.\n\nReturn the resulting string after performing all replacement operations on s.\n\nA substring is a contiguous sequence of characters in a string.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/12/833-ex1.png]\n\n\nInput: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\nOutput: \"eeebffff\"\nExplanation:\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\".\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/12/833-ex2-1.png]\n\n\nInput: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation:\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n\"ec\" does not occur at index 2 in s, so we do nothing.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * k == indices.length == sources.length == targets.length\n * 1 <= k <= 100\n * 0 <= indexes[i] < s.length\n * 1 <= sources[i].length, targets[i].length <= 50\n * s consists of only lowercase English letters.\n * sources[i] and targets[i] consist of only lowercase English letters.",
        "Answer": "",
        "title": "find-and-replace-in-string"
    },
    {
        "Question": "Similar String Groups - Two strings, X and Y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string X.\n\nFor example, \"tars\" and \"rats\" are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\n\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.  Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\n\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?\n\n \n\nExample 1:\n\n\nInput: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\nOutput: 2\n\n\nExample 2:\n\n\nInput: strs = [\"omv\",\"ovm\"]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= strs.length <= 300\n * 1 <= strs[i].length <= 300\n * strs[i] consists of lowercase letters only.\n * All words in strs have the same length and are anagrams of each other.",
        "Answer": "",
        "title": "similar-string-groups"
    },
    {
        "Question": "Shifting Letters - You are given a string s of lowercase English letters and an integer array shifts of the same length.\n\nCall the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').\n\n * For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.\n\nNow for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\n\nReturn the final string after all such shifts to s are applied.\n\n \n\nExample 1:\n\n\nInput: s = \"abc\", shifts = [3,5,9]\nOutput: \"rpl\"\nExplanation: We start with \"abc\".\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer.\n\n\nExample 2:\n\n\nInput: s = \"aaa\", shifts = [1,2,3]\nOutput: \"gfd\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of lowercase English letters.\n * shifts.length == s.length\n * 0 <= shifts[i] <= 109",
        "Answer": "",
        "title": "shifting-letters"
    },
    {
        "Question": "Buddy Strings - Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\n\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\n\n * For example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\n\n \n\nExample 1:\n\n\nInput: s = \"ab\", goal = \"ba\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.\n\n\nExample 2:\n\n\nInput: s = \"ab\", goal = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal.\n\n\nExample 3:\n\n\nInput: s = \"aa\", goal = \"aa\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.\n\n\n \n\nConstraints:\n\n * 1 <= s.length, goal.length <= 2 * 104\n * s and goal consist of lowercase letters.",
        "Answer": "",
        "title": "buddy-strings"
    },
    {
        "Question": "Decoded String at Index - You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\n * If the character read is a letter, that letter is written onto the tape.\n * If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.\n\nGiven an integer k, return the kth letter (1-indexed) in the decoded string.\n\n \n\nExample 1:\n\n\nInput: s = \"leet2code3\", k = 10\nOutput: \"o\"\nExplanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\".\n\n\nExample 2:\n\n\nInput: s = \"ha22\", k = 5\nOutput: \"h\"\nExplanation: The decoded string is \"hahahaha\".\nThe 5th letter is \"h\".\n\n\nExample 3:\n\n\nInput: s = \"a2345678999999999999999\", k = 1\nOutput: \"a\"\nExplanation: The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1st letter is \"a\".\n\n\n \n\nConstraints:\n\n * 2 <= s.length <= 100\n * s consists of lowercase English letters and digits 2 through 9.\n * s starts with a letter.\n * 1 <= k <= 109\n * It is guaranteed that k is less than or equal to the length of the decoded string.\n * The decoded string is guaranteed to have less than 263 letters.",
        "Answer": "",
        "title": "decoded-string-at-index"
    },
    {
        "Question": "Uncommon Words from Two Sentences - A sentence is a string of single-space separated words where each word consists only of lowercase letters.\n\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\n\nGiven two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.\n\n \n\nExample 1:\n\nInput: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\n\nOutput: [\"sweet\",\"sour\"]\n\nExplanation:\n\nThe word \"sweet\" appears only in s1, while the word \"sour\" appears only in s2.\n\nExample 2:\n\nInput: s1 = \"apple apple\", s2 = \"banana\"\n\nOutput: [\"banana\"]\n\n \n\nConstraints:\n\n * 1 <= s1.length, s2.length <= 200\n * s1 and s2 consist of lowercase English letters and spaces.\n * s1 and s2 do not have leading or trailing spaces.\n * All the words in s1 and s2 are separated by a single space.",
        "Answer": "",
        "title": "uncommon-words-from-two-sentences"
    },
    {
        "Question": "Find and Replace Pattern - Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\n\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\n\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\n \n\nExample 1:\n\n\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\nOutput: [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.\n\n\nExample 2:\n\n\nInput: words = [\"a\",\"b\",\"c\"], pattern = \"a\"\nOutput: [\"a\",\"b\",\"c\"]\n\n\n \n\nConstraints:\n\n * 1 <= pattern.length <= 20\n * 1 <= words.length <= 50\n * words[i].length == pattern.length\n * pattern and words[i] are lowercase English letters.",
        "Answer": "",
        "title": "find-and-replace-pattern"
    },
    {
        "Question": "Groups of Special-Equivalent Strings - You are given an array of strings of the same length words.\n\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\n\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\n\n * For example, words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\".\n\nA group of special-equivalent strings from words is a non-empty subset of words such that:\n\n * Every pair of strings in the group are special equivalent, and\n * The group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).\n\nReturn the number of groups of special-equivalent strings from words.\n\n \n\nExample 1:\n\n\nInput: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\nOutput: 3\nExplanation: \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\".\n\n\nExample 2:\n\n\nInput: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 1000\n * 1 <= words[i].length <= 20\n * words[i] consist of lowercase English letters.\n * All the strings are of the same length.",
        "Answer": "",
        "title": "groups-of-special-equivalent-strings"
    },
    {
        "Question": "Word Subsets - You are given two string arrays words1 and words2.\n\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\n\n * For example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\".\n\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\n\nReturn an array of all the universal strings in words1. You may return the answer in any order.\n\n \n\nExample 1:\n\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\n\nOutput: [\"facebook\",\"google\",\"leetcode\"]\n\nExample 2:\n\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"lc\",\"eo\"]\n\nOutput: [\"leetcode\"]\n\nExample 3:\n\nInput: words1 = [\"acaac\",\"cccbb\",\"aacbb\",\"caacc\",\"bcbbb\"], words2 = [\"c\",\"cc\",\"b\"]\n\nOutput: [\"cccbb\"]\n\n \n\nConstraints:\n\n * 1 <= words1.length, words2.length <= 104\n * 1 <= words1[i].length, words2[i].length <= 10\n * words1[i] and words2[i] consist only of lowercase English letters.\n * All the strings of words1 are unique.",
        "Answer": "",
        "title": "word-subsets"
    },
    {
        "Question": "Reverse Only Letters - Given a string s, reverse the string according to the following rules:\n\n * All the characters that are not English letters remain in the same position.\n * All the English letters (lowercase or uppercase) should be reversed.\n\nReturn s after reversing it.\n\n \n\nExample 1:\n\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\n\nExample 2:\n\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\n\nExample 3:\n\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 100\n * s consists of characters with ASCII values in the range [33, 122].\n * s does not contain '\\\"' or '\\\\'.",
        "Answer": "",
        "title": "reverse-only-letters"
    },
    {
        "Question": "Long Pressed Name - Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\n\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n \n\nExample 1:\n\n\nInput: name = \"alex\", typed = \"aaleex\"\nOutput: true\nExplanation: 'a' and 'e' in 'alex' were long pressed.\n\n\nExample 2:\n\n\nInput: name = \"saeed\", typed = \"ssaaedd\"\nOutput: false\nExplanation: 'e' must have been pressed twice, but it was not in the typed output.\n\n\n \n\nConstraints:\n\n * 1 <= name.length, typed.length <= 1000\n * name and typed consist of only lowercase English letters.",
        "Answer": "",
        "title": "long-pressed-name"
    },
    {
        "Question": "Unique Email Addresses - Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.\n\n * For example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name.\n\nIf you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\n\n * For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.\n\nIf you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\n\n * For example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\".\n\nIt is possible to use both of these rules at the same time.\n\nGiven an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.\n\n \n\nExample 1:\n\n\nInput: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.\n\n\nExample 2:\n\n\nInput: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= emails.length <= 100\n * 1 <= emails[i].length <= 100\n * emails[i] consist of lowercase English letters, '+', '.' and '@'.\n * Each emails[i] contains exactly one '@' character.\n * All local and domain names are non-empty.\n * Local names do not start with a '+' character.\n * Domain names end with the \".com\" suffix.\n * Domain names must contain at least one character before \".com\" suffix.",
        "Answer": "",
        "title": "unique-email-addresses"
    },
    {
        "Question": "Minimum Area Rectangle - You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\n\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/08/03/rec1.JPG]\n\n\nInput: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/08/03/rec2.JPG]\n\n\nInput: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= points.length <= 500\n * points[i].length == 2\n * 0 <= xi, yi <= 4 * 104\n * All the given points are unique.",
        "Answer": "",
        "title": "minimum-area-rectangle"
    },
    {
        "Question": "DI String Match - A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\n\n * s[i] == 'I' if perm[i] < perm[i + 1], and\n * s[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\n\n \n\nExample 1:\n\nInput: s = \"IDID\"\nOutput: [0,4,1,3,2]\n\n\nExample 2:\n\nInput: s = \"III\"\nOutput: [0,1,2,3]\n\n\nExample 3:\n\nInput: s = \"DDI\"\nOutput: [3,2,0,1]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is either 'I' or 'D'.",
        "Answer": "",
        "title": "di-string-match"
    },
    {
        "Question": "Delete Columns to Make Sorted - You are given an array of n strings strs, all of the same length.\n\nThe strings can be arranged such that there is one on each line, making a grid.\n\n * For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as follows:\n\n\nabc\nbce\ncae\n\n\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\n\nReturn the number of columns that you will delete.\n\n \n\nExample 1:\n\n\nInput: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n\n\nExample 2:\n\n\nInput: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.\n\n\nExample 3:\n\n\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.\n\n\n \n\nConstraints:\n\n * n == strs.length\n * 1 <= n <= 100\n * 1 <= strs[i].length <= 1000\n * strs[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "delete-columns-to-make-sorted"
    },
    {
        "Question": "Verifying an Alien Dictionary - In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\n\nGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.\n\n \n\nExample 1:\n\n\nInput: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\nOutput: true\nExplanation: As 'h' comes before 'l' in this language, then the sequence is sorted.\n\n\nExample 2:\n\n\nInput: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\nOutput: false\nExplanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.\n\n\nExample 3:\n\n\nInput: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: false\nExplanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More infohttps://en.wikipedia.org/wiki/Lexicographical_order).\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 100\n * 1 <= words[i].length <= 20\n * order.length == 26\n * All characters in words[i] and order are English lowercase letters.",
        "Answer": "",
        "title": "verifying-an-alien-dictionary"
    },
    {
        "Question": "Delete Columns to Make Sorted II - You are given an array of n strings strs, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\n\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the minimum possible value of answer.length.\n\n \n\nExample 1:\n\n\nInput: strs = [\"ca\",\"bb\",\"ac\"]\nOutput: 1\nExplanation: \nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.\n\n\nExample 2:\n\n\nInput: strs = [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation: \nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)\n\n\nExample 3:\n\n\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: We have to delete every column.\n\n\n \n\nConstraints:\n\n * n == strs.length\n * 1 <= n <= 100\n * 1 <= strs[i].length <= 100\n * strs[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "delete-columns-to-make-sorted-ii"
    },
    {
        "Question": "Add Two Numbers - You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg]\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\n\nExample 2:\n\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\n\nExample 3:\n\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in each linked list is in the range [1, 100].\n * 0 <= Node.val <= 9\n * It is guaranteed that the list represents a number that does not have leading zeros.",
        "Answer": "",
        "title": "add-two-numbers"
    },
    {
        "Question": "Merge Two Sorted Lists - You are given the heads of two sorted linked lists list1 and list2.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg]\n\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\n\nExample 2:\n\n\nInput: list1 = [], list2 = []\nOutput: []\n\n\nExample 3:\n\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * The number of nodes in both lists is in the range [0, 50].\n * -100 <= Node.val <= 100\n * Both list1 and list2 are sorted in non-decreasing order.",
        "Answer": "",
        "title": "merge-two-sorted-lists"
    },
    {
        "Question": "Merge k Sorted Lists - You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.\n\n \n\nExample 1:\n\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted linked list:\n1->1->2->3->4->4->5->6\n\n\nExample 2:\n\n\nInput: lists = []\nOutput: []\n\n\nExample 3:\n\n\nInput: lists = [[]]\nOutput: []\n\n\n \n\nConstraints:\n\n * k == lists.length\n * 0 <= k <= 104\n * 0 <= lists[i].length <= 500\n * -104 <= lists[i][j] <= 104\n * lists[i] is sorted in ascending order.\n * The sum of lists[i].length will not exceed 104.",
        "Answer": "",
        "title": "merge-k-sorted-lists"
    },
    {
        "Question": "Swap Nodes in Pairs - Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\n \n\nExample 1:\n\nInput: head = [1,2,3,4]\n\nOutput: [2,1,4,3]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg]\n\nExample 2:\n\nInput: head = []\n\nOutput: []\n\nExample 3:\n\nInput: head = [1]\n\nOutput: [1]\n\nExample 4:\n\nInput: head = [1,2,3]\n\nOutput: [2,1,3]\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 100].\n * 0 <= Node.val <= 100",
        "Answer": "",
        "title": "swap-nodes-in-pairs"
    },
    {
        "Question": "Reverse Nodes in k-Group - Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg]\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg]\n\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is n.\n * 1 <= k <= n <= 5000\n * 0 <= Node.val <= 1000\n\n \n\nFollow-up: Can you solve the problem in O(1) extra memory space?",
        "Answer": "",
        "title": "reverse-nodes-in-k-group"
    },
    {
        "Question": "Rotate List - Given the head of a linked list, rotate the list to the right by k places.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg]\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg]\n\n\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 500].\n * -100 <= Node.val <= 100\n * 0 <= k <= 2 * 109",
        "Answer": "",
        "title": "rotate-list"
    },
    {
        "Question": "Remove Duplicates from Sorted List II - Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg]\n\n\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg]\n\n\nInput: head = [1,1,1,2,3]\nOutput: [2,3]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 300].\n * -100 <= Node.val <= 100\n * The list is guaranteed to be sorted in ascending order.",
        "Answer": "",
        "title": "remove-duplicates-from-sorted-list-ii"
    },
    {
        "Question": "Remove Duplicates from Sorted List - Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/04/list1.jpg]\n\n\nInput: head = [1,1,2]\nOutput: [1,2]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/04/list2.jpg]\n\n\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 300].\n * -100 <= Node.val <= 100\n * The list is guaranteed to be sorted in ascending order.",
        "Answer": "",
        "title": "remove-duplicates-from-sorted-list"
    },
    {
        "Question": "Reverse Linked List II - Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg]\n\n\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n\n\nExample 2:\n\n\nInput: head = [5], left = 1, right = 1\nOutput: [5]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is n.\n * 1 <= n <= 500\n * -500 <= Node.val <= 500\n * 1 <= left <= right <= n\n\n \n\nFollow up: Could you do it in one pass?",
        "Answer": "",
        "title": "reverse-linked-list-ii"
    },
    {
        "Question": "Copy List with Random Pointer - A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n\nConstruct a deep copy [https://en.wikipedia.org/wiki/Object_copying#Deep_copy] of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n\nReturn the head of the copied linked list.\n\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n\n * val: an integer representing Node.val\n * random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n\nYour code will only be given the head of the original linked list.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/12/18/e1.png]\n\n\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/12/18/e2.png]\n\n\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2019/12/18/e3.png]\n\n\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]\n\n\n \n\nConstraints:\n\n * 0 <= n <= 1000\n * -104 <= Node.val <= 104\n * Node.random is null or is pointing to some node in the linked list.",
        "Answer": "",
        "title": "copy-list-with-random-pointer"
    },
    {
        "Question": "Intersection of Two Linked Lists - Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\n\nFor example, the following two linked lists begin to intersect at node c1:\n\n[https://assets.leetcode.com/uploads/2021/03/05/160_statement.png]\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\n\nNote that the linked lists must retain their original structure after the function returns.\n\nCustom Judge:\n\nThe inputs to the judge are given as follows (your program is not given these inputs):\n\n * intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\n * listA - The first linked list.\n * listB - The second linked list.\n * skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\n * skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png]\n\n\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png]\n\n\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png]\n\n\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n\n\n \n\nConstraints:\n\n * The number of nodes of listA is in the m.\n * The number of nodes of listB is in the n.\n * 1 <= m, n <= 3 * 104\n * 1 <= Node.val <= 105\n * 0 <= skipA <= m\n * 0 <= skipB <= n\n * intersectVal is 0 if listA and listB do not intersect.\n * intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.\n\n \n\nFollow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?",
        "Answer": "",
        "title": "intersection-of-two-linked-lists"
    },
    {
        "Question": "Remove Linked List Elements - Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg]\n\n\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n\n\nExample 2:\n\n\nInput: head = [], val = 1\nOutput: []\n\n\nExample 3:\n\n\nInput: head = [7,7,7,7], val = 7\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 104].\n * 1 <= Node.val <= 50\n * 0 <= val <= 50",
        "Answer": "",
        "title": "remove-linked-list-elements"
    },
    {
        "Question": "Reverse Linked List - Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg]\n\n\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg]\n\n\nInput: head = [1,2]\nOutput: [2,1]\n\n\nExample 3:\n\n\nInput: head = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is the range [0, 5000].\n * -5000 <= Node.val <= 5000\n\n \n\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?",
        "Answer": "",
        "title": "reverse-linked-list"
    },
    {
        "Question": "Palindrome Linked List - Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg]\n\n\nInput: head = [1,2,2,1]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg]\n\n\nInput: head = [1,2]\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [1, 105].\n * 0 <= Node.val <= 9\n\n \n\nFollow up: Could you do it in O(n) time and O(1) space?",
        "Answer": "",
        "title": "palindrome-linked-list"
    },
    {
        "Question": "Delete Node in a Linked List - There is a singly-linked list head and we want to delete a node node in it.\n\nYou are given the node to be deleted node. You will not be given access to the first node of head.\n\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\n * The value of the given node should not exist in the linked list.\n * The number of nodes in the linked list should decrease by one.\n * All the values before node should be in the same order.\n * All the values after node should be in the same order.\n\nCustom testing:\n\n * For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\n * We will build the linked list and pass the node to your function.\n * The output will be the entire list after calling your function.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/01/node1.jpg]\n\n\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/01/node2.jpg]\n\n\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n\n \n\nConstraints:\n\n * The number of the nodes in the given list is in the range [2, 1000].\n * -1000 <= Node.val <= 1000\n * The value of each node in the list is unique.\n * The node to be deleted is in the list and is not a tail node.",
        "Answer": "",
        "title": "delete-node-in-a-linked-list"
    },
    {
        "Question": "Odd Even Linked List - Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\n\nThe first node is considered odd, and the second node is even, and so on.\n\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\n\nYou must solve the problem in O(1) extra space complexity and O(n) time complexity.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg]\n\n\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg]\n\n\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]\n\n\n \n\nConstraints:\n\n * The number of nodes in the linked list is in the range [0, 104].\n * -106 <= Node.val <= 106",
        "Answer": "",
        "title": "odd-even-linked-list"
    },
    {
        "Question": "Add Two Numbers II - You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg]\n\n\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\nOutput: [7,8,0,7]\n\n\nExample 2:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [8,0,7]\n\n\nExample 3:\n\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * The number of nodes in each linked list is in the range [1, 100].\n * 0 <= Node.val <= 9\n * It is guaranteed that the list represents a number that does not have leading zeros.\n\n \n\nFollow up: Could you solve it without reversing the input lists?",
        "Answer": "",
        "title": "add-two-numbers-ii"
    },
    {
        "Question": "Split Linked List in Parts - Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n\nReturn an array of the k parts.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg]\n\n\nInput: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg]\n\n\nInput: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 1000].\n * 0 <= Node.val <= 1000\n * 1 <= k <= 50",
        "Answer": "",
        "title": "split-linked-list-in-parts"
    },
    {
        "Question": "Linked List Components - You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\n\nReturn the number of connected components in nums where two values are connected if they appear consecutively in the linked list.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom1.jpg]\n\n\nInput: head = [0,1,2,3], nums = [0,1,3]\nOutput: 2\nExplanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom2.jpg]\n\n\nInput: head = [0,1,2,3,4], nums = [0,3,1,4]\nOutput: 2\nExplanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n\n\n \n\nConstraints:\n\n * The number of nodes in the linked list is n.\n * 1 <= n <= 104\n * 0 <= Node.val < n\n * All the values Node.val are unique.\n * 1 <= nums.length <= n\n * 0 <= nums[i] < n\n * All the values of nums are unique.",
        "Answer": "",
        "title": "linked-list-components"
    },
    {
        "Question": "Interval List Intersections - You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\n\nReturn the intersection of these two interval lists.\n\nA closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.\n\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/01/30/interval1.png]\n\n\nInput: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n\n\nExample 2:\n\n\nInput: firstList = [[1,3],[5,9]], secondList = []\nOutput: []\n\n\n \n\nConstraints:\n\n * 0 <= firstList.length, secondList.length <= 1000\n * firstList.length + secondList.length >= 1\n * 0 <= starti < endi <= 109\n * endi < starti+1\n * 0 <= startj < endj <= 109\n * endj < startj+1",
        "Answer": "",
        "title": "interval-list-intersections"
    },
    {
        "Question": "Valid Parentheses - Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n 1. Open brackets must be closed by the same type of brackets.\n 2. Open brackets must be closed in the correct order.\n 3. Every close bracket has a corresponding open bracket of the same type.\n\n \n\nExample 1:\n\nInput: s = \"()\"\n\nOutput: true\n\nExample 2:\n\nInput: s = \"()[]{}\"\n\nOutput: true\n\nExample 3:\n\nInput: s = \"(]\"\n\nOutput: false\n\nExample 4:\n\nInput: s = \"([])\"\n\nOutput: true\n\nExample 5:\n\nInput: s = \"([)]\"\n\nOutput: false\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s consists of parentheses only '()[]{}'.",
        "Answer": "",
        "title": "valid-parentheses"
    },
    {
        "Question": "Longest Valid Parentheses - Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n\n \n\nExample 1:\n\n\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n\n\nExample 2:\n\n\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n\n\nExample 3:\n\n\nInput: s = \"\"\nOutput: 0\n\n\n \n\nConstraints:\n\n * 0 <= s.length <= 3 * 104\n * s[i] is '(', or ')'.",
        "Answer": "",
        "title": "longest-valid-parentheses"
    },
    {
        "Question": "Simplify Path - You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.\n\nThe rules of a Unix-style file system are as follows:\n\n * A single period '.' represents the current directory.\n * A double period '..' represents the previous/parent directory.\n * Multiple consecutive slashes such as '//' and '///' are treated as a single slash '/'.\n * Any sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names.\n\nThe simplified canonical path should follow these rules:\n\n * The path must start with a single slash '/'.\n * Directories within the path must be separated by exactly one slash '/'.\n * The path must not end with a slash '/', unless it is the root directory.\n * The path must not have any single or double periods ('.' and '..') used to denote current or parent directories.\n\nReturn the simplified canonical path.\n\n \n\nExample 1:\n\nInput: path = \"/home/\"\n\nOutput: \"/home\"\n\nExplanation:\n\nThe trailing slash should be removed.\n\nExample 2:\n\nInput: path = \"/home//foo/\"\n\nOutput: \"/home/foo\"\n\nExplanation:\n\nMultiple consecutive slashes are replaced by a single one.\n\nExample 3:\n\nInput: path = \"/home/user/Documents/../Pictures\"\n\nOutput: \"/home/user/Pictures\"\n\nExplanation:\n\nA double period \"..\" refers to the directory up a level (the parent directory).\n\nExample 4:\n\nInput: path = \"/../\"\n\nOutput: \"/\"\n\nExplanation:\n\nGoing one level up from the root directory is not possible.\n\nExample 5:\n\nInput: path = \"/.../a/../b/c/../d/./\"\n\nOutput: \"/.../b/d\"\n\nExplanation:\n\n\"...\" is a valid name for a directory in this problem.\n\n \n\nConstraints:\n\n * 1 <= path.length <= 3000\n * path consists of English letters, digits, period '.', slash '/' or '_'.\n * path is a valid absolute Unix path.",
        "Answer": "",
        "title": "simplify-path"
    },
    {
        "Question": "Largest Rectangle in Histogram - Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg]\n\n\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg]\n\n\nInput: heights = [2,4]\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= heights.length <= 105\n * 0 <= heights[i] <= 104",
        "Answer": "",
        "title": "largest-rectangle-in-histogram"
    },
    {
        "Question": "Maximal Rectangle - Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg]\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n\n\nExample 2:\n\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\nExample 3:\n\n\nInput: matrix = [[\"1\"]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * rows == matrix.length\n * cols == matrix[i].length\n * 1 <= row, cols <= 200\n * matrix[i][j] is '0' or '1'.",
        "Answer": "",
        "title": "maximal-rectangle"
    },
    {
        "Question": "Symmetric Tree - Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg]\n\n\nInput: root = [1,2,2,3,4,4,3]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg]\n\n\nInput: root = [1,2,2,null,3,null,3]\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 1000].\n * -100 <= Node.val <= 100\n\n \n\nFollow up: Could you solve it both recursively and iteratively?",
        "Answer": "",
        "title": "symmetric-tree"
    },
    {
        "Question": "Evaluate Reverse Polish Notation - You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation [http://en.wikipedia.org/wiki/Reverse_Polish_notation].\n\nEvaluate the expression. Return an integer that represents the value of the expression.\n\nNote that:\n\n * The valid operators are '+', '-', '*', and '/'.\n * Each operand may be an integer or another expression.\n * The division between two integers always truncates toward zero.\n * There will not be any division by zero.\n * The input represents a valid arithmetic expression in a reverse polish notation.\n * The answer and all the intermediate calculations can be represented in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\n\nExample 2:\n\n\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\n\nExample 3:\n\n\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\n\n \n\nConstraints:\n\n * 1 <= tokens.length <= 104\n * tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].",
        "Answer": "",
        "title": "evaluate-reverse-polish-notation"
    },
    {
        "Question": "Min Stack - Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the MinStack class:\n\n * MinStack() initializes the stack object.\n * void push(int val) pushes the element val onto the stack.\n * void pop() removes the element on the top of the stack.\n * int top() gets the top element of the stack.\n * int getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.\n\n \n\nExample 1:\n\n\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n\n \n\nConstraints:\n\n * -231 <= val <= 231 - 1\n * Methods pop, top and getMin operations will always be called on non-empty stacks.\n * At most 3 * 104 calls will be made to push, pop, top, and getMin.",
        "Answer": "",
        "title": "min-stack"
    },
    {
        "Question": "Basic Calculator - Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\n\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n\n \n\nExample 1:\n\n\nInput: s = \"1 + 1\"\nOutput: 2\n\n\nExample 2:\n\n\nInput: s = \" 2-1 + 2 \"\nOutput: 3\n\n\nExample 3:\n\n\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 3 * 105\n * s consists of digits, '+', '-', '(', ')', and ' '.\n * s represents a valid expression.\n * '+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\n * '-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\n * There will be no two consecutive operators in the input.\n * Every number and running calculation will fit in a signed 32-bit integer.",
        "Answer": "",
        "title": "basic-calculator"
    },
    {
        "Question": "Basic Calculator II - Given a string s which represents an expression, evaluate this expression and return its value. \n\nThe integer division should truncate toward zero.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n\n \n\nExample 1:\n\nInput: s = \"3+2*2\"\nOutput: 7\n\n\nExample 2:\n\nInput: s = \" 3/2 \"\nOutput: 1\n\n\nExample 3:\n\nInput: s = \" 3+5 / 2 \"\nOutput: 5\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 3 * 105\n * s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.\n * s represents a valid expression.\n * All the integers in the expression are non-negative integers in the range [0, 231 - 1].\n * The answer is guaranteed to fit in a 32-bit integer.",
        "Answer": "",
        "title": "basic-calculator-ii"
    },
    {
        "Question": "Implement Queue using Stacks - Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n\nImplement the MyQueue class:\n\n * void push(int x) Pushes element x to the back of the queue.\n * int pop() Removes the element from the front of the queue and returns it.\n * int peek() Returns the element at the front of the queue.\n * boolean empty() Returns true if the queue is empty, false otherwise.\n\nNotes:\n\n * You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n * Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n \n\nExample 1:\n\n\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\n\n \n\nConstraints:\n\n * 1 <= x <= 9\n * At most 100 calls will be made to push, pop, peek, and empty.\n * All the calls to pop and peek are valid.\n\n \n\nFollow-up: Can you implement the queue such that each operation is amortized [https://en.wikipedia.org/wiki/Amortized_analysis] O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.",
        "Answer": "",
        "title": "implement-queue-using-stacks"
    },
    {
        "Question": "Verify Preorder Serialization of a Binary Tree - One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n\n[https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg]\n\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\n\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\n\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\n\nYou may assume that the input format is always valid.\n\n * For example, it could never contain two consecutive commas, such as \"1,,3\".\n\nNote: You are not allowed to reconstruct the tree.\n\n \n\nExample 1:\n\nInput: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true\n\n\nExample 2:\n\nInput: preorder = \"1,#\"\nOutput: false\n\n\nExample 3:\n\nInput: preorder = \"9,#,#,1\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= preorder.length <= 104\n * preorder consist of integers in the range [0, 100] and '#' separated by commas ','.",
        "Answer": "",
        "title": "verify-preorder-serialization-of-a-binary-tree"
    },
    {
        "Question": "Mini Parser - Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\n\nEach element is either an integer or a list whose elements may also be integers or other lists.\n\n \n\nExample 1:\n\n\nInput: s = \"324\"\nOutput: 324\nExplanation: You should return a NestedInteger object which contains a single integer 324.\n\n\nExample 2:\n\n\nInput: s = \"[123,[456,[789]]]\"\nOutput: [123,[456,[789]]]\nExplanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 5 * 104\n * s consists of digits, square brackets \"[]\", negative sign '-', and commas ','.\n * s is the serialization of valid NestedInteger.\n * All the values in the input are in the range [-106, 106].",
        "Answer": "",
        "title": "mini-parser"
    },
    {
        "Question": "Decode String - Given an encoded string, return its decoded string.\n\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\n\nThe test cases are generated so that the length of the output will never exceed 105.\n\n \n\nExample 1:\n\n\nInput: s = \"3[a]2[bc]\"\nOutput: \"aaabcbc\"\n\n\nExample 2:\n\n\nInput: s = \"3[a2[c]]\"\nOutput: \"accaccacc\"\n\n\nExample 3:\n\n\nInput: s = \"2[abc]3[cd]ef\"\nOutput: \"abcabccdcdcdef\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 30\n * s consists of lowercase English letters, digits, and square brackets '[]'.\n * s is guaranteed to be a valid input.\n * All the integers in s are in the range [1, 300].",
        "Answer": "",
        "title": "decode-string"
    },
    {
        "Question": "132 Pattern - Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\n\nReturn true if there is a 132 pattern in nums, otherwise, return false.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,4]\nOutput: false\nExplanation: There is no 132 pattern in the sequence.\n\n\nExample 2:\n\n\nInput: nums = [3,1,4,2]\nOutput: true\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].\n\n\nExample 3:\n\n\nInput: nums = [-1,3,2,0]\nOutput: true\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 2 * 105\n * -109 <= nums[i] <= 109",
        "Answer": "",
        "title": "132-pattern"
    },
    {
        "Question": "Next Greater Element I - The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\n\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\n\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\n\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n\n \n\nExample 1:\n\n\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n\n\nExample 2:\n\n\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n\n\n \n\nConstraints:\n\n * 1 <= nums1.length <= nums2.length <= 1000\n * 0 <= nums1[i], nums2[i] <= 104\n * All integers in nums1 and nums2 are unique.\n * All the integers of nums1 also appear in nums2.\n\n \n\nFollow up: Could you find an O(nums1.length + nums2.length) solution?",
        "Answer": "",
        "title": "next-greater-element-i"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "next-greater-element-ii) | [C++](."
    },
    {
        "Question": "Exclusive Time of Functions - On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\n\nFunction calls are stored in a call stack [https://en.wikipedia.org/wiki/Call_stack]: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\n\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\n\nA function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\n\nReturn the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/04/05/diag1b.png]\n\n\nInput: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\nOutput: [3,4]\nExplanation:\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n\n\nExample 2:\n\n\nInput: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\nOutput: [8]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n\n\nExample 3:\n\n\nInput: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\nOutput: [7,1]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 100\n * 2 <= logs.length <= 500\n * 0 <= function_id < n\n * 0 <= timestamp <= 109\n * No two start events will happen at the same timestamp.\n * No two end events will happen at the same timestamp.\n * Each function has an \"end\" log for each \"start\" log.",
        "Answer": "",
        "title": "exclusive-time-of-functions"
    },
    {
        "Question": "Baseball Game - You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\n\nYou are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:\n\n * An integer x.\n   * Record a new score of x.\n * '+'.\n   * Record a new score that is the sum of the previous two scores.\n * 'D'.\n   * Record a new score that is the double of the previous score.\n * 'C'.\n   * Invalidate the previous score, removing it from the record.\n\nReturn the sum of all the scores on the record after applying all the operations.\n\nThe test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.\n\n \n\nExample 1:\n\n\nInput: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.\n\n\nExample 2:\n\n\nInput: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n\n\nExample 3:\n\n\nInput: ops = [\"1\",\"C\"]\nOutput: 0\nExplanation:\n\"1\" - Add 1 to the record, record is now [1].\n\"C\" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0.\n\n\n \n\nConstraints:\n\n * 1 <= operations.length <= 1000\n * operations[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104].\n * For operation \"+\", there will always be at least two previous scores on the record.\n * For operations \"C\" and \"D\", there will always be at least one previous score on the record.",
        "Answer": "",
        "title": "baseball-game"
    },
    {
        "Question": "Number of Atoms - Given a string formula representing a chemical formula, return the count of each atom.\n\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\n\nOne or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.\n\n * For example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible.\n\nTwo formulas are concatenated together to produce another formula.\n\n * For example, \"H2O2He3Mg4\" is also a formula.\n\nA formula placed in parentheses, and a count (optionally added) is also a formula.\n\n * For example, \"(H2O2)\" and \"(H2O2)3\" are formulas.\n\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\n\nThe test cases are generated so that all the values in the output fit in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: formula = \"H2O\"\nOutput: \"H2O\"\nExplanation: The count of elements are {'H': 2, 'O': 1}.\n\n\nExample 2:\n\n\nInput: formula = \"Mg(OH)2\"\nOutput: \"H2MgO2\"\nExplanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\n\n\nExample 3:\n\n\nInput: formula = \"K4(ON(SO3)2)2\"\nOutput: \"K4N2O14S4\"\nExplanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\n\n\n \n\nConstraints:\n\n * 1 <= formula.length <= 1000\n * formula consists of English letters, digits, '(', and ')'.\n * formula is always valid.",
        "Answer": "",
        "title": "number-of-atoms"
    },
    {
        "Question": "Asteroid Collision - We are given an array asteroids of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.\n\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n\n \n\nExample 1:\n\n\nInput: asteroids = [5,10,-5]\nOutput: [5,10]\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n\n\nExample 2:\n\n\nInput: asteroids = [8,-8]\nOutput: []\nExplanation: The 8 and -8 collide exploding each other.\n\n\nExample 3:\n\n\nInput: asteroids = [10,2,-5]\nOutput: [10]\nExplanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n\n\n \n\nConstraints:\n\n * 2 <= asteroids.length <= 104\n * -1000 <= asteroids[i] <= 1000\n * asteroids[i] != 0",
        "Answer": "",
        "title": "asteroid-collision"
    },
    {
        "Question": "Parse Lisp Expression - You are given a string expression representing a Lisp-like expression to return the integer value of.\n\nThe syntax for these expressions is given as follows.\n\n * An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n * (An integer could be positive or negative.)\n * A let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\n * An add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\n * A mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\n * For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names.\n * Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n\n \n\nExample 1:\n\n\nInput: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\nOutput: 14\nExplanation: In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.\n\n\nExample 2:\n\n\nInput: expression = \"(let x 3 x 2 x)\"\nOutput: 2\nExplanation: Assignment in let statements is processed sequentially.\n\n\nExample 3:\n\n\nInput: expression = \"(let x 1 y 2 x (add x y) (add x y))\"\nOutput: 5\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.\n\n\n \n\nConstraints:\n\n * 1 <= expression.length <= 2000\n * There are no leading or trailing spaces in expression.\n * All tokens are separated by a single space in expression.\n * The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.\n * The expression is guaranteed to be legal and evaluate to an integer.",
        "Answer": "",
        "title": "parse-lisp-expression"
    },
    {
        "Question": "Daily Temperatures - Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\n\n \n\nExample 1:\n\nInput: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n\n\nExample 2:\n\nInput: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n\n\nExample 3:\n\nInput: temperatures = [30,60,90]\nOutput: [1,1,0]\n\n\n \n\nConstraints:\n\n * 1 <= temperatures.length <= 105\n * 30 <= temperatures[i] <= 100",
        "Answer": "",
        "title": "daily-temperatures"
    },
    {
        "Question": "Basic Calculator IV - Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\n\n * An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n * A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n * A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n\n * For example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\n\nThe format of the output is as follows:\n\n * For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n   * For example, we would never write a term like \"b*a*c\", only \"a*b*c\".\n * Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n   * For example, \"a*a*b*c\" has degree 4.\n * The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n * An example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"].\n * Terms (including constant terms) with coefficient 0 are not included.\n   * For example, an expression of \"0\" has an output of [].\n\nNote: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n\n \n\nExample 1:\n\n\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\nOutput: [\"-1*a\",\"14\"]\n\n\nExample 2:\n\n\nInput: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\nOutput: [\"-1*pressure\",\"5\"]\n\n\nExample 3:\n\n\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\nOutput: [\"1*e*e\",\"-64\"]\n\n\n \n\nConstraints:\n\n * 1 <= expression.length <= 250\n * expression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.\n * expression does not contain any leading or trailing spaces.\n * All the tokens in expression are separated by a single space.\n * 0 <= evalvars.length <= 100\n * 1 <= evalvars[i].length <= 20\n * evalvars[i] consists of lowercase English letters.\n * evalints.length == evalvars.length\n * -100 <= evalints[i] <= 100",
        "Answer": "",
        "title": "basic-calculator-iv"
    },
    {
        "Question": "Basic Calculator III - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "basic-calculator-iii"
    },
    {
        "Question": "Car Fleet - There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.\n\nYou are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.\n\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\n\nA car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.\n\nIf a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.\n\nReturn the number of car fleets that will arrive at the destination.\n\n \n\nExample 1:\n\nInput: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n\nOutput: 3\n\nExplanation:\n\n * The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target.\n * The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.\n * The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n\nExample 2:\n\nInput: target = 10, position = [3], speed = [3]\n\nOutput: 1\n\nExplanation:\n\nThere is only one car, hence there is only one fleet.\n\nExample 3:\n\nInput: target = 100, position = [0,2,4], speed = [4,2,1]\n\nOutput: 1\n\nExplanation:\n\n * The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5.\n * Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n\n \n\nConstraints:\n\n * n == position.length == speed.length\n * 1 <= n <= 105\n * 0 < target <= 106\n * 0 <= position[i] < target\n * All the values of position are unique.\n * 0 < speed[i] <= 106",
        "Answer": "",
        "title": "car-fleet"
    },
    {
        "Question": "Score of Parentheses - Given a balanced parentheses string s, return the score of the string.\n\nThe score of a balanced parentheses string is based on the following rule:\n\n * \"()\" has score 1.\n * AB has score A + B, where A and B are balanced parentheses strings.\n * (A) has score 2 * A, where A is a balanced parentheses string.\n\n \n\nExample 1:\n\n\nInput: s = \"()\"\nOutput: 1\n\n\nExample 2:\n\n\nInput: s = \"(())\"\nOutput: 2\n\n\nExample 3:\n\n\nInput: s = \"()()\"\nOutput: 2\n\n\n \n\nConstraints:\n\n * 2 <= s.length <= 50\n * s consists of only '(' and ')'.\n * s is a balanced parentheses string.",
        "Answer": "",
        "title": "score-of-parentheses"
    },
    {
        "Question": "Leaf-Similar Trees - Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png]\n\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\n\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\n\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg]\n\n\nInput: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg]\n\n\nInput: root1 = [1,2,3], root2 = [1,3,2]\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in each tree will be in the range [1, 200].\n * Both of the given trees will have values in the range [0, 200].",
        "Answer": "",
        "title": "leaf-similar-trees"
    },
    {
        "Question": "Maximum Frequency Stack - Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n\nImplement the FreqStack class:\n\n * FreqStack() constructs an empty frequency stack.\n * void push(int val) pushes an integer val onto the top of the stack.\n * int pop() removes and returns the most frequent element in the stack.\n   * If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\n \n\nExample 1:\n\n\nInput\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\nOutput\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\nExplanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n\n\n \n\nConstraints:\n\n * 0 <= val <= 109\n * At most 2 * 104 calls will be made to push and pop.\n * It is guaranteed that there will be at least one element in the stack before calling pop.",
        "Answer": "",
        "title": "maximum-frequency-stack"
    },
    {
        "Question": "Online Stock Span - Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.\n\nThe span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\n\n * For example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days.\n * Also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.\n\nImplement the StockSpanner class:\n\n * StockSpanner() Initializes the object of the class.\n * int next(int price) Returns the span of the stock's price given that today's price is price.\n\n \n\nExample 1:\n\n\nInput\n[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n[[], [100], [80], [60], [70], [60], [75], [85]]\nOutput\n[null, 1, 1, 1, 2, 1, 4, 6]\n\nExplanation\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85);  // return 6\n\n\n \n\nConstraints:\n\n * 1 <= price <= 105\n * At most 104 calls will be made to next.",
        "Answer": "",
        "title": "online-stock-span"
    },
    {
        "Question": "Minimum Add to Make Parentheses Valid - A parentheses string is valid if and only if:\n\n * It is the empty string,\n * It can be written as AB (A concatenated with B), where A and B are valid strings, or\n * It can be written as (A), where A is a valid string.\n\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\n\n * For example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\".\n\nReturn the minimum number of moves required to make s valid.\n\n \n\nExample 1:\n\n\nInput: s = \"())\"\nOutput: 1\n\n\nExample 2:\n\n\nInput: s = \"(((\"\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s[i] is either '(' or ')'.",
        "Answer": "",
        "title": "minimum-add-to-make-parentheses-valid"
    },
    {
        "Question": "Validate Stack Sequences - Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\nOutput: true\nExplanation: We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n\n\nExample 2:\n\n\nInput: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\nOutput: false\nExplanation: 1 cannot be popped before 2.\n\n\n \n\nConstraints:\n\n * 1 <= pushed.length <= 1000\n * 0 <= pushed[i] <= 1000\n * All the elements of pushed are unique.\n * popped.length == pushed.length\n * popped is a permutation of pushed.",
        "Answer": "",
        "title": "validate-stack-sequences"
    },
    {
        "Question": "Sliding Window Maximum - You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n\nReturn the max sliding window.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n\nExample 2:\n\n\nInput: nums = [1], k = 1\nOutput: [1]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -104 <= nums[i] <= 104\n * 1 <= k <= nums.length",
        "Answer": "",
        "title": "sliding-window-maximum"
    },
    {
        "Question": "Number of Recent Calls - You have a RecentCounter class which counts the number of recent requests within a certain time frame.\n\nImplement the RecentCounter class:\n\n * RecentCounter() Initializes the counter with zero recent requests.\n * int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].\n\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\n\n \n\nExample 1:\n\n\nInput\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\nOutput\n[null, 1, 2, 3, 3]\n\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\n\n\n \n\nConstraints:\n\n * 1 <= t <= 109\n * Each test case will call ping with strictly increasing values of t.\n * At most 104 calls will be made to ping.",
        "Answer": "",
        "title": "number-of-recent-calls"
    },
    {
        "Question": "Ugly Number II - An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n\nGiven an integer n, return the nth ugly number.\n\n \n\nExample 1:\n\n\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1690",
        "Answer": "",
        "title": "ugly-number-ii"
    },
    {
        "Question": "Find Median from Data Stream - The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\n * For example, for arr = [2,3,4], the median is 3.\n * For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n\nImplement the MedianFinder class:\n\n * MedianFinder() initializes the MedianFinder object.\n * void addNum(int num) adds the integer num from the data stream to the data structure.\n * double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n\n\n \n\nConstraints:\n\n * -105 <= num <= 105\n * There will be at least one element in the data structure before calling findMedian.\n * At most 5 * 104 calls will be made to addNum and findMedian.\n\n \n\nFollow up:\n\n * If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\n * If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?",
        "Answer": "",
        "title": "find-median-from-data-stream"
    },
    {
        "Question": "Super Ugly Number - A super ugly number is a positive integer whose prime factors are in the array primes.\n\nGiven an integer n and an array of integers primes, return the nth super ugly number.\n\nThe nth super ugly number is guaranteed to fit in a 32-bit signed integer.\n\n \n\nExample 1:\n\n\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n\n\nExample 2:\n\n\nInput: n = 1, primes = [2,3,5]\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n\n\n \n\nConstraints:\n\n * 1 <= n <= 105\n * 1 <= primes.length <= 100\n * 2 <= primes[i] <= 1000\n * primes[i] is guaranteed to be a prime number.\n * All the values of primes are unique and sorted in ascending order.",
        "Answer": "",
        "title": "super-ugly-number"
    },
    {
        "Question": "Find K Pairs with Smallest Sums - You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.\n\nDefine a pair (u, v) which consists of one element from the first array and one element from the second array.\n\nReturn the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\nOutput: [[1,2],[1,4],[1,6]]\nExplanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n\n\nExample 2:\n\n\nInput: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\nOutput: [[1,1],[1,1]]\nExplanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n\n\n \n\nConstraints:\n\n * 1 <= nums1.length, nums2.length <= 105\n * -109 <= nums1[i], nums2[i] <= 109\n * nums1 and nums2 both are sorted in non-decreasing order.\n * 1 <= k <= 104\n * k <= nums1.length * nums2.length",
        "Answer": "",
        "title": "find-k-pairs-with-smallest-sums"
    },
    {
        "Question": "Kth Smallest Element in a Sorted Matrix - Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.\n\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\n\nYou must find a solution with a memory complexity better than O(n2).\n\n \n\nExample 1:\n\n\nInput: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\nOutput: 13\nExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13\n\n\nExample 2:\n\n\nInput: matrix = [[-5]], k = 1\nOutput: -5\n\n\n \n\nConstraints:\n\n * n == matrix.length == matrix[i].length\n * 1 <= n <= 300\n * -109 <= matrix[i][j] <= 109\n * All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order.\n * 1 <= k <= n2\n\n \n\nFollow up:\n\n * Could you solve the problem with a constant memory (i.e., O(1) memory complexity)?\n * Could you solve the problem in O(n) time complexity? The solution may be too advanced for an interview but you may find reading this paper [http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf] fun.",
        "Answer": "",
        "title": "kth-smallest-element-in-a-sorted-matrix"
    },
    {
        "Question": "Trapping Rain Water II - Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg]\n\n\nInput: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\nOutput: 4\nExplanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg]\n\n\nInput: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\nOutput: 10\n\n\n \n\nConstraints:\n\n * m == heightMap.length\n * n == heightMap[i].length\n * 1 <= m, n <= 200\n * 0 <= heightMap[i][j] <= 2 * 104",
        "Answer": "",
        "title": "trapping-rain-water-ii"
    },
    {
        "Question": "Sliding Window Median - The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n\n * For examples, if arr = [2,3,4], the median is 3.\n * For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\n\nYou are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n\nReturn the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\nExplanation: \nWindow position                Median\n---------------                -----\n[1  3  -1] -3  5  3  6  7        1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7        3\n 1  3  -1  -3 [5  3  6] 7        5\n 1  3  -1  -3  5 [3  6  7]       6\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4,2,3,1,4,2], k = 3\nOutput: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n\n\n \n\nConstraints:\n\n * 1 <= k <= nums.length <= 105\n * -231 <= nums[i] <= 231 - 1",
        "Answer": "",
        "title": "sliding-window-median"
    },
    {
        "Question": "IPO - Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\n\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\n\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n \n\nExample 1:\n\n\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\nOutput: 4\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n\n\nExample 2:\n\n\nInput: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\nOutput: 6\n\n\n \n\nConstraints:\n\n * 1 <= k <= 105\n * 0 <= w <= 109\n * n == profits.length\n * n == capital.length\n * 1 <= n <= 105\n * 0 <= profits[i] <= 104\n * 0 <= capital[i] <= 109",
        "Answer": "",
        "title": "ipo"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "smallest-range"
    },
    {
        "Question": "Kth Largest Element in a Stream - You are part of a university admissions office and need to keep track of the kth highest test score from applicants in real-time. This helps to determine cut-off marks for interviews and admissions dynamically as new applicants submit their scores.\n\nYou are tasked to implement a class which, for a given integer k, maintains a stream of test scores and continuously returns the kth highest test score after a new score has been submitted. More specifically, we are looking for the kth highest score in the sorted list of all scores.\n\nImplement the KthLargest class:\n\n * KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of test scores nums.\n * int add(int val) Adds a new test score val to the stream and returns the element representing the kth largest element in the pool of test scores so far.\n\n \n\nExample 1:\n\nInput:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n\nOutput: [null, 4, 5, 5, 8, 8]\n\nExplanation:\n\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3); // return 4\nkthLargest.add(5); // return 5\nkthLargest.add(10); // return 5\nkthLargest.add(9); // return 8\nkthLargest.add(4); // return 8\n\nExample 2:\n\nInput:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\"]\n[[4, [7, 7, 7, 7, 8, 3]], [2], [10], [9], [9]]\n\nOutput: [null, 7, 7, 7, 8]\n\nExplanation:\n\nKthLargest kthLargest = new KthLargest(4, [7, 7, 7, 7, 8, 3]);\nkthLargest.add(2); // return 7\nkthLargest.add(10); // return 7\nkthLargest.add(9); // return 7\nkthLargest.add(9); // return 8\n\n \n\nConstraints:\n\n * 0 <= nums.length <= 104\n * 1 <= k <= nums.length + 1\n * -104 <= nums[i] <= 104\n * -104 <= val <= 104\n * At most 104 calls will be made to add.",
        "Answer": "",
        "title": "kth-largest-element-in-a-stream"
    },
    {
        "Question": "Hand of Straights - Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\n\nGiven an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\nOutput: true\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n\n\nExample 2:\n\n\nInput: hand = [1,2,3,4,5], groupSize = 4\nOutput: false\nExplanation: Alice's hand can not be rearranged into groups of 4.\n\n\n\n \n\nConstraints:\n\n * 1 <= hand.length <= 104\n * 0 <= hand[i] <= 109\n * 1 <= groupSize <= hand.length\n\n \n\nNote: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/ [https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/]",
        "Answer": "",
        "title": "hand-of-straights"
    },
    {
        "Question": "Exam Room - There is an exam room with n seats in a single row labeled from 0 to n - 1.\n\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.\n\nDesign a class that simulates the mentioned exam room.\n\nImplement the ExamRoom class:\n\n * ExamRoom(int n) Initializes the object of the exam room with the number of the seats n.\n * int seat() Returns the label of the seat at which the next student will set.\n * void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.\n\n \n\nExample 1:\n\n\nInput\n[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]\nOutput\n[null, 0, 9, 4, 2, null, 5]\n\nExplanation\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.\n\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109\n * It is guaranteed that there is a student sitting at seat p.\n * At most 104 calls will be made to seat and leave.",
        "Answer": "",
        "title": "exam-room"
    },
    {
        "Question": "Minimum Cost to Hire K Workers - There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.\n\nWe want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:\n\n 1. Every worker in the paid group must be paid at least their minimum wage expectation.\n 2. In the group, each worker's pay must be directly proportional to their quality. This means if a worker’s quality is double that of another worker in the group, then they must be paid twice as much as the other worker.\n\nGiven the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n\nInput: quality = [10,20,5], wage = [70,50,30], k = 2\nOutput: 105.00000\nExplanation: We pay 70 to 0th worker and 35 to 2nd worker.\n\n\nExample 2:\n\n\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\nOutput: 30.66667\nExplanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.\n\n\n \n\nConstraints:\n\n * n == quality.length == wage.length\n * 1 <= k <= n <= 104\n * 1 <= quality[i], wage[i] <= 104",
        "Answer": "",
        "title": "minimum-cost-to-hire-k-workers"
    },
    {
        "Question": "Minimum Number of Refueling Stops - A car travels from a starting position to a destination which is target miles east of the starting position.\n\nThere are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\n\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\n\nReturn the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\n\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\n\n \n\nExample 1:\n\n\nInput: target = 1, startFuel = 1, stations = []\nOutput: 0\nExplanation: We can reach the target without refueling.\n\n\nExample 2:\n\n\nInput: target = 100, startFuel = 1, stations = [[10,100]]\nOutput: -1\nExplanation: We can not reach the target (or even the first gas station).\n\n\nExample 3:\n\n\nInput: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\nOutput: 2\nExplanation: We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n\n\n \n\nConstraints:\n\n * 1 <= target, startFuel <= 109\n * 0 <= stations.length <= 500\n * 1 <= positioni < positioni+1 < target\n * 1 <= fueli < 109",
        "Answer": "",
        "title": "minimum-number-of-refueling-stops"
    },
    {
        "Question": "Binary Tree Inorder Traversal - Given the root of a binary tree, return the inorder traversal of its nodes' values.\n\n \n\nExample 1:\n\nInput: root = [1,null,2,3]\n\nOutput: [1,3,2]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png]\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\n\nOutput: [4,2,6,5,7,1,3,9,8]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/08/29/tree_2.png]\n\nExample 3:\n\nInput: root = []\n\nOutput: []\n\nExample 4:\n\nInput: root = [1]\n\nOutput: [1]\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 100].\n * -100 <= Node.val <= 100\n\n \n\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "Answer": "",
        "title": "binary-tree-inorder-traversal"
    },
    {
        "Question": "Recover Binary Search Tree - You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg]\n\n\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg]\n\n\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [2, 1000].\n * -231 <= Node.val <= 231 - 1\n\n \n\nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?",
        "Answer": "",
        "title": "recover-binary-search-tree"
    },
    {
        "Question": "Binary Tree Preorder Traversal - Given the root of a binary tree, return the preorder traversal of its nodes' values.\n\n \n\nExample 1:\n\nInput: root = [1,null,2,3]\n\nOutput: [1,2,3]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png]\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\n\nOutput: [1,2,4,5,6,7,3,8,9]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/08/29/tree_2.png]\n\nExample 3:\n\nInput: root = []\n\nOutput: []\n\nExample 4:\n\nInput: root = [1]\n\nOutput: [1]\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 100].\n * -100 <= Node.val <= 100\n\n \n\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "Answer": "",
        "title": "binary-tree-preorder-traversal"
    },
    {
        "Question": "Binary Tree Postorder Traversal - Given the root of a binary tree, return the postorder traversal of its nodes' values.\n\n \n\nExample 1:\n\nInput: root = [1,null,2,3]\n\nOutput: [3,2,1]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png]\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\n\nOutput: [4,6,7,5,2,9,8,3,1]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/08/29/tree_2.png]\n\nExample 3:\n\nInput: root = []\n\nOutput: []\n\nExample 4:\n\nInput: root = [1]\n\nOutput: [1]\n\n \n\nConstraints:\n\n * The number of the nodes in the tree is in the range [0, 100].\n * -100 <= Node.val <= 100\n\n \n\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "Answer": "",
        "title": "binary-tree-postorder-traversal"
    },
    {
        "Question": "Implement Trie (Prefix Tree) - A trie [https://en.wikipedia.org/wiki/Trie] (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n\n * Trie() Initializes the trie object.\n * void insert(String word) Inserts the string word into the trie.\n * boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n * boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n\n \n\nExample 1:\n\n\nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n\n\n \n\nConstraints:\n\n * 1 <= word.length, prefix.length <= 2000\n * word and prefix consist only of lowercase English letters.\n * At most 3 * 104 calls in total will be made to insert, search, and startsWith.",
        "Answer": "",
        "title": "implement-trie-prefix-tree"
    },
    {
        "Question": "Design Add and Search Words Data Structure - Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the WordDictionary class:\n\n * WordDictionary() Initializes the object.\n * void addWord(word) Adds word to the data structure, it can be matched later.\n * bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n\n \n\nExample:\n\n\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n\n\n \n\nConstraints:\n\n * 1 <= word.length <= 25\n * word in addWord consists of lowercase English letters.\n * word in search consist of '.' or lowercase English letters.\n * There will be at most 2 dots in word for search queries.\n * At most 104 calls will be made to addWord and search.",
        "Answer": "",
        "title": "add-and-search-word-data-structure-design"
    },
    {
        "Question": "Invert Binary Tree - Given the root of a binary tree, invert the tree, and return its root.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg]\n\n\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg]\n\n\nInput: root = [2,1,3]\nOutput: [2,3,1]\n\n\nExample 3:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 100].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "invert-binary-tree"
    },
    {
        "Question": "Serialize and Deserialize Binary Tree - Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nClarification: The input/output format is the same as how LeetCode serializes a binary tree [https://support.leetcode.com/hc/en-us/articles/32442719377939-How-to-create-test-cases-on-LeetCode#h_01J5EGREAW3NAEJ14XC07GRW1A]. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg]\n\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n\n\nExample 2:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "serialize-and-deserialize-binary-tree"
    },
    {
        "Question": "Range Sum Query - Mutable - Given an integer array nums, handle multiple queries of the following types:\n\n 1. Update the value of an element in nums.\n 2. Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\n * NumArray(int[] nums) Initializes the object with the integer array nums.\n * void update(int index, int val) Updates the value of nums[index] to be val.\n * int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \n\nExample 1:\n\n\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * -100 <= nums[i] <= 100\n * 0 <= index < nums.length\n * -100 <= val <= 100\n * 0 <= left <= right < nums.length\n * At most 3 * 104 calls will be made to update and sumRange.",
        "Answer": "",
        "title": "range-sum-query-mutable"
    },
    {
        "Question": "Count of Smaller Numbers After Self - Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n\n \n\nExample 1:\n\n\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n\n\nExample 2:\n\n\nInput: nums = [-1]\nOutput: [0]\n\n\nExample 3:\n\n\nInput: nums = [-1,-1]\nOutput: [0,0]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -104 <= nums[i] <= 104",
        "Answer": "",
        "title": "count-of-smaller-numbers-after-self"
    },
    {
        "Question": "Construct Quad Tree - Given a n * n matrix grid of 0's and 1's only. We want to represent grid with a Quad-Tree.\n\nReturn the root of the Quad-Tree representing grid.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n * val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the val to True or False when isLeaf is False, and both are accepted in the answer.\n * isLeaf: True if the node is a leaf node on the tree or False if the node has four children.\n\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n 1. If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\n 2. If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\n 3. Recurse for each of the children with the proper sub-grid.\n\n[https://assets.leetcode.com/uploads/2020/02/11/new_top.png]\n\nIf you want to know more about the Quad-Tree, you can refer to the wiki [https://en.wikipedia.org/wiki/Quadtree].\n\nQuad-Tree format:\n\nYou don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\n\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/02/11/grid1.png]\n\n\nInput: grid = [[0,1],[1,0]]\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\nExplanation: The explanation of this example is shown below:\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.\n[https://assets.leetcode.com/uploads/2020/02/12/e1tree.png]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/02/12/e2mat.png]\n\n\nInput: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n[https://assets.leetcode.com/uploads/2020/02/12/e2tree.png]\n\n\n \n\nConstraints:\n\n * n == grid.length == grid[i].length\n * n == 2x where 0 <= x <= 6",
        "Answer": "",
        "title": "construct-quad-tree"
    },
    {
        "Question": "N-ary Tree Level Order Traversal - Given an n-ary tree, return the level order traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png]\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png]\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n\n\n \n\nConstraints:\n\n * The height of the n-ary tree is less than or equal to 1000\n * The total number of nodes is between [0, 104]",
        "Answer": "",
        "title": "n-ary-tree-level-order-traversal"
    },
    {
        "Question": "Flatten a Multilevel Doubly Linked List - You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\n\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\n\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/11/09/flatten11.jpg]\n\n\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n[https://assets.leetcode.com/uploads/2021/11/09/flatten12.jpg]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/11/09/flatten2.1jpg]\n\n\nInput: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n[https://assets.leetcode.com/uploads/2021/11/24/list.jpg]\n\n\nExample 3:\n\n\nInput: head = []\nOutput: []\nExplanation: There could be empty list in the input.\n\n\n \n\nConstraints:\n\n * The number of Nodes will not exceed 1000.\n * 1 <= Node.val <= 105\n\n \n\nHow the multilevel linked list is represented in test cases:\n\nWe use the multilevel linked list from Example 1 above:\n\n\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\nThe serialization of each level is as follows:\n\n\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n\n\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\n\n\n[1,    2,    3, 4, 5, 6, null]\n             |\n[null, null, 7,    8, 9, 10, null]\n                   |\n[            null, 11, 12, null]\n\n\nMerging the serialization of each level and removing trailing nulls we obtain:\n\n\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
        "Answer": "",
        "title": "flatten-a-multilevel-doubly-linked-list"
    },
    {
        "Question": "Find Mode in Binary Search Tree - Given the root of a binary search tree (BST) with duplicates, return all the mode(s) [https://en.wikipedia.org/wiki/Mode_(statistics)] (i.e., the most frequently occurred element) in it.\n\nIf the tree has more than one mode, return them in any order.\n\nAssume a BST is defined as follows:\n\n * The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n * The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n * Both the left and right subtrees must also be binary search trees.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/11/mode-tree.jpg]\n\n\nInput: root = [1,null,2,2]\nOutput: [2]\n\n\nExample 2:\n\n\nInput: root = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -105 <= Node.val <= 105\n\n \n\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",
        "Answer": "",
        "title": "find-mode-in-binary-search-tree"
    },
    {
        "Question": "Most Frequent Subtree Sum - Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\n\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/24/freq1-tree.jpg]\n\n\nInput: root = [5,2,-3]\nOutput: [2,-3,4]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/24/freq2-tree.jpg]\n\n\nInput: root = [5,2,-5]\nOutput: [2]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -105 <= Node.val <= 105",
        "Answer": "",
        "title": "most-frequent-subtree-sum"
    },
    {
        "Question": "Find Bottom Left Tree Value - Given the root of a binary tree, return the leftmost value in the last row of the tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg]\n\n\nInput: root = [2,1,3]\nOutput: 1\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg]\n\n\nInput: root = [1,2,3,4,null,5,6,null,null,7]\nOutput: 7\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -231 <= Node.val <= 231 - 1",
        "Answer": "",
        "title": "find-bottom-left-tree-value"
    },
    {
        "Question": "Contiguous Array - Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.\n\n \n\nExample 1:\n\n\nInput: nums = [0,1]\nOutput: 2\nExplanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n\n\nExample 2:\n\n\nInput: nums = [0,1,0]\nOutput: 2\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n\n\nExample 3:\n\n\nInput: nums = [0,1,1,1,1,1,0,0,0]\nOutput: 6\nExplanation: [1,1,1,0,0,0] is the longest contiguous subarray with equal number of 0 and 1.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * nums[i] is either 0 or 1.",
        "Answer": "",
        "title": "contiguous-array"
    },
    {
        "Question": "Minesweeper - Let's play the minesweeper game (Wikipedia [https://en.wikipedia.org/wiki/Minesweeper_(video_game)], online game [http://minesweeperonline.com])!\n\nYou are given an m x n char matrix board representing the game board where:\n\n * 'M' represents an unrevealed mine,\n * 'E' represents an unrevealed empty square,\n * 'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n * digit ('1' to '8') represents how many mines are adjacent to this revealed square, and\n * 'X' represents a revealed mine.\n\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\n\nReturn the board after revealing this position according to the following rules:\n\n 1. If a mine 'M' is revealed, then the game is over. You should change it to 'X'.\n 2. If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.\n 3. If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\n 4. Return the board when no more squares will be revealed.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2023/08/09/untitled.jpeg]\n\n\nInput: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2023/08/09/untitled-2.jpeg]\n\n\nInput: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n\n \n\nConstraints:\n\n * m == board.length\n * n == board[i].length\n * 1 <= m, n <= 50\n * board[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'.\n * click.length == 2\n * 0 <= clickr < m\n * 0 <= clickc < n\n * board[clickr][clickc] is either 'M' or 'E'.",
        "Answer": "",
        "title": "minesweeper"
    },
    {
        "Question": "Convert BST to Greater Tree - Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\n\n * The left subtree of a node contains only nodes with keys less than the node's key.\n * The right subtree of a node contains only nodes with keys greater than the node's key.\n * Both the left and right subtrees must also be binary search trees.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/05/02/tree.png]\n\n\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n\n\nExample 2:\n\n\nInput: root = [0,null,1]\nOutput: [1,null,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * -104 <= Node.val <= 104\n * All the values in the tree are unique.\n * root is guaranteed to be a valid binary search tree.\n\n \n\nNote: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/ [https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/]",
        "Answer": "",
        "title": "convert-bst-to-greater-tree"
    },
    {
        "Question": "Diameter of Binary Tree - Given the root of a binary tree, return the length of the diameter of the tree.\n\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n\nThe length of a path between two nodes is represented by the number of edges between them.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg]\n\n\nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n\n\nExample 2:\n\n\nInput: root = [1,2]\nOutput: 1\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "diameter-of-binary-tree"
    },
    {
        "Question": "Logical OR of Two Binary Grids Represented as Quad-Trees - A Binary Matrix is a matrix in which all the elements are either 0 or 1.\n\nGiven quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\n\nReturn a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\n\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n * val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n * isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n 1. If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\n 2. If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\n 3. Recurse for each of the children with the proper sub-grid.\n\n[https://assets.leetcode.com/uploads/2020/02/11/new_top.png]\n\nIf you want to know more about the Quad-Tree, you can refer to the wiki [https://en.wikipedia.org/wiki/Quadtree].\n\nQuad-Tree format:\n\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\n\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/02/11/qt1.png] [https://assets.leetcode.com/uploads/2020/02/11/qt2.png]\n\n\nInput: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n[https://assets.leetcode.com/uploads/2020/02/11/qtr.png]\n\n\nExample 2:\n\n\nInput: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\nOutput: [[1,0]]\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.\n\n\n \n\nConstraints:\n\n * quadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid.\n * n == 2x where 0 <= x <= 9.",
        "Answer": "",
        "title": "logical-or-of-two-binary-grids-represented-as-quad-trees"
    },
    {
        "Question": "Maximum Depth of N-ary Tree - Given a n-ary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png]\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: 3\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png]\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5\n\n\n \n\nConstraints:\n\n * The total number of nodes is in the range [0, 104].\n * The depth of the n-ary tree is less than or equal to 1000.",
        "Answer": "",
        "title": "maximum-depth-of-n-ary-tree"
    },
    {
        "Question": "Binary Tree Tilt - Given the root of a binary tree, return the sum of every tree node's tilt.\n\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg]\n\n\nInput: root = [1,2,3]\nOutput: 1\nExplanation: \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg]\n\n\nInput: root = [4,2,9,3,5,null,7]\nOutput: 15\nExplanation: \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg]\n\n\nInput: root = [21,7,14,1,1,2,2,3,3]\nOutput: 9\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "binary-tree-tilt"
    },
    {
        "Question": "Construct String from Binary Tree - Given the root node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:\n\n * Node Representation: Each node in the tree should be represented by its integer value.\n\n * Parentheses for Children: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:\n   \n   * If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.\n   * If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.\n\n * Omitting Empty Parentheses: Any empty parentheses pairs (i.e., ()) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.\n   \n   In summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/03/cons1-tree.jpg]\n\n\nInput: root = [1,2,3,4]\nOutput: \"1(2(4))(3)\"\nExplanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\".\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/03/cons2-tree.jpg]\n\n\nInput: root = [1,2,3,null,4]\nOutput: \"1(2()(4))(3)\"\nExplanation: Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "construct-string-from-binary-tree"
    },
    {
        "Question": "N-ary Tree Preorder Traversal - Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png]\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,3,5,6,2,4]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png]\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * 0 <= Node.val <= 104\n * The height of the n-ary tree is less than or equal to 1000.\n\n \n\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "Answer": "",
        "title": "n-ary-tree-preorder-traversal"
    },
    {
        "Question": "N-ary Tree Postorder Traversal - Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png]\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [5,6,3,2,4,1]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png]\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * 0 <= Node.val <= 104\n * The height of the n-ary tree is less than or equal to 1000.\n\n \n\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "Answer": "",
        "title": "n-ary-tree-postorder-traversal"
    },
    {
        "Question": "Construct String from Binary Tree - Given the root node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:\n\n * Node Representation: Each node in the tree should be represented by its integer value.\n\n * Parentheses for Children: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:\n   \n   * If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.\n   * If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.\n\n * Omitting Empty Parentheses: Any empty parentheses pairs (i.e., ()) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.\n   \n   In summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/03/cons1-tree.jpg]\n\n\nInput: root = [1,2,3,4]\nOutput: \"1(2(4))(3)\"\nExplanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\".\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/03/cons2-tree.jpg]\n\n\nInput: root = [1,2,3,null,4]\nOutput: \"1(2()(4))(3)\"\nExplanation: Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "construct-string-from-binary-tree"
    },
    {
        "Question": "Merge Two Binary Trees - You are given two binary trees root1 and root2.\n\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\n\nReturn the merged tree.\n\nNote: The merging process must start from the root nodes of both trees.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/05/merge.jpg]\n\n\nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n\n\nExample 2:\n\n\nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n\n\n \n\nConstraints:\n\n * The number of nodes in both trees is in the range [0, 2000].\n * -104 <= Node.val <= 104",
        "Answer": "",
        "title": "merge-two-binary-trees"
    },
    {
        "Question": "Add One Row to Tree - Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\n\nNote that the root node is at depth 1.\n\nThe adding rule is:\n\n * Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.\n * cur's original left subtree should be the left subtree of the new left subtree root.\n * cur's original right subtree should be the right subtree of the new right subtree root.\n * If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg]\n\n\nInput: root = [4,2,6,3,1,5], val = 1, depth = 2\nOutput: [4,1,1,2,null,null,6,3,1,5]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg]\n\n\nInput: root = [4,2,null,3,1], val = 1, depth = 3\nOutput: [4,2,null,1,1,3,null,null,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * The depth of the tree is in the range [1, 104].\n * -100 <= Node.val <= 100\n * -105 <= val <= 105\n * 1 <= depth <= the depth of tree + 1",
        "Answer": "",
        "title": "add-one-row-to-tree"
    },
    {
        "Question": "Average of Levels in Binary Tree - Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg]\n\n\nInput: root = [3,9,20,15,7]\nOutput: [3.00000,14.50000,11.00000]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -231 <= Node.val <= 231 - 1",
        "Answer": "",
        "title": "average-of-levels-in-binary-tree"
    },
    {
        "Question": "Find Duplicate Subtrees - Given the root of a binary tree, return all duplicate subtrees.\n\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\n\nTwo trees are duplicate if they have the same structure with the same node values.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/08/16/e1.jpg]\n\n\nInput: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/08/16/e2.jpg]\n\n\nInput: root = [2,1,1]\nOutput: [[1]]\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2020/08/16/e33.jpg]\n\n\nInput: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]\n\n\n \n\nConstraints:\n\n * The number of the nodes in the tree will be in the range [1, 5000]\n * -200 <= Node.val <= 200",
        "Answer": "",
        "title": "find-duplicate-subtrees"
    },
    {
        "Question": "Two Sum IV - Input is a BST - Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg]\n\n\nInput: root = [5,3,6,2,4,null,7], k = 9\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg]\n\n\nInput: root = [5,3,6,2,4,null,7], k = 28\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -104 <= Node.val <= 104\n * root is guaranteed to be a valid binary search tree.\n * -105 <= k <= 105",
        "Answer": "",
        "title": "two-sum-iv-input-is-a-bst"
    },
    {
        "Question": "Maximum Binary Tree - You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\n\n 1. Create a root node whose value is the maximum value in nums.\n 2. Recursively build the left subtree on the subarray prefix to the left of the maximum value.\n 3. Recursively build the right subtree on the subarray suffix to the right of the maximum value.\n\nReturn the maximum binary tree built from nums.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg]\n\n\nInput: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\nExplanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg]\n\n\nInput: nums = [3,2,1]\nOutput: [3,null,2,null,1]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 0 <= nums[i] <= 1000\n * All integers in nums are unique.",
        "Answer": "",
        "title": "maximum-binary-tree"
    },
    {
        "Question": "Print Binary Tree - Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\n\n * The height of the tree is height and the number of rows m should be equal to height + 1.\n * The number of columns n should be equal to 2height+1 - 1.\n * Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).\n * For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].\n * Continue this process until all the nodes in the tree have been placed.\n * Any empty cells should contain the empty string \"\".\n\nReturn the constructed matrix res.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/03/print1-tree.jpg]\n\n\nInput: root = [1,2]\nOutput: \n[[\"\",\"1\",\"\"],\n [\"2\",\"\",\"\"]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/03/print2-tree.jpg]\n\n\nInput: root = [1,2,3,null,4]\nOutput: \n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n [\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 210].\n * -99 <= Node.val <= 99\n * The depth of the tree will be in the range [1, 10].",
        "Answer": "",
        "title": "print-binary-tree"
    },
    {
        "Question": "Maximum Width of Binary Tree - Given the root of a binary tree, return the maximum width of the given tree.\n\nThe maximum width of a tree is the maximum width among all levels.\n\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\nIt is guaranteed that the answer will in the range of a 32-bit signed integer.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg]\n\n\nInput: root = [1,3,2,5,3,null,9]\nOutput: 4\nExplanation: The maximum width exists in the third level with length 4 (5,3,null,9).\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg]\n\n\nInput: root = [1,3,2,5,null,null,9,6,null,7]\nOutput: 7\nExplanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg]\n\n\nInput: root = [1,3,2,5]\nOutput: 2\nExplanation: The maximum width exists in the second level with length 2 (3,2).\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 3000].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "maximum-width-of-binary-tree"
    },
    {
        "Question": "Map Sum Pairs - Design a map that allows you to do the following:\n\n * Maps a string key to a given value.\n * Returns the sum of the values that have a key with a prefix equal to a given string.\n\nImplement the MapSum class:\n\n * MapSum() Initializes the MapSum object.\n * void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\n * int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.\n\n \n\nExample 1:\n\n\nInput\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\nOutput\n[null, null, 3, null, 5]\n\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n \n\nConstraints:\n\n * 1 <= key.length, prefix.length <= 50\n * key and prefix consist of only lowercase English letters.\n * 1 <= val <= 1000\n * At most 50 calls will be made to insert and sum.",
        "Answer": "",
        "title": "map-sum-pairs"
    },
    {
        "Question": "Redundant Connection - In this problem, a tree is an undirected graph that is connected and has no cycles.\n\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\n\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg]\n\n\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg]\n\n\nInput: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\nOutput: [1,4]\n\n\n \n\nConstraints:\n\n * n == edges.length\n * 3 <= n <= 1000\n * edges[i].length == 2\n * 1 <= ai < bi <= edges.length\n * ai != bi\n * There are no repeated edges.\n * The given graph is connected.",
        "Answer": "",
        "title": "redundant-connection"
    },
    {
        "Question": "Redundant Connection II - In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\n\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg]\n\n\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg]\n\n\nInput: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\nOutput: [4,1]\n\n\n \n\nConstraints:\n\n * n == edges.length\n * 3 <= n <= 1000\n * edges[i].length == 2\n * 1 <= ui, vi <= n\n * ui != vi",
        "Answer": "",
        "title": "redundant-connection-ii"
    },
    {
        "Question": "Longest Univalue Path - Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\n\nThe length of the path between two nodes is represented by the number of edges between them.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg]\n\n\nInput: root = [5,4,5,1,1,null,5]\nOutput: 2\nExplanation: The shown image shows that the longest path of the same value (i.e. 5).\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg]\n\n\nInput: root = [1,4,5,4,4,null,5]\nOutput: 2\nExplanation: The shown image shows that the longest path of the same value (i.e. 4).\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * -1000 <= Node.val <= 1000\n * The depth of the tree will not exceed 1000.",
        "Answer": "",
        "title": "longest-univalue-path"
    },
    {
        "Question": "Falling Squares - There are several squares being dropped onto the X-axis of a 2D plane.\n\nYou are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\n\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\n\nAfter each square is dropped, you must record the height of the current tallest stack of squares.\n\nReturn an integer array ans where ans[i] represents the height described above after dropping the ith square.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/28/fallingsq1-plane.jpg]\n\n\nInput: positions = [[1,2],[2,3],[6,1]]\nOutput: [2,5,5]\nExplanation:\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5].\n\n\nExample 2:\n\n\nInput: positions = [[100,100],[200,100]]\nOutput: [100,100]\nExplanation:\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.\n\n\n \n\nConstraints:\n\n * 1 <= positions.length <= 1000\n * 1 <= lefti <= 108\n * 1 <= sideLengthi <= 106",
        "Answer": "",
        "title": "falling-squares"
    },
    {
        "Question": "Search in a Binary Search Tree - You are given the root of a binary search tree (BST) and an integer val.\n\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg]\n\n\nInput: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg]\n\n\nInput: root = [4,2,7,1,3], val = 5\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 5000].\n * 1 <= Node.val <= 107\n * root is a binary search tree.\n * 1 <= val <= 107",
        "Answer": "",
        "title": "search-in-a-binary-search-tree"
    },
    {
        "Question": "Insert into a Binary Search Tree - You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\n\nNotice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg]\n\n\nInput: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:\n[https://assets.leetcode.com/uploads/2020/10/05/bst.jpg]\n\n\nExample 2:\n\n\nInput: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40,20,60,10,30,50,70,null,null,25]\n\n\nExample 3:\n\n\nInput: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4,2,7,1,3,5]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree will be in the range [0, 104].\n * -108 <= Node.val <= 108\n * All the values Node.val are unique.\n * -108 <= val <= 108\n * It's guaranteed that val does not exist in the original BST.",
        "Answer": "",
        "title": "insert-into-a-binary-search-tree"
    },
    {
        "Question": "Binary Tree Pruning - Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\n\nA subtree of a node node is node plus every node that is a descendant of node.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png]\n\n\nInput: root = [1,null,0,0,1]\nOutput: [1,null,0,null,1]\nExplanation: \nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\nThe diagram on the right represents the answer.\n\n\nExample 2:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png]\n\n\nInput: root = [1,0,1,0,0,0,1]\nOutput: [1,null,1,null,1]\n\n\nExample 3:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png]\n\n\nInput: root = [1,1,0,1,1,0,1,0]\nOutput: [1,1,0,1,1,null,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 200].\n * Node.val is either 0 or 1.",
        "Answer": "",
        "title": "binary-tree-pruning"
    },
    {
        "Question": "Rectangle Area II - You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.\n\nCalculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.\n\nReturn the total area. Since the answer may be too large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png]\n\n\nInput: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\nOutput: 6\nExplanation: A total area of 6 is covered by all three rectangles, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap.\n\n\nExample 2:\n\n\nInput: rectangles = [[0,0,1000000000,1000000000]]\nOutput: 49\nExplanation: The answer is 1018 modulo (109 + 7), which is 49.\n\n\n \n\nConstraints:\n\n * 1 <= rectangles.length <= 200\n * rectanges[i].length == 4\n * 0 <= xi1, yi1, xi2, yi2 <= 109\n * xi1 <= xi2\n * yi1 <= yi2\n * All rectangles have non zero area.",
        "Answer": "",
        "title": "rectangle-area-ii"
    },
    {
        "Question": "All Nodes Distance K in Binary Tree - Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\n\nYou can return the answer in any order.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png]\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\nOutput: [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n\n\nExample 2:\n\n\nInput: root = [1], target = 1, k = 3\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 500].\n * 0 <= Node.val <= 500\n * All the values Node.val are unique.\n * target is the value of one of the nodes in the tree.\n * 0 <= k <= 1000",
        "Answer": "",
        "title": "all-nodes-distance-k-in-binary-tree"
    },
    {
        "Question": "Smallest Subtree with all the Deepest Nodes - Given the root of a binary tree, the depth of each node is the shortest distance to the root.\n\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\n\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\n\nThe subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png]\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\n\n\nExample 2:\n\n\nInput: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree.\n\n\nExample 3:\n\n\nInput: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree will be in the range [1, 500].\n * 0 <= Node.val <= 500\n * The values of the nodes in the tree are unique.\n\n \n\nNote: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/ [https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/]",
        "Answer": "",
        "title": "smallest-subtree-with-all-the-deepest-nodes"
    },
    {
        "Question": "Construct Binary Tree from Preorder and Postorder Traversal - Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\n\nIf there exist multiple answers, you can return any of them.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/24/lc-prepost.jpg]\n\n\nInput: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\nOutput: [1,2,3,4,5,6,7]\n\n\nExample 2:\n\n\nInput: preorder = [1], postorder = [1]\nOutput: [1]\n\n\n \n\nConstraints:\n\n * 1 <= preorder.length <= 30\n * 1 <= preorder[i] <= preorder.length\n * All the values of preorder are unique.\n * postorder.length == preorder.length\n * 1 <= postorder[i] <= postorder.length\n * All the values of postorder are unique.\n * It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.",
        "Answer": "",
        "title": "construct-binary-tree-from-preorder-and-postorder-traversal"
    },
    {
        "Question": "Increasing Order Search Tree - Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg]\n\n\nInput: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\nOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg]\n\n\nInput: root = [5,1,7]\nOutput: [1,null,5,null,7]\n\n\n \n\nConstraints:\n\n * The number of nodes in the given tree will be in the range [1, 100].\n * 0 <= Node.val <= 1000",
        "Answer": "",
        "title": "increasing-order-search-tree"
    },
    {
        "Question": "Complete Binary Tree Inserter - A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\n\nImplement the CBTInserter class:\n\n * CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.\n * int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.\n * TreeNode get_root() Returns the root node of the tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/08/03/lc-treeinsert.jpg]\n\n\nInput\n[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]\nOutput\n[null, 1, 2, [1, 2, 3, 4]]\n\nExplanation\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3);  // return 1\ncBTInserter.insert(4);  // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree will be in the range [1, 1000].\n * 0 <= Node.val <= 5000\n * root is a complete binary tree.\n * 0 <= val <= 5000\n * At most 104 calls will be made to insert and get_root.",
        "Answer": "",
        "title": "complete-binary-tree-inserter"
    },
    {
        "Question": "Range Sum of BST - Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg]\n\n\nInput: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg]\n\n\nInput: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 2 * 104].\n * 1 <= Node.val <= 105\n * 1 <= low <= high <= 105\n * All Node.val are unique.",
        "Answer": "",
        "title": "range-sum-of-bst"
    },
    {
        "Question": "Flip Equivalent Binary Trees - For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\n\nA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\n\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.\n\n \n\nExample 1:\n\nFlipped Trees Diagram [https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png]\n\n\nInput: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\nOutput: true\nExplanation: We flipped at nodes with values 1, 3, and 5.\n\n\nExample 2:\n\n\nInput: root1 = [], root2 = []\nOutput: true\n\n\nExample 3:\n\n\nInput: root1 = [], root2 = [1]\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in each tree is in the range [0, 100].\n * Each tree will have unique node values in the range [0, 99].",
        "Answer": "",
        "title": "flip-equivalent-binary-trees"
    },
    {
        "Question": "Check Completeness of a Binary Tree - Given the root of a binary tree, determine if it is a complete binary tree.\n\nIn a complete binary tree [http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees], every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png]\n\n\nInput: root = [1,2,3,4,5,6]\nOutput: true\nExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png]\n\n\nInput: root = [1,2,3,4,5,null,7]\nOutput: false\nExplanation: The node with value 7 isn't as far left as possible.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 100].\n * 1 <= Node.val <= 1000",
        "Answer": "",
        "title": "check-completeness-of-a-binary-tree"
    },
    {
        "Question": "Univalued Binary Tree - A binary tree is uni-valued if every node in the tree has the same value.\n\nGiven the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/28/unival_bst_1.png]\n\n\nInput: root = [1,1,1,1,1,null,1]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/28/unival_bst_2.png]\n\n\nInput: root = [2,2,2,5,2]\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 100].\n * 0 <= Node.val < 100",
        "Answer": "",
        "title": "univalued-binary-tree"
    },
    {
        "Question": "Flip Binary Tree To Match Preorder Traversal - You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal [https://en.wikipedia.org/wiki/Tree_traversal#Pre-order] of the binary tree.\n\nAny node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\n\n[https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg]\n\nFlip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.\n\nReturn a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/01/02/1219-01.png]\n\n\nInput: root = [1,2], voyage = [2,1]\nOutput: [-1]\nExplanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/01/02/1219-02.png]\n\n\nInput: root = [1,2,3], voyage = [1,3,2]\nOutput: [1]\nExplanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2019/01/02/1219-02.png]\n\n\nInput: root = [1,2,3], voyage = [1,2,3]\nOutput: []\nExplanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is n.\n * n == voyage.length\n * 1 <= n <= 100\n * 1 <= Node.val, voyage[i] <= n\n * All the values in the tree are unique.\n * All the values in voyage are unique.",
        "Answer": "",
        "title": "flip-binary-tree-to-match-preorder-traversal"
    },
    {
        "Question": "Distribute Coins in Binary Tree - You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.\n\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\n\nReturn the minimum number of moves required to make every node have exactly one coin.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/01/18/tree1.png]\n\n\nInput: root = [3,0,0]\nOutput: 2\nExplanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/01/18/tree2.png]\n\n\nInput: root = [0,3,0]\nOutput: 3\nExplanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is n.\n * 1 <= n <= 100\n * 0 <= Node.val <= n\n * The sum of all Node.val is n.",
        "Answer": "",
        "title": "distribute-coins-in-binary-tree"
    },
    {
        "Question": "Vertical Order Traversal of a Binary Tree - Given the root of a binary tree, calculate the vertical order traversal of the binary tree.\n\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\n\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\nReturn the vertical order traversal of the binary tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg]\n\n\nInput: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg]\n\n\nInput: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 1000].\n * 0 <= Node.val <= 1000",
        "Answer": "",
        "title": "vertical-order-traversal-of-a-binary-tree"
    },
    {
        "Question": "Smallest String Starting From Leaf - You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.\n\nReturn the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\n\nAs a reminder, any shorter prefix of a string is lexicographically smaller.\n\n * For example, \"ab\" is lexicographically smaller than \"aba\".\n\nA leaf of a node is a node that has no children.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/01/30/tree1.png]\n\n\nInput: root = [0,1,2,3,4,3,4]\nOutput: \"dba\"\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/01/30/tree2.png]\n\n\nInput: root = [25,1,3,1,3,0,2]\nOutput: \"adz\"\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2019/02/01/tree3.png]\n\n\nInput: root = [2,2,1,null,1,0,null,0]\nOutput: \"abc\"\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 8500].\n * 0 <= Node.val <= 25",
        "Answer": "",
        "title": "smallest-string-starting-from-leaf"
    },
    {
        "Question": "Cousins in Binary Tree - Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\n\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\n\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png]\n\n\nInput: root = [1,2,3,4], x = 4, y = 3\nOutput: false\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png]\n\n\nInput: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png]\n\n\nInput: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [2, 100].\n * 1 <= Node.val <= 100\n * Each node has a unique value.\n * x != y\n * x and y are exist in the tree.",
        "Answer": "",
        "title": "cousins-in-binary-tree"
    },
    {
        "Question": "Maximum Binary Tree II - A maximum tree is a tree where every node has a value greater than any other value in its subtree.\n\nYou are given the root of a maximum binary tree and an integer val.\n\nJust as in the previous problem [https://leetcode.com/problems/maximum-binary-tree/], the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:\n\n * If a is empty, return null.\n * Otherwise, let a[i] be the largest element of a. Create a root node with the value a[i].\n * The left child of root will be Construct([a[0], a[1], ..., a[i - 1]]).\n * The right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).\n * Return root.\n\nNote that we were not given a directly, only a root node root = Construct(a).\n\nSuppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.\n\nReturn Construct(b).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/08/09/maxtree1.JPG]\n\n\nInput: root = [4,1,3,null,null,2], val = 5\nOutput: [5,4,null,1,3,null,null,2]\nExplanation: a = [1,4,2,3], b = [1,4,2,3,5]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/08/09/maxtree21.JPG]\n\n\nInput: root = [5,2,4,null,1], val = 3\nOutput: [5,2,4,null,1,null,3]\nExplanation: a = [2,1,5,4], b = [2,1,5,4,3]\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/08/09/maxtree3.JPG]\n\n\nInput: root = [5,2,3,null,1], val = 4\nOutput: [5,2,4,null,1,3]\nExplanation: a = [2,1,5,3], b = [2,1,5,3,4]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 100].\n * 1 <= Node.val <= 100\n * All the values of the tree are unique.\n * 1 <= val <= 100",
        "Answer": "",
        "title": "maximum-binary-tree-ii"
    },
    {
        "Question": "Two Sum - Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\n\nExample 2:\n\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\n\nExample 3:\n\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 104\n * -109 <= nums[i] <= 109\n * -109 <= target <= 109\n * Only one valid answer exists.\n\n \n\nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
        "Answer": "",
        "title": "two-sum"
    },
    {
        "Question": "Longest Substring Without Repeating Characters - Given a string s, find the length of the longest substring without duplicate characters.\n\n \n\nExample 1:\n\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\n\nExample 2:\n\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\n\nExample 3:\n\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n\n \n\nConstraints:\n\n * 0 <= s.length <= 5 * 104\n * s consists of English letters, digits, symbols and spaces.",
        "Answer": "",
        "title": "longest-substring-without-repeating-characters"
    },
    {
        "Question": "Substring with Concatenation of All Words - You are given a string s and an array of strings words. All the strings of words are of the same length.\n\nA concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.\n\n * For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated string because it is not the concatenation of any permutation of words.\n\nReturn an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n\n \n\nExample 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n\nOutput: [0,9]\n\nExplanation:\n\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n\nOutput: []\n\nExplanation:\n\nThere is no concatenated substring.\n\nExample 3:\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n\nOutput: [6,9,12]\n\nExplanation:\n\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"].\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"].\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"].\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * 1 <= words.length <= 5000\n * 1 <= words[i].length <= 30\n * s and words[i] consist of lowercase English letters.",
        "Answer": "",
        "title": "substring-with-concatenation-of-all-words"
    },
    {
        "Question": "Valid Sudoku - Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n 1. Each row must contain the digits 1-9 without repetition.\n 2. Each column must contain the digits 1-9 without repetition.\n 3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nNote:\n\n * A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n * Only the filled cells need to be validated according to the mentioned rules.\n\n \n\nExample 1:\n\n[https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png]\n\n\nInput: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n\n\nExample 2:\n\n\nInput: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n\n\n \n\nConstraints:\n\n * board.length == 9\n * board[i].length == 9\n * board[i][j] is a digit 1-9 or '.'.",
        "Answer": "",
        "title": "valid-sudoku"
    },
    {
        "Question": "Group Anagrams - Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n\n \n\nExample 1:\n\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n\nExplanation:\n\n * There is no string in strs that can be rearranged to form \"bat\".\n * The strings \"nat\" and \"tan\" are anagrams as they can be rearranged to form each other.\n * The strings \"ate\", \"eat\", and \"tea\" are anagrams as they can be rearranged to form each other.\n\nExample 2:\n\nInput: strs = [\"\"]\n\nOutput: [[\"\"]]\n\nExample 3:\n\nInput: strs = [\"a\"]\n\nOutput: [[\"a\"]]\n\n \n\nConstraints:\n\n * 1 <= strs.length <= 104\n * 0 <= strs[i].length <= 100\n * strs[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "group-anagrams"
    },
    {
        "Question": "Minimum Window Substring - Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n\nThe testcases will be generated such that the answer is unique.\n\n \n\nExample 1:\n\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\n\nExample 2:\n\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\n\nExample 3:\n\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n\n\n \n\nConstraints:\n\n * m == s.length\n * n == t.length\n * 1 <= m, n <= 105\n * s and t consist of uppercase and lowercase English letters.\n\n \n\nFollow up: Could you find an algorithm that runs in O(m + n) time?",
        "Answer": "",
        "title": "minimum-window-substring"
    },
    {
        "Question": "Max Points on a Line - Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg]\n\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg]\n\n\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= points.length <= 300\n * points[i].length == 2\n * -104 <= xi, yi <= 104\n * All the points are unique.",
        "Answer": "",
        "title": "max-points-on-a-line"
    },
    {
        "Question": "Repeated DNA Sequences - The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\n * For example, \"ACGAATTCCG\" is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\n\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n\n \n\nExample 1:\n\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n\n\nExample 2:\n\nInput: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is either 'A', 'C', 'G', or 'T'.",
        "Answer": "",
        "title": "repeated-dna-sequences"
    },
    {
        "Question": "Happy Number - Write an algorithm to determine if a number n is happy.\n\nA happy number is a number defined by the following process:\n\n * Starting with any positive integer, replace the number by the sum of the squares of its digits.\n * Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n * Those numbers for which this process ends in 1 are happy.\n\nReturn true if n is a happy number, and false if not.\n\n \n\nExample 1:\n\n\nInput: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n\n\nExample 2:\n\n\nInput: n = 2\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "happy-number"
    },
    {
        "Question": "Count Primes - Given an integer n, return the number of prime numbers that are strictly less than n.\n\n \n\nExample 1:\n\n\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\n\nExample 2:\n\n\nInput: n = 0\nOutput: 0\n\n\nExample 3:\n\n\nInput: n = 1\nOutput: 0\n\n\n \n\nConstraints:\n\n * 0 <= n <= 5 * 106",
        "Answer": "",
        "title": "count-primes"
    },
    {
        "Question": "Isomorphic Strings - Given two strings s and t, determine if they are isomorphic.\n\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\n\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\n \n\nExample 1:\n\nInput: s = \"egg\", t = \"add\"\n\nOutput: true\n\nExplanation:\n\nThe strings s and t can be made identical by:\n\n * Mapping 'e' to 'a'.\n * Mapping 'g' to 'd'.\n\nExample 2:\n\nInput: s = \"foo\", t = \"bar\"\n\nOutput: false\n\nExplanation:\n\nThe strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.\n\nExample 3:\n\nInput: s = \"paper\", t = \"title\"\n\nOutput: true\n\n \n\nConstraints:\n\n * 1 <= s.length <= 5 * 104\n * t.length == s.length\n * s and t consist of any valid ascii character.",
        "Answer": "",
        "title": "isomorphic-strings"
    },
    {
        "Question": "Contains Duplicate - Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n\n \n\nExample 1:\n\nInput: nums = [1,2,3,1]\n\nOutput: true\n\nExplanation:\n\nThe element 1 occurs at the indices 0 and 3.\n\nExample 2:\n\nInput: nums = [1,2,3,4]\n\nOutput: false\n\nExplanation:\n\nAll elements are distinct.\n\nExample 3:\n\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\n\nOutput: true\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -109 <= nums[i] <= 109",
        "Answer": "",
        "title": "contains-duplicate"
    },
    {
        "Question": "Contains Duplicate II - Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n\n\nExample 2:\n\n\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n\n\nExample 3:\n\n\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -109 <= nums[i] <= 109\n * 0 <= k <= 105",
        "Answer": "",
        "title": "contains-duplicate-ii"
    },
    {
        "Question": "Word Pattern - Given a pattern and a string s, find if s follows the same pattern.\n\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:\n\n * Each letter in pattern maps to exactly one unique word in s.\n * Each unique word in s maps to exactly one letter in pattern.\n * No two letters map to the same word, and no two words map to the same letter.\n\n \n\nExample 1:\n\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\n\nOutput: true\n\nExplanation:\n\nThe bijection can be established as:\n\n * 'a' maps to \"dog\".\n * 'b' maps to \"cat\".\n\nExample 2:\n\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\n\nOutput: false\n\nExample 3:\n\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\n\nOutput: false\n\n \n\nConstraints:\n\n * 1 <= pattern.length <= 300\n * pattern contains only lower-case English letters.\n * 1 <= s.length <= 3000\n * s contains only lowercase English letters and spaces ' '.\n * s does not contain any leading or trailing spaces.\n * All the words in s are separated by a single space.",
        "Answer": "",
        "title": "word-pattern"
    },
    {
        "Question": "Bulls and Cows - You are playing the Bulls and Cows [https://en.wikipedia.org/wiki/Bulls_and_Cows] game with your friend.\n\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\n * The number of \"bulls\", which are digits in the guess that are in the correct position.\n * The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number secret and your friend's guess guess, return the hint for your friend's guess.\n\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n\n \n\nExample 1:\n\n\nInput: secret = \"1807\", guess = \"7810\"\nOutput: \"1A3B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\"\n\nExample 2:\n\n\nInput: secret = \"1123\", guess = \"0111\"\nOutput: \"1A1B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n\n\n \n\nConstraints:\n\n * 1 <= secret.length, guess.length <= 1000\n * secret.length == guess.length\n * secret and guess consist of digits only.",
        "Answer": "",
        "title": "bulls-and-cows"
    },
    {
        "Question": "Palindrome Pairs - You are given a 0-indexed array of unique strings words.\n\nA palindrome pair is a pair of integers (i, j) such that:\n\n * 0 <= i, j < words.length,\n * i != j, and\n * words[i] + words[j] (the concatenation of the two strings) is a palindrome.\n\nReturn an array of all the palindrome pairs of words.\n\nYou must write an algorithm with O(sum of words[i].length) runtime complexity.\n\n \n\nExample 1:\n\n\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n\n\nExample 2:\n\n\nInput: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\n\n\nExample 3:\n\n\nInput: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"a\",\"a\"]\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 5000\n * 0 <= words[i].length <= 300\n * words[i] consists of lowercase English letters.",
        "Answer": "",
        "title": "palindrome-pairs"
    },
    {
        "Question": "First Unique Character in a String - Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\n \n\nExample 1:\n\nInput: s = \"leetcode\"\n\nOutput: 0\n\nExplanation:\n\nThe character 'l' at index 0 is the first character that does not occur at any other index.\n\nExample 2:\n\nInput: s = \"loveleetcode\"\n\nOutput: 2\n\nExample 3:\n\nInput: s = \"aabb\"\n\nOutput: -1\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of only lowercase English letters.",
        "Answer": "",
        "title": "first-unique-character-in-a-string"
    },
    {
        "Question": "Longest Absolute File Path - Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n\n[https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg]\n\nHere, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\n\nIn text form, it looks like this (with ⟶ representing the tab character):\n\n\ndir\n⟶ subdir1\n⟶ ⟶ file1.ext\n⟶ ⟶ subsubdir1\n⟶ subdir2\n⟶ ⟶ subsubdir2\n⟶ ⟶ ⟶ file2.ext\n\n\nIf we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\n\nEvery file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\n\nGiven a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.\n\nNote that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg]\n\n\nInput: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\nOutput: 20\nExplanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg]\n\n\nInput: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\nOutput: 32\nExplanation: We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file.\n\n\nExample 3:\n\n\nInput: input = \"a\"\nOutput: 0\nExplanation: We do not have any files, just a single directory named \"a\".\n\n\n \n\nConstraints:\n\n * 1 <= input.length <= 104\n * input may contain lowercase or uppercase English letters, a new line character '\\n', a tab character '\\t', a dot '.', a space ' ', and digits.\n * All file and directory names have positive length.",
        "Answer": "",
        "title": "longest-absolute-file-path"
    },
    {
        "Question": "Longest Palindrome - Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome.\n\n \n\nExample 1:\n\n\nInput: s = \"abccccdd\"\nOutput: 7\nExplanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n\n\nExample 2:\n\n\nInput: s = \"a\"\nOutput: 1\nExplanation: The longest palindrome that can be built is \"a\", whose length is 1.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 2000\n * s consists of lowercase and/or uppercase English letters only.",
        "Answer": "",
        "title": "longest-palindrome"
    },
    {
        "Question": "Find All Anagrams in a String - Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n\n\nExample 2:\n\n\nInput: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length, p.length <= 3 * 104\n * s and p consist of lowercase English letters.",
        "Answer": "",
        "title": "find-all-anagrams-in-a-string"
    },
    {
        "Question": "Number of Boomerangs - You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\n\nReturn the number of boomerangs.\n\n \n\nExample 1:\n\n\nInput: points = [[0,0],[1,0],[2,0]]\nOutput: 2\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n\n\nExample 2:\n\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 2\n\n\nExample 3:\n\n\nInput: points = [[1,1]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == points.length\n * 1 <= n <= 500\n * points[i].length == 2\n * -104 <= xi, yi <= 104\n * All the points are unique.",
        "Answer": "",
        "title": "number-of-boomerangs"
    },
    {
        "Question": "4Sum II - Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\n\n * 0 <= i, j, k, l < n\n * nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\nOutput: 2\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n\n\nExample 2:\n\n\nInput: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == nums1.length\n * n == nums2.length\n * n == nums3.length\n * n == nums4.length\n * 1 <= n <= 200\n * -228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228",
        "Answer": "",
        "title": "4sum-ii"
    },
    {
        "Question": "Matchsticks to Square - You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n\nReturn true if you can make this square and false otherwise.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg]\n\n\nInput: matchsticks = [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n\n\nExample 2:\n\n\nInput: matchsticks = [3,3,3,3,4]\nOutput: false\nExplanation: You cannot find a way to form a square with all the matchsticks.\n\n\n \n\nConstraints:\n\n * 1 <= matchsticks.length <= 15\n * 1 <= matchsticks[i] <= 108",
        "Answer": "",
        "title": "matchsticks-to-square"
    },
    {
        "Question": "Continuous Subarray Sum - Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\n\nA good subarray is a subarray where:\n\n * its length is at least two, and\n * the sum of the elements of the subarray is a multiple of k.\n\nNote that:\n\n * A subarray is a contiguous part of the array.\n * An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n\n \n\nExample 1:\n\n\nInput: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n\n\nExample 2:\n\n\nInput: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n\n\nExample 3:\n\n\nInput: nums = [23,2,6,4,7], k = 13\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 0 <= nums[i] <= 109\n * 0 <= sum(nums[i]) <= 231 - 1\n * 1 <= k <= 231 - 1",
        "Answer": "",
        "title": "continuous-subarray-sum"
    },
    {
        "Question": "K-diff Pairs in an Array - Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\n\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n\n * 0 <= i, j < nums.length\n * i != j\n * |nums[i] - nums[j]| == k\n\nNotice that |val| denotes the absolute value of val.\n\n \n\nExample 1:\n\n\nInput: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n\nExample 3:\n\n\nInput: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -107 <= nums[i] <= 107\n * 0 <= k <= 107",
        "Answer": "",
        "title": "k-diff-pairs-in-an-array"
    },
    {
        "Question": "Brick Wall - There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\n\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2025/01/17/a.png]\n\n\nInput: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\nOutput: 2\n\n\nExample 2:\n\n\nInput: wall = [[1],[1],[1]]\nOutput: 3\n\n\n \n\nConstraints:\n\n * n == wall.length\n * 1 <= n <= 104\n * 1 <= wall[i].length <= 104\n * 1 <= sum(wall[i].length) <= 2 * 104\n * sum(wall[i]) is the same for each row i.\n * 1 <= wall[i][j] <= 231 - 1",
        "Answer": "",
        "title": "brick-wall"
    },
    {
        "Question": "Subarray Sum Equals K - Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.\n\nA subarray is a contiguous non-empty sequence of elements within an array.\n\n \n\nExample 1:\n\nInput: nums = [1,1,1], k = 2\nOutput: 2\n\n\nExample 2:\n\nInput: nums = [1,2,3], k = 3\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * -1000 <= nums[i] <= 1000\n * -107 <= k <= 107",
        "Answer": "",
        "title": "subarray-sum-equals-k"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "array-partition-i"
    },
    {
        "Question": "Distribute Candies - Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\n\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\n\n \n\nExample 1:\n\n\nInput: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n\n\nExample 2:\n\n\nInput: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n\n\nExample 3:\n\n\nInput: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n\n\n \n\nConstraints:\n\n * n == candyType.length\n * 2 <= n <= 104\n * n is even.\n * -105 <= candyType[i] <= 105",
        "Answer": "",
        "title": "distribute-candies"
    },
    {
        "Question": "Longest Harmonious Subsequence - We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\n\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\n\n \n\nExample 1:\n\nInput: nums = [1,3,2,2,5,2,3,7]\n\nOutput: 5\n\nExplanation:\n\nThe longest harmonious subsequence is [3,2,2,2,3].\n\nExample 2:\n\nInput: nums = [1,2,3,4]\n\nOutput: 2\n\nExplanation:\n\nThe longest harmonious subsequences are [1,2], [2,3], and [3,4], all of which have a length of 2.\n\nExample 3:\n\nInput: nums = [1,1,1,1]\n\nOutput: 0\n\nExplanation:\n\nNo harmonic subsequence exists.\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * -109 <= nums[i] <= 109",
        "Answer": "",
        "title": "longest-harmonious-subsequence"
    },
    {
        "Question": "Minimum Index Sum of Two Lists - Given two arrays of strings list1 and list2, find the common strings with the least index sum.\n\nA common string is a string that appeared in both list1 and list2.\n\nA common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.\n\nReturn all the common strings with the least index sum. Return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\nOutput: [\"Shogun\"]\nExplanation: The only common string is \"Shogun\".\n\n\nExample 2:\n\n\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\nOutput: [\"Shogun\"]\nExplanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1.\n\n\nExample 3:\n\n\nInput: list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]\nOutput: [\"sad\",\"happy\"]\nExplanation: There are three common strings:\n\"happy\" with index sum = (0 + 1) = 1.\n\"sad\" with index sum = (1 + 0) = 1.\n\"good\" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are \"sad\" and \"happy\".\n\n\n \n\nConstraints:\n\n * 1 <= list1.length, list2.length <= 1000\n * 1 <= list1[i].length, list2[i].length <= 30\n * list1[i] and list2[i] consist of spaces ' ' and English letters.\n * All the strings of list1 are unique.\n * All the strings of list2 are unique.\n * There is at least a common string between list1 and list2.",
        "Answer": "",
        "title": "minimum-index-sum-of-two-lists"
    },
    {
        "Question": "Find Duplicate File in System - Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.\n\nA group of duplicate files consists of at least two files that have the same content.\n\nA single directory info string in the input list has the following format:\n\n * \"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"\n\nIt means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory \"root/d1/d2/.../dm\". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.\n\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n\n * \"directory_path/file_name.txt\"\n\n \n\nExample 1:\n\nInput: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n\n\nExample 2:\n\nInput: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n\n\n \n\nConstraints:\n\n * 1 <= paths.length <= 2 * 104\n * 1 <= paths[i].length <= 3000\n * 1 <= sum(paths[i].length) <= 5 * 105\n * paths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '.\n * You may assume no files or directories share the same name in the same directory.\n * You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.\n\n \n\nFollow up:\n\n * Imagine you are given a real file system, how will you search files? DFS or BFS?\n * If the file content is very large (GB level), how will you modify your solution?\n * If you can only read the file by 1kb each time, how will you modify your solution?\n * What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?\n * How to make sure the duplicated files you find are not false positive?",
        "Answer": "",
        "title": "find-duplicate-file-in-system"
    },
    {
        "Question": "Accounts Merge - Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\n\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\n\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\n\n \n\nExample 1:\n\n\nInput: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nOutput: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nExplanation:\nThe first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\n\n\nExample 2:\n\n\nInput: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\nOutput: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\n\n\n \n\nConstraints:\n\n * 1 <= accounts.length <= 1000\n * 2 <= accounts[i].length <= 10\n * 1 <= accounts[i][j].length <= 30\n * accounts[i][0] consists of English letters.\n * accounts[i][j] (for j > 0) is a valid email.",
        "Answer": "",
        "title": "accounts-merge"
    },
    {
        "Question": "Sentence Similarity - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "sentence-similarity"
    },
    {
        "Question": "Sentence Similarity II - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "sentence-similarity-ii"
    },
    {
        "Question": "Shortest Completing Word - Given a string licensePlate and an array of strings words, find the shortest completing word in words.\n\nA completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\n\nFor example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\n\nReturn the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.\n\n \n\nExample 1:\n\n\nInput: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\nOutput: \"steps\"\nExplanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer.\n\n\nExample 2:\n\n\nInput: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\nOutput: \"pest\"\nExplanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.\n\n\n \n\nConstraints:\n\n * 1 <= licensePlate.length <= 7\n * licensePlate contains digits, letters (uppercase or lowercase), or space ' '.\n * 1 <= words.length <= 1000\n * 1 <= words[i].length <= 15\n * words[i] consists of lower case English letters.",
        "Answer": "",
        "title": "shortest-completing-word"
    },
    {
        "Question": "Find Anagram Mappings - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "find-anagram-mappings"
    },
    {
        "Question": "Jewels and Stones - You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\n\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n\n \n\nExample 1:\n\nInput: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3\n\n\nExample 2:\n\nInput: jewels = \"z\", stones = \"ZZ\"\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= jewels.length, stones.length <= 50\n * jewels and stones consist of only English letters.\n * All the characters of jewels are unique.",
        "Answer": "",
        "title": "jewels-and-stones"
    },
    {
        "Question": "Subdomain Visit Count - A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\" and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.\n\nA count-paired domain is a domain that has one of the two formats \"rep d1.d2.d3\" or \"rep d1.d2\" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.\n\n * For example, \"9001 discuss.leetcode.com\" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.\n\nGiven an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: cpdomains = [\"9001 discuss.leetcode.com\"]\nOutput: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]\nExplanation: We only have one website domain: \"discuss.leetcode.com\".\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.\n\n\nExample 2:\n\n\nInput: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\nOutput: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\nExplanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\n\n\n \n\nConstraints:\n\n * 1 <= cpdomain.length <= 100\n * 1 <= cpdomain[i].length <= 100\n * cpdomain[i] follows either the \"repi d1i.d2i.d3i\" format or the \"repi d1i.d2i\" format.\n * repi is an integer in the range [1, 104].\n * d1i, d2i, and d3i consist of lowercase English letters.",
        "Answer": "",
        "title": "subdomain-visit-count"
    },
    {
        "Question": "Card Flipping Game - You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\n\nAfter flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.\n\nReturn the minimum possible good integer after flipping the cards. If there are no good integers, return 0.\n\n \n\nExample 1:\n\n\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\nOutput: 2\nExplanation:\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.\n\n\nExample 2:\n\n\nInput: fronts = [1], backs = [1]\nOutput: 0\nExplanation:\nThere are no good integers no matter how we flip the cards, so we return 0.\n\n\n \n\nConstraints:\n\n * n == fronts.length == backs.length\n * 1 <= n <= 1000\n * 1 <= fronts[i], backs[i] <= 2000",
        "Answer": "",
        "title": "card-flipping-game"
    },
    {
        "Question": "Friends Of Appropriate Ages - There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.\n\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:\n\n * age[y] <= 0.5 * age[x] + 7\n * age[y] > age[x]\n * age[y] > 100 && age[x] < 100\n\nOtherwise, x will send a friend request to y.\n\nNote that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\n\nReturn the total number of friend requests made.\n\n \n\nExample 1:\n\n\nInput: ages = [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.\n\n\nExample 2:\n\n\nInput: ages = [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\n\n\nExample 3:\n\n\nInput: ages = [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\n\n \n\nConstraints:\n\n * n == ages.length\n * 1 <= n <= 2 * 104\n * 1 <= ages[i] <= 120",
        "Answer": "",
        "title": "friends-of-appropriate-ages"
    },
    {
        "Question": "Reordered Power of 2 - You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n\nReturn true if and only if we can do this so that the resulting number is a power of two.\n\n \n\nExample 1:\n\n\nInput: n = 1\nOutput: true\n\n\nExample 2:\n\n\nInput: n = 10\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109",
        "Answer": "",
        "title": "reordered-power-of-2"
    },
    {
        "Question": "Length of Longest Fibonacci Subsequence - A sequence x1, x2, ..., xn is Fibonacci-like if:\n\n * n >= 3\n * xi + xi+1 == xi+2 for all i + 2 <= n\n\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\n\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].\n\n \n\nExample 1:\n\n\nInput: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].\n\nExample 2:\n\n\nInput: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].\n\n \n\nConstraints:\n\n * 3 <= arr.length <= 1000\n * 1 <= arr[i] < arr[i + 1] <= 109",
        "Answer": "",
        "title": "length-of-longest-fibonacci-subsequence"
    },
    {
        "Question": "Prison Cells After N Days - There are 8 prison cells in a row and each cell is either occupied or vacant.\n\nEach day, whether the cell is occupied or vacant changes according to the following rules:\n\n * If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\n * Otherwise, it becomes vacant.\n\nNote that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\n\nYou are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.\n\nReturn the state of the prison after n days (i.e., n such changes described above).\n\n \n\nExample 1:\n\n\nInput: cells = [0,1,0,1,1,0,0,1], n = 7\nOutput: [0,0,1,1,0,0,0,0]\nExplanation: The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n\n\nExample 2:\n\n\nInput: cells = [1,0,0,1,0,0,1,0], n = 1000000000\nOutput: [0,0,1,1,1,1,1,0]\n\n\n \n\nConstraints:\n\n * cells.length == 8\n * cells[i] is either 0 or 1.\n * 1 <= n <= 109",
        "Answer": "",
        "title": "prison-cells-after-n-days"
    },
    {
        "Question": "Vowel Spellchecker - Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.\n\nFor a given query word, the spell checker handles two categories of spelling mistakes:\n\n * Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.\n   * Example: wordlist = [\"yellow\"], query = \"YellOw\": correct = \"yellow\"\n   * Example: wordlist = [\"Yellow\"], query = \"yellow\": correct = \"Yellow\"\n   * Example: wordlist = [\"yellow\"], query = \"yellow\": correct = \"yellow\"\n * Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.\n   * Example: wordlist = [\"YellOw\"], query = \"yollow\": correct = \"YellOw\"\n   * Example: wordlist = [\"YellOw\"], query = \"yeellow\": correct = \"\" (no match)\n   * Example: wordlist = [\"YellOw\"], query = \"yllw\": correct = \"\" (no match)\n\nIn addition, the spell checker operates under the following precedence rules:\n\n * When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.\n * When the query matches a word up to capitlization, you should return the first such match in the wordlist.\n * When the query matches a word up to vowel errors, you should return the first such match in the wordlist.\n * If the query has no matches in the wordlist, you should return the empty string.\n\nGiven some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].\n\n \n\nExample 1:\n\nInput: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\nOutput: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]\n\n\nExample 2:\n\nInput: wordlist = [\"yellow\"], queries = [\"YellOw\"]\nOutput: [\"yellow\"]\n\n\n \n\nConstraints:\n\n * 1 <= wordlist.length, queries.length <= 5000\n * 1 <= wordlist[i].length, queries[i].length <= 7\n * wordlist[i] and queries[i] consist only of only English letters.",
        "Answer": "",
        "title": "vowel-spellchecker"
    },
    {
        "Question": "Subarray Sums Divisible by K - Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\n\nA subarray is a contiguous part of an array.\n\n \n\nExample 1:\n\n\nInput: nums = [4,5,0,-2,-3,1], k = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n\n\nExample 2:\n\n\nInput: nums = [5], k = 9\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * -104 <= nums[i] <= 104\n * 2 <= k <= 104",
        "Answer": "",
        "title": "subarray-sums-divisible-by-k"
    },
    {
        "Question": "Triples with Bitwise AND Equal To Zero - Given an integer array nums, return the number of AND triples.\n\nAn AND triple is a triple of indices (i, j, k) such that:\n\n * 0 <= i < nums.length\n * 0 <= j < nums.length\n * 0 <= k < nums.length\n * nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.\n\n \n\nExample 1:\n\n\nInput: nums = [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2\n\n\nExample 2:\n\n\nInput: nums = [0,0,0]\nOutput: 27\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 0 <= nums[i] < 216",
        "Answer": "",
        "title": "triples-with-bitwise-and-equal-to-zero"
    },
    {
        "Question": "Reverse Integer - Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\n \n\nExample 1:\n\n\nInput: x = 123\nOutput: 321\n\n\nExample 2:\n\n\nInput: x = -123\nOutput: -321\n\n\nExample 3:\n\n\nInput: x = 120\nOutput: 21\n\n\n \n\nConstraints:\n\n * -231 <= x <= 231 - 1",
        "Answer": "",
        "title": "reverse-integer"
    },
    {
        "Question": "Palindrome Number - Given an integer x, return true if x is a palindrome, and false otherwise.\n\n \n\nExample 1:\n\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n\n\nExample 2:\n\n\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\n\nExample 3:\n\n\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n\n \n\nConstraints:\n\n * -231 <= x <= 231 - 1\n\n \n\nFollow up: Could you solve it without converting the integer to a string?",
        "Answer": "",
        "title": "palindrome-number"
    },
    {
        "Question": "Integer to Roman - Seven different symbols represent Roman numerals with the following values:\n\nSymbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000\n\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\n\n * If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\n * If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\n * Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.\n\nGiven an integer, convert it to a Roman numeral.\n\n \n\nExample 1:\n\nInput: num = 3749\n\nOutput: \"MMMDCCXLIX\"\n\nExplanation:\n\n\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n\n\nExample 2:\n\nInput: num = 58\n\nOutput: \"LVIII\"\n\nExplanation:\n\n\n50 = L\n 8 = VIII\n\n\nExample 3:\n\nInput: num = 1994\n\nOutput: \"MCMXCIV\"\n\nExplanation:\n\n\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n\n\n \n\nConstraints:\n\n * 1 <= num <= 3999",
        "Answer": "",
        "title": "integer-to-roman"
    },
    {
        "Question": "Roman to Integer - Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n * I can be placed before V (5) and X (10) to make 4 and 9. \n * X can be placed before L (50) and C (100) to make 40 and 90. \n * C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\n \n\nExample 1:\n\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\n\nExample 2:\n\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\n\nExample 3:\n\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 15\n * s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\n * It is guaranteed that s is a valid roman numeral in the range [1, 3999].",
        "Answer": "",
        "title": "roman-to-integer"
    },
    {
        "Question": "Divide Two Integers - Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n\nReturn the quotient after dividing dividend by divisor.\n\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n\n \n\nExample 1:\n\n\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n\n\nExample 2:\n\n\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n\n\n \n\nConstraints:\n\n * -231 <= dividend, divisor <= 231 - 1\n * divisor != 0",
        "Answer": "",
        "title": "divide-two-integers"
    },
    {
        "Question": "Pow(x, n) - Implement pow(x, n) [http://www.cplusplus.com/reference/valarray/pow/], which calculates x raised to the power n (i.e., xn).\n\n \n\nExample 1:\n\n\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\n\nExample 2:\n\n\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n\n\nExample 3:\n\n\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\n\n \n\nConstraints:\n\n * -100.0 < x < 100.0\n * -231 <= n <= 231-1\n * n is an integer.\n * Either x is not zero or n > 0.\n * -104 <= xn <= 104",
        "Answer": "",
        "title": "powx-n"
    },
    {
        "Question": "Permutation Sequence - The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n 1. \"123\"\n 2. \"132\"\n 3. \"213\"\n 4. \"231\"\n 5. \"312\"\n 6. \"321\"\n\nGiven n and k, return the kth permutation sequence.\n\n \n\nExample 1:\n\nInput: n = 3, k = 3\nOutput: \"213\"\n\n\nExample 2:\n\nInput: n = 4, k = 9\nOutput: \"2314\"\n\n\nExample 3:\n\nInput: n = 3, k = 1\nOutput: \"123\"\n\n\n \n\nConstraints:\n\n * 1 <= n <= 9\n * 1 <= k <= n!",
        "Answer": "",
        "title": "permutation-sequence"
    },
    {
        "Question": "Valid Number - Given a string s, return whether s is a valid number.\n\nFor example, all the following are valid numbers: \"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\", while the following are not valid numbers: \"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\".\n\nFormally, a valid number is defined using one of the following definitions:\n\n 1. An integer number followed by an optional exponent.\n 2. A decimal number followed by an optional exponent.\n\nAn integer number is defined with an optional sign '-' or '+' followed by digits.\n\nA decimal number is defined with an optional sign '-' or '+' followed by one of the following definitions:\n\n 1. Digits followed by a dot '.'.\n 2. Digits followed by a dot '.' followed by digits.\n 3. A dot '.' followed by digits.\n\nAn exponent is defined with an exponent notation 'e' or 'E' followed by an integer number.\n\nThe digits are defined as one or more digits.\n\n \n\nExample 1:\n\nInput: s = \"0\"\n\nOutput: true\n\nExample 2:\n\nInput: s = \"e\"\n\nOutput: false\n\nExample 3:\n\nInput: s = \".\"\n\nOutput: false\n\n \n\nConstraints:\n\n * 1 <= s.length <= 20\n * s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.",
        "Answer": "",
        "title": "valid-number"
    },
    {
        "Question": "Gray Code - An n-bit gray code sequence is a sequence of 2n integers where:\n\n * Every integer is in the inclusive range [0, 2n - 1],\n * The first integer is 0,\n * An integer appears no more than once in the sequence,\n * The binary representation of every pair of adjacent integers differs by exactly one bit, and\n * The binary representation of the first and last integers differs by exactly one bit.\n\nGiven an integer n, return any valid n-bit gray code sequence.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: [0,1]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 16",
        "Answer": "",
        "title": "gray-code"
    },
    {
        "Question": "Fraction to Recurring Decimal - Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\n\nIf the fractional part is repeating, enclose the repeating part in parentheses.\n\nIf multiple answers are possible, return any of them.\n\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n\n \n\nExample 1:\n\n\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"\n\n\nExample 2:\n\n\nInput: numerator = 2, denominator = 1\nOutput: \"2\"\n\n\nExample 3:\n\n\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"\n\n\n \n\nConstraints:\n\n * -231 <= numerator, denominator <= 231 - 1\n * denominator != 0",
        "Answer": "",
        "title": "fraction-to-recurring-decimal"
    },
    {
        "Question": "Excel Sheet Column Title - Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\n\nFor example:\n\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\n \n\nExample 1:\n\n\nInput: columnNumber = 1\nOutput: \"A\"\n\n\nExample 2:\n\n\nInput: columnNumber = 28\nOutput: \"AB\"\n\n\nExample 3:\n\n\nInput: columnNumber = 701\nOutput: \"ZY\"\n\n\n \n\nConstraints:\n\n * 1 <= columnNumber <= 231 - 1",
        "Answer": "",
        "title": "excel-sheet-column-title"
    },
    {
        "Question": "Excel Sheet Column Number - Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\n \n\nExample 1:\n\n\nInput: columnTitle = \"A\"\nOutput: 1\n\n\nExample 2:\n\n\nInput: columnTitle = \"AB\"\nOutput: 28\n\n\nExample 3:\n\n\nInput: columnTitle = \"ZY\"\nOutput: 701\n\n\n \n\nConstraints:\n\n * 1 <= columnTitle.length <= 7\n * columnTitle consists only of uppercase English letters.\n * columnTitle is in the range [\"A\", \"FXSHRXW\"].",
        "Answer": "",
        "title": "excel-sheet-column-number"
    },
    {
        "Question": "Factorial Trailing Zeroes - Given an integer n, return the number of trailing zeroes in n!.\n\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\n\n \n\nExample 1:\n\n\nInput: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.\n\n\nExample 2:\n\n\nInput: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.\n\n\nExample 3:\n\n\nInput: n = 0\nOutput: 0\n\n\n \n\nConstraints:\n\n * 0 <= n <= 104\n\n \n\nFollow up: Could you write a solution that works in logarithmic time complexity?",
        "Answer": "",
        "title": "factorial-trailing-zeroes"
    },
    {
        "Question": "Rectangle Area - Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\n\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\n\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n\n \n\nExample 1:\n\nRectangle Area [https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png]\n\n\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n\n\nExample 2:\n\n\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16\n\n\n \n\nConstraints:\n\n * -104 <= ax1 <= ax2 <= 104\n * -104 <= ay1 <= ay2 <= 104\n * -104 <= bx1 <= bx2 <= 104\n * -104 <= by1 <= by2 <= 104",
        "Answer": "",
        "title": "rectangle-area"
    },
    {
        "Question": "Number of Digit One - Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n\n \n\nExample 1:\n\n\nInput: n = 13\nOutput: 6\n\n\nExample 2:\n\n\nInput: n = 0\nOutput: 0\n\n\n \n\nConstraints:\n\n * 0 <= n <= 109",
        "Answer": "",
        "title": "number-of-digit-one"
    },
    {
        "Question": "Add Digits - Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n\n \n\nExample 1:\n\n\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.\n\n\nExample 2:\n\n\nInput: num = 0\nOutput: 0\n\n\n \n\nConstraints:\n\n * 0 <= num <= 231 - 1\n\n \n\nFollow up: Could you do it without any loop/recursion in O(1) runtime?",
        "Answer": "",
        "title": "add-digits"
    },
    {
        "Question": "Ugly Number - An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5.\n\nGiven an integer n, return true if n is an ugly number.\n\n \n\nExample 1:\n\n\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 × 3\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors.\n\n\nExample 3:\n\n\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.\n\n\n \n\nConstraints:\n\n * -231 <= n <= 231 - 1",
        "Answer": "",
        "title": "ugly-number"
    },
    {
        "Question": "Nim Game - You are playing the following Nim Game with your friend:\n\n * Initially, there is a heap of stones on the table.\n * You and your friend will alternate taking turns, and you go first.\n * On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n * The one who removes the last stone is the winner.\n\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n\n \n\nExample 1:\n\n\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: true\n\n\nExample 3:\n\n\nInput: n = 2\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "nim-game"
    },
    {
        "Question": "Bulb Switcher - There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\n\nReturn the number of bulbs that are on after n rounds.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg]\n\n\nInput: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.\n\nExample 2:\n\n\nInput: n = 0\nOutput: 0\n\n\nExample 3:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 0 <= n <= 109",
        "Answer": "",
        "title": "bulb-switcher"
    },
    {
        "Question": "Power of Three - Given an integer n, return true if it is a power of three. Otherwise, return false.\n\nAn integer n is a power of three, if there exists an integer x such that n == 3x.\n\n \n\nExample 1:\n\n\nInput: n = 27\nOutput: true\nExplanation: 27 = 33\n\n\nExample 2:\n\n\nInput: n = 0\nOutput: false\nExplanation: There is no x where 3x = 0.\n\n\nExample 3:\n\n\nInput: n = -1\nOutput: false\nExplanation: There is no x where 3x = (-1).\n\n\n \n\nConstraints:\n\n * -231 <= n <= 231 - 1\n\n \n\nFollow up: Could you solve it without loops/recursion?",
        "Answer": "",
        "title": "power-of-three"
    },
    {
        "Question": "Self Crossing - You are given an array of integers distance.\n\nYou start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n\nReturn true if your path crosses itself or false if it does not.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2022/12/21/11.jpg]\n\n\nInput: distance = [2,1,1,2]\nOutput: true\nExplanation: The path crosses itself at the point (0, 1).\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2022/12/21/22.jpg]\n\n\nInput: distance = [1,2,3,4]\nOutput: false\nExplanation: The path does not cross itself at any point.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2022/12/21/33.jpg]\n\n\nInput: distance = [1,1,1,2,1]\nOutput: true\nExplanation: The path crosses itself at the point (0, 0).\n\n\n \n\nConstraints:\n\n * 1 <= distance.length <= 105\n * 1 <= distance[i] <= 105",
        "Answer": "",
        "title": "self-crossing"
    },
    {
        "Question": "Counting Bits - Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n\n\nExample 2:\n\n\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n\n \n\nConstraints:\n\n * 0 <= n <= 105\n\n \n\nFollow up:\n\n * It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\n * Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?",
        "Answer": "",
        "title": "counting-bits"
    },
    {
        "Question": "Integer Break - Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\n\nReturn the maximum product you can get.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 × 1 = 1.\n\n\nExample 2:\n\n\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\n\n\n \n\nConstraints:\n\n * 2 <= n <= 58",
        "Answer": "",
        "title": "integer-break"
    },
    {
        "Question": "Water and Jug Problem - You are given two jugs with capacities x liters and y liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach target using the following operations:\n\n * Fill either jug completely with water.\n * Completely empty either jug.\n * Pour water from one jug into another until the receiving jug is full, or the transferring jug is empty.\n\n \n\nExample 1:\n\nInput: x = 3, y = 5, target = 4\n\nOutput: true\n\nExplanation:\n\nFollow these steps to reach a total of 4 liters:\n\n 1. Fill the 5-liter jug (0, 5).\n 2. Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2).\n 3. Empty the 3-liter jug (0, 2).\n 4. Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0).\n 5. Fill the 5-liter jug again (2, 5).\n 6. Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4).\n 7. Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4).\n\nReference: The Die Hard [https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01] example.\n\nExample 2:\n\nInput: x = 2, y = 6, target = 5\n\nOutput: false\n\nExample 3:\n\nInput: x = 1, y = 2, target = 3\n\nOutput: true\n\nExplanation: Fill both jugs. The total amount of water in both jugs is equal to 3 now.\n\n \n\nConstraints:\n\n * 1 <= x, y, target <= 103",
        "Answer": "",
        "title": "water-and-jug-problem"
    },
    {
        "Question": "Super Pow - Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n\n \n\nExample 1:\n\n\nInput: a = 2, b = [3]\nOutput: 8\n\n\nExample 2:\n\n\nInput: a = 2, b = [1,0]\nOutput: 1024\n\n\nExample 3:\n\n\nInput: a = 1, b = [4,3,3,8,5,2]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= a <= 231 - 1\n * 1 <= b.length <= 2000\n * 0 <= b[i] <= 9\n * b does not contain leading zeros.",
        "Answer": "",
        "title": "super-pow"
    },
    {
        "Question": "Linked List Random Node - Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n\nImplement the Solution class:\n\n * Solution(ListNode head) Initializes the object with the head of the singly-linked list head.\n * int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg]\n\n\nInput\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n\n\n \n\nConstraints:\n\n * The number of nodes in the linked list will be in the range [1, 104].\n * -104 <= Node.val <= 104\n * At most 104 calls will be made to getRandom.\n\n \n\nFollow up:\n\n * What if the linked list is extremely large and its length is unknown to you?\n * Could you solve this efficiently without using extra space?",
        "Answer": "",
        "title": "linked-list-random-node"
    },
    {
        "Question": "Lexicographical Numbers - Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\n\nYou must write an algorithm that runs in O(n) time and uses O(1) extra space. \n\n \n\nExample 1:\n\nInput: n = 13\nOutput: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n\n\nExample 2:\n\nInput: n = 2\nOutput: [1,2]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 5 * 104",
        "Answer": "",
        "title": "lexicographical-numbers"
    },
    {
        "Question": "Elimination Game - You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\n\n * Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n * Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n * Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\nGiven the integer n, return the last number that remains in arr.\n\n \n\nExample 1:\n\n\nInput: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109",
        "Answer": "",
        "title": "elimination-game"
    },
    {
        "Question": "Perfect Rectangle - Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\n\nReturn true if all the rectangles together form an exact cover of a rectangular region.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg]\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg]\n\n\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg]\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.\n\n\n \n\nConstraints:\n\n * 1 <= rectangles.length <= 2 * 104\n * rectangles[i].length == 4\n * -105 <= xi < ai <= 105\n * -105 <= yi < bi <= 105",
        "Answer": "",
        "title": "perfect-rectangle"
    },
    {
        "Question": "Random Pick Index - Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n\nImplement the Solution class:\n\n * Solution(int[] nums) Initializes the object with the array nums.\n * int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n \n\nExample 1:\n\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\n\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * -231 <= nums[i] <= 231 - 1\n * target is an integer from nums.\n * At most 104 calls will be made to pick.",
        "Answer": "",
        "title": "random-pick-index"
    },
    {
        "Question": "Nth Digit - Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].\n\n \n\nExample 1:\n\n\nInput: n = 3\nOutput: 3\n\n\nExample 2:\n\n\nInput: n = 11\nOutput: 0\nExplanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "nth-digit"
    },
    {
        "Question": "Arithmetic Slices - An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\n * For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\n\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\n\nA subarray is a contiguous subsequence of the array.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n\n\nExample 2:\n\n\nInput: nums = [1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5000\n * -1000 <= nums[i] <= 1000",
        "Answer": "",
        "title": "arithmetic-slices"
    },
    {
        "Question": "Reconstruct Original Digits from English - Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\n\n \n\nExample 1:\n\nInput: s = \"owoztneoer\"\nOutput: \"012\"\n\n\nExample 2:\n\nInput: s = \"fviefuro\"\nOutput: \"45\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"].\n * s is guaranteed to be valid.",
        "Answer": "",
        "title": "reconstruct-original-digits-from-english"
    },
    {
        "Question": "Arranging Coins - You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg]\n\n\nInput: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg]\n\n\nInput: n = 8\nOutput: 3\nExplanation: Because the 4th row is incomplete, we return 3.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "arranging-coins"
    },
    {
        "Question": "Minimum Moves to Equal Array Elements - Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n\nIn one move, you can increment n - 1 elements of the array by 1.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3]\nOutput: 3\nExplanation: Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\n\n\nExample 2:\n\n\nInput: nums = [1,1,1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= nums.length <= 105\n * -109 <= nums[i] <= 109\n * The answer is guaranteed to fit in a 32-bit integer.",
        "Answer": "",
        "title": "minimum-moves-to-equal-array-elements"
    },
    {
        "Question": "Poor Pigs - There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\n\n 1. Choose some live pigs to feed.\n 2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n 3. Wait for minutesToDie minutes. You may not feed any other pigs during this time.\n 4. After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n 5. Repeat this process until you run out of time.\n\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n\n \n\nExample 1:\n\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.\n\n\nExample 2:\n\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n\n\n \n\nConstraints:\n\n * 1 <= buckets <= 1000\n * 1 <= minutesToDie <= minutesToTest <= 100",
        "Answer": "",
        "title": "poor-pigs"
    },
    {
        "Question": "Implement Rand10() Using Rand7() - Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\n\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\n\n \n\nExample 1:\n\nInput: n = 1\nOutput: [2]\n\n\nExample 2:\n\nInput: n = 2\nOutput: [2,8]\n\n\nExample 3:\n\nInput: n = 3\nOutput: [3,8,10]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 105\n\n \n\nFollow up:\n\n * What is the expected value [https://en.wikipedia.org/wiki/Expected_value] for the number of calls to rand7() function?\n * Could you minimize the number of calls to rand7()?",
        "Answer": "",
        "title": "implement-rand10-using-rand7"
    },
    {
        "Question": "Generate Random Point in a Circle - Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\n\nImplement the Solution class:\n\n * Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\n * randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\n\n \n\nExample 1:\n\n\nInput\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n\n\n \n\nConstraints:\n\n * 0 < radius <= 108\n * -107 <= x_center, y_center <= 107\n * At most 3 * 104 calls will be made to randPoint.",
        "Answer": "",
        "title": "generate-random-point-in-a-circle"
    },
    {
        "Question": "Largest Palindrome Product - Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 9\n\n\n \n\nConstraints:\n\n * 1 <= n <= 8",
        "Answer": "",
        "title": "largest-palindrome-product"
    },
    {
        "Question": "Smallest Good Base - Given an integer n represented as a string, return the smallest good base of n.\n\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.\n\n \n\nExample 1:\n\n\nInput: n = \"13\"\nOutput: \"3\"\nExplanation: 13 base 3 is 111.\n\n\nExample 2:\n\n\nInput: n = \"4681\"\nOutput: \"8\"\nExplanation: 4681 base 8 is 11111.\n\n\nExample 3:\n\n\nInput: n = \"1000000000000000000\"\nOutput: \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\n\n\n \n\nConstraints:\n\n * n is an integer in the range [3, 1018].\n * n does not contain any leading zeros.",
        "Answer": "",
        "title": "smallest-good-base"
    },
    {
        "Question": "Construct the Rectangle - A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\n 1. The area of the rectangular web page you designed must equal to the given target area.\n 2. The width W should not be larger than the length L, which means L >= W.\n 3. The difference between length L and width W should be as small as possible.\n\nReturn an array [L, W] where L and W are the length and width of the web page you designed in sequence.\n\n \n\nExample 1:\n\n\nInput: area = 4\nOutput: [2,2]\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n\n\nExample 2:\n\n\nInput: area = 37\nOutput: [37,1]\n\n\nExample 3:\n\n\nInput: area = 122122\nOutput: [427,286]\n\n\n \n\nConstraints:\n\n * 1 <= area <= 107",
        "Answer": "",
        "title": "construct-the-rectangle"
    },
    {
        "Question": "Random Point in Non-overlapping Rectangles - You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n\nNote that an integer point is a point that has integer coordinates.\n\nImplement the Solution class:\n\n * Solution(int[][] rects) Initializes the object with the given rectangles rects.\n * int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/24/lc-pickrandomrec.jpg]\n\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\nOutput\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\nExplanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n\n\n \n\nConstraints:\n\n * 1 <= rects.length <= 100\n * rects[i].length == 4\n * -109 <= ai < xi <= 109\n * -109 <= bi < yi <= 109\n * xi - ai <= 2000\n * yi - bi <= 2000\n * All the rectangles do not overlap.\n * At most 104 calls will be made to pick.",
        "Answer": "",
        "title": "random-point-in-non-overlapping-rectangles"
    },
    {
        "Question": "Base 7 - Given an integer num, return a string of its base 7 representation.\n\n \n\nExample 1:\n\nInput: num = 100\nOutput: \"202\"\n\n\nExample 2:\n\nInput: num = -7\nOutput: \"-10\"\n\n\n \n\nConstraints:\n\n * -107 <= num <= 107",
        "Answer": "",
        "title": "base-7"
    },
    {
        "Question": "Perfect Number - A perfect number [https://en.wikipedia.org/wiki/Perfect_number] is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\n\nGiven an integer n, return true if n is a perfect number, otherwise return false.\n\n \n\nExample 1:\n\n\nInput: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n\n\nExample 2:\n\n\nInput: num = 7\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= num <= 108",
        "Answer": "",
        "title": "perfect-number"
    },
    {
        "Question": "Super Washing Machines - You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\n\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\n\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\n\n \n\nExample 1:\n\n\nInput: machines = [1,0,5]\nOutput: 3\nExplanation:\n1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n3rd move:    2     1 <-- 3    =>    2     2     2\n\n\nExample 2:\n\n\nInput: machines = [0,3,0]\nOutput: 2\nExplanation:\n1st move:    0 <-- 3     0    =>    1     2     0\n2nd move:    1     2 --> 0    =>    1     1     1\n\n\nExample 3:\n\n\nInput: machines = [0,2,0]\nOutput: -1\nExplanation:\nIt's impossible to make all three washing machines have the same number of dresses.\n\n\n \n\nConstraints:\n\n * n == machines.length\n * 1 <= n <= 104\n * 0 <= machines[i] <= 105",
        "Answer": "",
        "title": "super-washing-machines"
    },
    {
        "Question": "Random Flip Matrix - There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\n\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\n\nImplement the Solution class:\n\n * Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.\n * int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\n * void reset() Resets all the values of the matrix to be 0.\n\n \n\nExample 1:\n\n\nInput\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]\nOutput\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n\nExplanation\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n\n\n \n\nConstraints:\n\n * 1 <= m, n <= 104\n * There will be at least one free cell for each call to flip.\n * At most 1000 calls will be made to flip and reset.",
        "Answer": "",
        "title": "random-flip-matrix"
    },
    {
        "Question": "Random Pick with Weight - You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\n\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\n\n * For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).\n\n \n\nExample 1:\n\n\nInput\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput\n[null,0]\n\nExplanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n\n\nExample 2:\n\n\nInput\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput\n[null,1,1,1,1,0]\n\nExplanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n\n\n \n\nConstraints:\n\n * 1 <= w.length <= 104\n * 1 <= w[i] <= 105\n * pickIndex will be called at most 104 times.",
        "Answer": "",
        "title": "random-pick-with-weight"
    },
    {
        "Question": "Complex Number Multiplication - A complex number [https://en.wikipedia.org/wiki/Complex_number] can be represented as a string on the form \"real+imaginaryi\" where:\n\n * real is the real part and is an integer in the range [-100, 100].\n * imaginary is the imaginary part and is an integer in the range [-100, 100].\n * i2 == -1.\n\nGiven two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.\n\n \n\nExample 1:\n\n\nInput: num1 = \"1+1i\", num2 = \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n\n\nExample 2:\n\n\nInput: num1 = \"1+-1i\", num2 = \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n\n\n \n\nConstraints:\n\n * num1 and num2 are valid complex numbers.",
        "Answer": "",
        "title": "complex-number-multiplication"
    },
    {
        "Question": "Optimal Division - You are given an integer array nums. The adjacent integers in nums will perform the float division.\n\n * For example, for nums = [2,3,4], we will evaluate the expression \"2/3/4\".\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\n\nReturn the corresponding expression that has the maximum value in string format.\n\nNote: your expression should not contain redundant parenthesis.\n\n \n\nExample 1:\n\n\nInput: nums = [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant since they do not influence the operation priority.\nSo you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n\n\nExample 2:\n\n\nInput: nums = [2,3,4]\nOutput: \"2/(3/4)\"\nExplanation: (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 10\n * 2 <= nums[i] <= 1000\n * There is only one optimal division for the given input.",
        "Answer": "",
        "title": "optimal-division"
    },
    {
        "Question": "Fraction Addition and Subtraction - Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\n\nThe final result should be an irreducible fraction [https://en.wikipedia.org/wiki/Irreducible_fraction]. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.\n\n \n\nExample 1:\n\n\nInput: expression = \"-1/2+1/2\"\nOutput: \"0/1\"\n\n\nExample 2:\n\n\nInput: expression = \"-1/2+1/2+1/3\"\nOutput: \"1/3\"\n\n\nExample 3:\n\n\nInput: expression = \"1/3-1/2\"\nOutput: \"-1/6\"\n\n\n \n\nConstraints:\n\n * The input string only contains '0' to '9', '/', '+' and '-'. So does the output.\n * Each fraction (input and output) has the format ±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.\n * The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.\n * The number of given fractions will be in the range [1, 10].\n * The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.",
        "Answer": "",
        "title": "fraction-addition-and-subtraction"
    },
    {
        "Question": "Valid Square - Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\n\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\n\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\n\n \n\nExample 1:\n\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: true\n\n\nExample 2:\n\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\nOutput: false\n\n\nExample 3:\n\n\nInput: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\nOutput: true\n\n\n \n\nConstraints:\n\n * p1.length == p2.length == p3.length == p4.length == 2\n * -104 <= xi, yi <= 104",
        "Answer": "",
        "title": "valid-square"
    },
    {
        "Question": "Range Addition II - You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\n\nCount and return the number of maximum integers in the matrix after performing all the operations.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg]\n\n\nInput: m = 3, n = 3, ops = [[2,2],[3,3]]\nOutput: 4\nExplanation: The maximum integer in M is 2, and there are four of it in M. So return 4.\n\n\nExample 2:\n\n\nInput: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\nOutput: 4\n\n\nExample 3:\n\n\nInput: m = 3, n = 3, ops = []\nOutput: 9\n\n\n \n\nConstraints:\n\n * 1 <= m, n <= 4 * 104\n * 0 <= ops.length <= 104\n * ops[i].length == 2\n * 1 <= ai <= m\n * 1 <= bi <= n",
        "Answer": "",
        "title": "range-addition-ii"
    },
    {
        "Question": "Maximum Product of Three Numbers - Given an integer array nums, find three numbers whose product is maximum and return the maximum product.\n\n \n\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 6\n\n\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: 24\n\n\nExample 3:\n\nInput: nums = [-1,-2,-3]\nOutput: -6\n\n\n \n\nConstraints:\n\n * 3 <= nums.length <= 104\n * -1000 <= nums[i] <= 1000",
        "Answer": "",
        "title": "maximum-product-of-three-numbers"
    },
    {
        "Question": "Sum of Square Numbers - Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.\n\n \n\nExample 1:\n\n\nInput: c = 5\nOutput: true\nExplanation: 1 * 1 + 2 * 2 = 5\n\n\nExample 2:\n\n\nInput: c = 3\nOutput: false\n\n\n \n\nConstraints:\n\n * 0 <= c <= 231 - 1",
        "Answer": "",
        "title": "sum-of-square-numbers"
    },
    {
        "Question": "Solve the Equation - Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\n\nIf there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.\n\n \n\nExample 1:\n\n\nInput: equation = \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n\n\nExample 2:\n\n\nInput: equation = \"x=x\"\nOutput: \"Infinite solutions\"\n\n\nExample 3:\n\n\nInput: equation = \"2x=x\"\nOutput: \"x=0\"\n\n\n \n\nConstraints:\n\n * 3 <= equation.length <= 1000\n * equation has exactly one '='.\n * equation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'.\n * The input is generated that if there is a single solution, it will be an integer.",
        "Answer": "",
        "title": "solve-the-equation"
    },
    {
        "Question": "Bulb Switcher II - There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:\n\n * Button 1: Flips the status of all the bulbs.\n * Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).\n * Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).\n * Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).\n\nYou must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.\n\nGiven the two integers n and presses, return the number of different possible statuses after performing all presses button presses.\n\n \n\nExample 1:\n\n\nInput: n = 1, presses = 1\nOutput: 2\nExplanation: Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2\n\n\nExample 2:\n\n\nInput: n = 2, presses = 1\nOutput: 3\nExplanation: Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3\n\n\nExample 3:\n\n\nInput: n = 3, presses = 1\nOutput: 4\nExplanation: Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1000\n * 0 <= presses <= 1000",
        "Answer": "",
        "title": "bulb-switcher-ii"
    },
    {
        "Question": "Self Dividing Numbers - A self-dividing number is a number that is divisible by every digit it contains.\n\n * For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\n\nA self-dividing number is not allowed to contain the digit zero.\n\nGiven two integers left and right, return a list of all the self-dividing numbers in the range [left, right] (both inclusive).\n\n \n\nExample 1:\n\nInput: left = 1, right = 22\nOutput: [1,2,3,4,5,6,7,8,9,11,12,15,22]\n\n\nExample 2:\n\nInput: left = 47, right = 85\nOutput: [48,55,66,77]\n\n\n \n\nConstraints:\n\n * 1 <= left <= right <= 104",
        "Answer": "",
        "title": "self-dividing-numbers"
    },
    {
        "Question": "Reach a Number - You are standing at position 0 on an infinite number line. There is a destination at position target.\n\nYou can make some number of moves numMoves so that:\n\n * On each move, you can either go left or right.\n * During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.\n\nGiven the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.\n\n \n\nExample 1:\n\n\nInput: target = 2\nOutput: 3\nExplanation:\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to -1 (2 steps).\nOn the 3rd move, we step from -1 to 2 (3 steps).\n\n\nExample 2:\n\n\nInput: target = 3\nOutput: 2\nExplanation:\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to 3 (2 steps).\n\n\n \n\nConstraints:\n\n * -109 <= target <= 109\n * target != 0",
        "Answer": "",
        "title": "reach-a-number"
    },
    {
        "Question": "Global and Local Inversions - You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].\n\nThe number of global inversions is the number of the different pairs (i, j) where:\n\n * 0 <= i < j < n\n * nums[i] > nums[j]\n\nThe number of local inversions is the number of indices i where:\n\n * 0 <= i < n - 1\n * nums[i] > nums[i + 1]\n\nReturn true if the number of global inversions is equal to the number of local inversions.\n\n \n\nExample 1:\n\n\nInput: nums = [1,0,2]\nOutput: true\nExplanation: There is 1 global inversion and 1 local inversion.\n\n\nExample 2:\n\n\nInput: nums = [1,2,0]\nOutput: false\nExplanation: There are 2 global inversions and 1 local inversion.\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 105\n * 0 <= nums[i] < n\n * All the integers of nums are unique.\n * nums is a permutation of all the numbers in the range [0, n - 1].",
        "Answer": "",
        "title": "global-and-local-inversions"
    },
    {
        "Question": "K-th Symbol in Grammar - We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\n\n * For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.\n\nGiven two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.\n\n \n\nExample 1:\n\n\nInput: n = 1, k = 1\nOutput: 0\nExplanation: row 1: 0\n\n\nExample 2:\n\n\nInput: n = 2, k = 1\nOutput: 0\nExplanation: \nrow 1: 0\nrow 2: 01\n\n\nExample 3:\n\n\nInput: n = 2, k = 2\nOutput: 1\nExplanation: \nrow 1: 0\nrow 2: 01\n\n\n \n\nConstraints:\n\n * 1 <= n <= 30\n * 1 <= k <= 2n - 1",
        "Answer": "",
        "title": "k-th-symbol-in-grammar"
    },
    {
        "Question": "Reaching Points - Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\n\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).\n\n \n\nExample 1:\n\n\nInput: sx = 1, sy = 1, tx = 3, ty = 5\nOutput: true\nExplanation:\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)\n\n\nExample 2:\n\n\nInput: sx = 1, sy = 1, tx = 2, ty = 2\nOutput: false\n\n\nExample 3:\n\n\nInput: sx = 1, sy = 1, tx = 1, ty = 1\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= sx, sy, tx, ty <= 109",
        "Answer": "",
        "title": "reaching-points"
    },
    {
        "Question": "Rabbits in Forest - There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\n\nGiven the array answers, return the minimum number of rabbits that could be in the forest.\n\n \n\nExample 1:\n\n\nInput: answers = [1,1,2]\nOutput: 5\nExplanation:\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\n\n\nExample 2:\n\n\nInput: answers = [10,10,10]\nOutput: 11\n\n\n \n\nConstraints:\n\n * 1 <= answers.length <= 1000\n * 0 <= answers[i] < 1000",
        "Answer": "",
        "title": "rabbits-in-forest"
    },
    {
        "Question": "Transform to Chessboard - You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.\n\nReturn the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.\n\nA chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/29/chessboard1-grid.jpg]\n\n\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\nOutput: 2\nExplanation: One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/29/chessboard2-grid.jpg]\n\n\nInput: board = [[0,1],[1,0]]\nOutput: 0\nExplanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/06/29/chessboard3-grid.jpg]\n\n\nInput: board = [[1,0],[1,0]]\nOutput: -1\nExplanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.\n\n\n \n\nConstraints:\n\n * n == board.length\n * n == board[i].length\n * 2 <= n <= 30\n * board[i][j] is either 0 or 1.",
        "Answer": "",
        "title": "transform-to-chessboard"
    },
    {
        "Question": "Escape The Ghosts - You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.\n\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\n\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\n\nReturn true if it is possible to escape regardless of how the ghosts move, otherwise return false.\n\n \n\nExample 1:\n\n\nInput: ghosts = [[1,0],[0,3]], target = [0,1]\nOutput: true\nExplanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n\n\nExample 2:\n\n\nInput: ghosts = [[1,0]], target = [2,0]\nOutput: false\nExplanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n\n\nExample 3:\n\n\nInput: ghosts = [[2,0]], target = [1,0]\nOutput: false\nExplanation: The ghost can reach the target at the same time as you.\n\n\n \n\nConstraints:\n\n * 1 <= ghosts.length <= 100\n * ghosts[i].length == 2\n * -104 <= xi, yi <= 104\n * There can be multiple ghosts in the same location.\n * target.length == 2\n * -104 <= xtarget, ytarget <= 104",
        "Answer": "",
        "title": "escape-the-ghosts"
    },
    {
        "Question": "Chalkboard XOR Game - You are given an array of integers nums represents the numbers written on a chalkboard.\n\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\n\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\n\nReturn true if and only if Alice wins the game, assuming both players play optimally.\n\n \n\nExample 1:\n\n\nInput: nums = [1,1,2]\nOutput: false\nExplanation: \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n\n\nExample 2:\n\n\nInput: nums = [0,1]\nOutput: true\n\n\nExample 3:\n\n\nInput: nums = [1,2,3]\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 0 <= nums[i] < 216",
        "Answer": "",
        "title": "chalkboard-xor-game"
    },
    {
        "Question": "Largest Triangle Area - Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png]\n\n\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2.00000\nExplanation: The five points are shown in the above figure. The red triangle is the largest.\n\n\nExample 2:\n\n\nInput: points = [[1,0],[0,0],[0,1]]\nOutput: 0.50000\n\n\n \n\nConstraints:\n\n * 3 <= points.length <= 50\n * -50 <= xi, yi <= 50\n * All the given points are unique.",
        "Answer": "",
        "title": "largest-triangle-area"
    },
    {
        "Question": "Consecutive Numbers Sum - Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\n\n \n\nExample 1:\n\n\nInput: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\n\n\nExample 2:\n\n\nInput: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4\n\n\nExample 3:\n\n\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109",
        "Answer": "",
        "title": "consecutive-numbers-sum"
    },
    {
        "Question": "Rectangle Overlap - An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\n\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\n\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\n\n \n\nExample 1:\n\nInput: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true\n\n\nExample 2:\n\nInput: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false\n\n\nExample 3:\n\nInput: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false\n\n\n \n\nConstraints:\n\n * rec1.length == 4\n * rec2.length == 4\n * -109 <= rec1[i], rec2[i] <= 109\n * rec1 and rec2 represent a valid rectangle with a non-zero area.",
        "Answer": "",
        "title": "rectangle-overlap"
    },
    {
        "Question": "Mirror Reflection - There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\n\nThe square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\n\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\n\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png]\n\n\nInput: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n\n\nExample 2:\n\n\nInput: p = 3, q = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= q <= p <= 1000",
        "Answer": "",
        "title": "mirror-reflection"
    },
    {
        "Question": "Prime Palindrome - Given an integer n, return the smallest prime palindrome greater than or equal to n.\n\nAn integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\n\n * For example, 2, 3, 5, 7, 11, and 13 are all primes.\n\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\n\n * For example, 101 and 12321 are palindromes.\n\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 108].\n\n \n\nExample 1:\n\nInput: n = 6\nOutput: 7\n\n\nExample 2:\n\nInput: n = 8\nOutput: 11\n\n\nExample 3:\n\nInput: n = 13\nOutput: 101\n\n\n \n\nConstraints:\n\n * 1 <= n <= 108",
        "Answer": "",
        "title": "prime-palindrome"
    },
    {
        "Question": "Projection Area of 3D Shapes - You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\n\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\n\nWe view the projection of these cubes onto the xy, yz, and zx planes.\n\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\n\nReturn the total area of all three projections.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png]\n\n\nInput: grid = [[1,2],[3,4]]\nOutput: 17\nExplanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\n\n\nExample 2:\n\n\nInput: grid = [[2]]\nOutput: 5\n\n\nExample 3:\n\n\nInput: grid = [[1,0],[0,2]]\nOutput: 8\n\n\n \n\nConstraints:\n\n * n == grid.length == grid[i].length\n * 1 <= n <= 50\n * 0 <= grid[i][j] <= 50",
        "Answer": "",
        "title": "projection-area-of-3d-shapes"
    },
    {
        "Question": "Super Egg Drop - You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.\n\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\n\nEach move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\n\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.\n\n \n\nExample 1:\n\n\nInput: k = 1, n = 2\nOutput: 2\nExplanation: \nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\n\n\nExample 2:\n\n\nInput: k = 2, n = 6\nOutput: 3\n\n\nExample 3:\n\n\nInput: k = 3, n = 14\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= k <= 100\n * 1 <= n <= 104",
        "Answer": "",
        "title": "super-egg-drop"
    },
    {
        "Question": "Sum of Subsequence Widths - The width of a sequence is the difference between the maximum and minimum elements in the sequence.\n\nGiven an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.\n\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\n\n \n\nExample 1:\n\n\nInput: nums = [2,1,3]\nOutput: 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n\n\nExample 2:\n\n\nInput: nums = [2]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 105",
        "Answer": "",
        "title": "sum-of-subsequence-widths"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "orderly-queues"
    },
    {
        "Question": "Numbers At Most N Given Digit Set - Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\n\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.\n\n \n\nExample 1:\n\n\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n\n\nExample 2:\n\n\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n\n\nExample 3:\n\n\nInput: digits = [\"7\"], n = 8\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= digits.length <= 9\n * digits[i].length == 1\n * digits[i] is a digit from '1' to '9'.\n * All the values in digits are unique.\n * digits is sorted in non-decreasing order.\n * 1 <= n <= 109",
        "Answer": "",
        "title": "numbers-at-most-n-given-digit-set"
    },
    {
        "Question": "Super Palindromes - Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\n\nGiven two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].\n\n \n\nExample 1:\n\n\nInput: left = \"4\", right = \"1000\"\nOutput: 4\nExplanation: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\n\n\nExample 2:\n\n\nInput: left = \"1\", right = \"2\"\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= left.length, right.length <= 18\n * left and right consist of only digits.\n * left and right cannot have leading zeros.\n * left and right represent integers in the range [1, 1018 - 1].\n * left is less than or equal to right.",
        "Answer": "",
        "title": "super-palindromes"
    },
    {
        "Question": "Sum of Subarray Minimums - Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: arr = [3,1,2,4]\nOutput: 17\nExplanation: \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n\n\nExample 2:\n\n\nInput: arr = [11,81,94,43,3]\nOutput: 444\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 3 * 104\n * 1 <= arr[i] <= 3 * 104",
        "Answer": "",
        "title": "sum-of-subarray-minimums"
    },
    {
        "Question": "Smallest Range I - You are given an integer array nums and an integer k.\n\nIn one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.\n\nThe score of nums is the difference between the maximum and minimum elements in nums.\n\nReturn the minimum score of nums after applying the mentioned operation at most once for each index in it.\n\n \n\nExample 1:\n\n\nInput: nums = [1], k = 0\nOutput: 0\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\n\n\nExample 2:\n\n\nInput: nums = [0,10], k = 2\nOutput: 6\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n\n\nExample 3:\n\n\nInput: nums = [1,3,6], k = 3\nOutput: 0\nExplanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * 0 <= nums[i] <= 104\n * 0 <= k <= 104",
        "Answer": "",
        "title": "smallest-range-i"
    },
    {
        "Question": "Smallest Range II - You are given an integer array nums and an integer k.\n\nFor each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.\n\nThe score of nums is the difference between the maximum and minimum elements in nums.\n\nReturn the minimum score of nums after changing the values at each index.\n\n \n\nExample 1:\n\n\nInput: nums = [1], k = 0\nOutput: 0\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\n\n\nExample 2:\n\n\nInput: nums = [0,10], k = 2\nOutput: 6\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n\n\nExample 3:\n\n\nInput: nums = [1,3,6], k = 3\nOutput: 3\nExplanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * 0 <= nums[i] <= 104\n * 0 <= k <= 104",
        "Answer": "",
        "title": "smallest-range-ii"
    },
    {
        "Question": "X of a Kind in a Deck of Cards - You are given an integer array deck where deck[i] represents the number written on the ith card.\n\nPartition the cards into one or more groups such that:\n\n * Each group has exactly x cards where x > 1, and\n * All the cards in one group have the same integer written on them.\n\nReturn true if such partition is possible, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: deck = [1,2,3,4,4,3,2,1]\nOutput: true\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].\n\n\nExample 2:\n\n\nInput: deck = [1,1,1,2,2,2,3,3]\nOutput: false\nExplanation: No possible partition.\n\n\n \n\nConstraints:\n\n * 1 <= deck.length <= 104\n * 0 <= deck[i] < 104",
        "Answer": "",
        "title": "x-of-a-kind-in-a-deck-of-cards"
    },
    {
        "Question": "Minimum Area Rectangle II - You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\n\nReturn the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.\n\nAnswers within 10-5 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/21/1a.png]\n\n\nInput: points = [[1,2],[2,1],[1,0],[0,1]]\nOutput: 2.00000\nExplanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/22/2.png]\n\n\nInput: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]\nOutput: 1.00000\nExplanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2018/12/22/3.png]\n\n\nInput: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]\nOutput: 0\nExplanation: There is no possible rectangle to form from these points.\n\n\n \n\nConstraints:\n\n * 1 <= points.length <= 50\n * points[i].length == 2\n * 0 <= xi, yi <= 4 * 104\n * All the given points are unique.",
        "Answer": "",
        "title": "minimum-area-rectangle-ii"
    },
    {
        "Question": "Powerful Integers - Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.\n\nAn integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.\n\nYou may return the answer in any order. In your answer, each value should occur at most once.\n\n \n\nExample 1:\n\n\nInput: x = 2, y = 3, bound = 10\nOutput: [2,3,4,5,7,9,10]\nExplanation:\n2 = 20 + 30\n3 = 21 + 30\n4 = 20 + 31\n5 = 21 + 31\n7 = 22 + 31\n9 = 23 + 30\n10 = 20 + 32\n\n\nExample 2:\n\n\nInput: x = 3, y = 5, bound = 15\nOutput: [2,4,6,8,10,14]\n\n\n \n\nConstraints:\n\n * 1 <= x, y <= 100\n * 0 <= bound <= 106",
        "Answer": "",
        "title": "powerful-integers"
    },
    {
        "Question": "Equal Rational Numbers - Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\n\nA rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways:\n\n * <IntegerPart>\n   * For example, 12, 0, and 123.\n * <IntegerPart><.><NonRepeatingPart>\n   * For example, 0.5, 1., 2.12, and 123.0001.\n * <IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>\n   * For example, 0.1(6), 1.(9), 123.00(1212).\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n\n * 1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).\n\n \n\nExample 1:\n\n\nInput: s = \"0.(52)\", t = \"0.5(25)\"\nOutput: true\nExplanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.\n\n\nExample 2:\n\n\nInput: s = \"0.1666(6)\", t = \"0.166(66)\"\nOutput: true\n\n\nExample 3:\n\n\nInput: s = \"0.9(9)\", t = \"1.\"\nOutput: true\nExplanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.https://en.wikipedia.org/wiki/0.999...]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".\n\n\n \n\nConstraints:\n\n * Each part consists only of digits.\n * The <IntegerPart> does not have leading zeros (except for the zero itself).\n * 1 <= <IntegerPart>.length <= 4\n * 0 <= <NonRepeatingPart>.length <= 4\n * 1 <= <RepeatingPart>.length <= 4",
        "Answer": "",
        "title": "equal-rational-numbers"
    },
    {
        "Question": "Merge Intervals - Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n \n\nExample 1:\n\n\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\n\nExample 2:\n\n\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\n\n \n\nConstraints:\n\n * 1 <= intervals.length <= 104\n * intervals[i].length == 2\n * 0 <= starti <= endi <= 104",
        "Answer": "",
        "title": "merge-intervals"
    },
    {
        "Question": "Insert Interval - You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn intervals after the insertion.\n\nNote that you don't need to modify intervals in-place. You can make a new array and return it.\n\n \n\nExample 1:\n\n\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\n\nExample 2:\n\n\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\n\n \n\nConstraints:\n\n * 0 <= intervals.length <= 104\n * intervals[i].length == 2\n * 0 <= starti <= endi <= 105\n * intervals is sorted by starti in ascending order.\n * newInterval.length == 2\n * 0 <= start <= end <= 105",
        "Answer": "",
        "title": "insert-interval"
    },
    {
        "Question": "Sort Colors - Given an array nums with n objects colored red, white, or blue, sort them in-place [https://en.wikipedia.org/wiki/In-place_algorithm] so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.\n\n \n\nExample 1:\n\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\n\nExample 2:\n\n\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 300\n * nums[i] is either 0, 1, or 2.\n\n \n\nFollow up: Could you come up with a one-pass algorithm using only constant extra space?",
        "Answer": "",
        "title": "sort-colors"
    },
    {
        "Question": "Merge Sorted Array - You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\n\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n\n\nExample 2:\n\n\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n\n\nExample 3:\n\n\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\n\n \n\nConstraints:\n\n * nums1.length == m + n\n * nums2.length == n\n * 0 <= m, n <= 200\n * 1 <= m + n <= 200\n * -109 <= nums1[i], nums2[j] <= 109\n\n \n\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?",
        "Answer": "",
        "title": "merge-sorted-array"
    },
    {
        "Question": "Insertion Sort List - Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n\nThe steps of the insertion sort algorithm:\n\n 1. Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n 2. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n 3. It repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n\n[https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif]\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/04/sort1linked-list.jpg]\n\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/04/sort2linked-list.jpg]\n\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [1, 5000].\n * -5000 <= Node.val <= 5000",
        "Answer": "",
        "title": "insertion-sort-list"
    },
    {
        "Question": "Sort List - Given the head of a linked list, return the list after sorting it in ascending order.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg]\n\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg]\n\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\n\nExample 3:\n\n\nInput: head = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 5 * 104].\n * -105 <= Node.val <= 105\n\n \n\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?",
        "Answer": "",
        "title": "sort-list"
    },
    {
        "Question": "Maximum Gap - Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\n\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\n \n\nExample 1:\n\n\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n\n\nExample 2:\n\n\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 0 <= nums[i] <= 109",
        "Answer": "",
        "title": "maximum-gap"
    },
    {
        "Question": "Largest Number - Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n \n\nExample 1:\n\n\nInput: nums = [10,2]\nOutput: \"210\"\n\n\nExample 2:\n\n\nInput: nums = [3,30,34,5,9]\nOutput: \"9534330\"\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 100\n * 0 <= nums[i] <= 109",
        "Answer": "",
        "title": "largest-number"
    },
    {
        "Question": "The Skyline Problem - A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\n * lefti is the x coordinate of the left edge of the ith building.\n * righti is the x coordinate of the right edge of the ith building.\n * heighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/01/merged.jpg]\n\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\n\nExample 2:\n\n\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n\n \n\nConstraints:\n\n * 1 <= buildings.length <= 104\n * 0 <= lefti < righti <= 231 - 1\n * 1 <= heighti <= 231 - 1\n * buildings is sorted by lefti in non-decreasing order.",
        "Answer": "",
        "title": "the-skyline-problem"
    },
    {
        "Question": "H-Index - Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.\n\nAccording to the definition of h-index on Wikipedia [https://en.wikipedia.org/wiki/H-index]: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\n\n \n\nExample 1:\n\n\nInput: citations = [3,0,6,1,5]\nOutput: 3\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n\n\nExample 2:\n\n\nInput: citations = [1,3,1]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == citations.length\n * 1 <= n <= 5000\n * 0 <= citations[i] <= 1000",
        "Answer": "",
        "title": "h-index"
    },
    {
        "Question": "Wiggle Sort II - Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n\nYou may assume the input array always has a valid answer.\n\n \n\nExample 1:\n\n\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.\n\n\nExample 2:\n\n\nInput: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5 * 104\n * 0 <= nums[i] <= 5000\n * It is guaranteed that there will be an answer for the given input nums.\n\n \n\nFollow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?",
        "Answer": "",
        "title": "wiggle-sort-ii"
    },
    {
        "Question": "Top K Frequent Elements - Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n\n \n\nExample 1:\n\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n\n\nExample 2:\n\nInput: nums = [1], k = 1\nOutput: [1]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -104 <= nums[i] <= 104\n * k is in the range [1, the number of unique elements in the array].\n * It is guaranteed that the answer is unique.\n\n \n\nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.",
        "Answer": "",
        "title": "top-k-frequent-elements"
    },
    {
        "Question": "Queue Reconstruction by Height - You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\n\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n\n \n\nExample 1:\n\n\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n\n\nExample 2:\n\n\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n\n\n \n\nConstraints:\n\n * 1 <= people.length <= 2000\n * 0 <= hi <= 106\n * 0 <= ki < people.length\n * It is guaranteed that the queue can be reconstructed.",
        "Answer": "",
        "title": "queue-reconstruction-by-height"
    },
    {
        "Question": "Sort Characters By Frequency - Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\n\nReturn the sorted string. If there are multiple answers, return any of them.\n\n \n\nExample 1:\n\n\nInput: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n\n\nExample 2:\n\n\nInput: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n\n\nExample 3:\n\n\nInput: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 5 * 105\n * s consists of uppercase and lowercase English letters and digits.",
        "Answer": "",
        "title": "sort-characters-by-frequency"
    },
    {
        "Question": "Reverse Pairs - Given an integer array nums, return the number of reverse pairs in the array.\n\nA reverse pair is a pair (i, j) where:\n\n * 0 <= i < j < nums.length and\n * nums[i] > 2 * nums[j].\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,2,3,1]\nOutput: 2\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n\n\nExample 2:\n\n\nInput: nums = [2,4,3,5,1]\nOutput: 3\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5 * 104\n * -231 <= nums[i] <= 231 - 1",
        "Answer": "",
        "title": "reverse-pairs"
    },
    {
        "Question": "Top K Frequent Words - Given an array of strings words and an integer k, return the k most frequent strings.\n\nReturn the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.\n\n \n\nExample 1:\n\n\nInput: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2\nOutput: [\"i\",\"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order.\n\n\nExample 2:\n\n\nInput: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4\nOutput: [\"the\",\"is\",\"sunny\",\"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 500\n * 1 <= words[i].length <= 10\n * words[i] consists of lowercase English letters.\n * k is in the range [1, The number of unique words[i]]\n\n \n\nFollow-up: Could you solve it in O(n log(k)) time and O(n) extra space?",
        "Answer": "",
        "title": "top-k-frequent-words"
    },
    {
        "Question": "Sort an Array - Given an array of integers nums, sort the array in ascending order and return it.\n\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.\n\n \n\nExample 1:\n\n\nInput: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n\n\nExample 2:\n\n\nInput: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\nExplanation: Note that the values of nums are not necessarily unique.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5 * 104\n * -5 * 104 <= nums[i] <= 5 * 104",
        "Answer": "",
        "title": "sort-an-array"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "reorder-log-files"
    },
    {
        "Question": "Pancake Sorting - Given an array of integers arr, sort the array by performing a series of pancake flips.\n\nIn one pancake flip we do the following steps:\n\n * Choose an integer k where 1 <= k <= arr.length.\n * Reverse the sub-array arr[0...k-1] (0-indexed).\n\nFor example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.\n\nReturn an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.\n\n \n\nExample 1:\n\n\nInput: arr = [3,2,4,1]\nOutput: [4,2,4,3]\nExplanation: \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.\n\n\nExample 2:\n\n\nInput: arr = [1,2,3]\nOutput: []\nExplanation: The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 100\n * 1 <= arr[i] <= arr.length\n * All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).",
        "Answer": "",
        "title": "pancake-sorting"
    },
    {
        "Question": "K Closest Points to Origin - Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\n\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).\n\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg]\n\n\nInput: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n\n\nExample 2:\n\n\nInput: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted.\n\n\n \n\nConstraints:\n\n * 1 <= k <= points.length <= 104\n * -104 <= xi, yi <= 104",
        "Answer": "",
        "title": "k-closest-points-to-origin"
    },
    {
        "Question": "Largest Perimeter Triangle - Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.\n\n \n\nExample 1:\n\n\nInput: nums = [2,1,2]\nOutput: 5\nExplanation: You can form a triangle with three side lengths: 1, 2, and 2.\n\n\nExample 2:\n\n\nInput: nums = [1,2,1,10]\nOutput: 0\nExplanation: \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\n\n\n \n\nConstraints:\n\n * 3 <= nums.length <= 104\n * 1 <= nums[i] <= 106",
        "Answer": "",
        "title": "largest-perimeter-triangle"
    },
    {
        "Question": "3Sum - Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.\n\n \n\nExample 1:\n\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\n\nExample 2:\n\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\n\nExample 3:\n\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n\n \n\nConstraints:\n\n * 3 <= nums.length <= 3000\n * -105 <= nums[i] <= 105",
        "Answer": "",
        "title": "3sum"
    },
    {
        "Question": "3Sum Closest - Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n\nReturn the sum of the three integers.\n\nYou may assume that each input would have exactly one solution.\n\n \n\nExample 1:\n\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n\nExample 2:\n\n\nInput: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n\n\n \n\nConstraints:\n\n * 3 <= nums.length <= 500\n * -1000 <= nums[i] <= 1000\n * -104 <= target <= 104",
        "Answer": "",
        "title": "3sum-closest"
    },
    {
        "Question": "4Sum - Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n * 0 <= a, b, c, d < n\n * a, b, c, and d are distinct.\n * nums[a] + nums[b] + nums[c] + nums[d] == target\n\nYou may return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\n\nExample 2:\n\n\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 200\n * -109 <= nums[i] <= 109\n * -109 <= target <= 109",
        "Answer": "",
        "title": "4sum"
    },
    {
        "Question": "Remove Nth Node From End of List - Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg]\n\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\n\nExample 2:\n\n\nInput: head = [1], n = 1\nOutput: []\n\n\nExample 3:\n\n\nInput: head = [1,2], n = 1\nOutput: [1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is sz.\n * 1 <= sz <= 30\n * 0 <= Node.val <= 100\n * 1 <= n <= sz\n\n \n\nFollow up: Could you do this in one pass?",
        "Answer": "",
        "title": "remove-nth-node-from-end-of-list"
    },
    {
        "Question": "Partition List - Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n\nYou should preserve the original relative order of the nodes in each of the two partitions.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/04/partition.jpg]\n\n\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n\n\nExample 2:\n\n\nInput: head = [2,1], x = 2\nOutput: [1,2]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [0, 200].\n * -100 <= Node.val <= 100\n * -200 <= x <= 200",
        "Answer": "",
        "title": "partition-list"
    },
    {
        "Question": "Linked List Cycle - Given head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n\nReturn true if there is a cycle in the linked list. Otherwise, return false.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png]\n\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png]\n\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png]\n\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\n \n\nConstraints:\n\n * The number of the nodes in the list is in the range [0, 104].\n * -105 <= Node.val <= 105\n * pos is -1 or a valid index in the linked-list.\n\n \n\nFollow up: Can you solve it using O(1) (i.e. constant) memory?",
        "Answer": "",
        "title": "linked-list-cycle"
    },
    {
        "Question": "Linked List Cycle II - Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n\nDo not modify the linked list.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png]\n\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png]\n\n\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png]\n\n\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n\n\n \n\nConstraints:\n\n * The number of the nodes in the list is in the range [0, 104].\n * -105 <= Node.val <= 105\n * pos is -1 or a valid index in the linked-list.\n\n \n\nFollow up: Can you solve it using O(1) (i.e. constant) memory?",
        "Answer": "",
        "title": "linked-list-cycle-ii"
    },
    {
        "Question": "Reorder List - You are given the head of a singly linked-list. The list can be represented as:\n\n\nL0 → L1 → … → Ln - 1 → Ln\n\n\nReorder the list to be on the following form:\n\n\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg]\n\n\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg]\n\n\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [1, 5 * 104].\n * 1 <= Node.val <= 1000",
        "Answer": "",
        "title": "reorder-list"
    },
    {
        "Question": "Two Sum II - Input Array Is Sorted - Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\n\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\n\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\n\nYour solution must use only constant extra space.\n\n \n\nExample 1:\n\n\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n\n\nExample 2:\n\n\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n\n\nExample 3:\n\n\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n\n\n \n\nConstraints:\n\n * 2 <= numbers.length <= 3 * 104\n * -1000 <= numbers[i] <= 1000\n * numbers is sorted in non-decreasing order.\n * -1000 <= target <= 1000\n * The tests are generated such that there is exactly one solution.",
        "Answer": "",
        "title": "two-sum-ii-input-array-is-sorted"
    },
    {
        "Question": "Minimum Size Subarray Sum - Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n\n \n\nExample 1:\n\n\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n\n\nExample 2:\n\n\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n\n\nExample 3:\n\n\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= target <= 109\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 104\n\n \n\nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",
        "Answer": "",
        "title": "minimum-size-subarray-sum"
    },
    {
        "Question": "Move Zeroes - Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.\n\n \n\nExample 1:\n\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n\n\nExample 2:\n\nInput: nums = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -231 <= nums[i] <= 231 - 1\n\n \n\nFollow up: Could you minimize the total number of operations done?",
        "Answer": "",
        "title": "move-zeroes"
    },
    {
        "Question": "Find the Duplicate Number - Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and using only constant extra space.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,4,2,2]\nOutput: 2\n\n\nExample 2:\n\n\nInput: nums = [3,1,3,4,2]\nOutput: 3\n\n\nExample 3:\n\n\nInput: nums = [3,3,3,3,3]\nOutput: 3\n\n \n\nConstraints:\n\n * 1 <= n <= 105\n * nums.length == n + 1\n * 1 <= nums[i] <= n\n * All the integers in nums appear only once except for precisely one integer which appears two or more times.\n\n \n\nFollow up:\n\n * How can we prove that at least one duplicate number must exist in nums?\n * Can you solve the problem in linear runtime complexity?",
        "Answer": "",
        "title": "find-the-duplicate-number"
    },
    {
        "Question": "Reverse String - Write a function that reverses a string. The input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place [https://en.wikipedia.org/wiki/In-place_algorithm] with O(1) extra memory.\n\n \n\nExample 1:\n\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\n\nExample 2:\n\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is a printable ascii character [https://en.wikipedia.org/wiki/ASCII#Printable_characters].",
        "Answer": "",
        "title": "reverse-string"
    },
    {
        "Question": "Reverse Vowels of a String - Given a string s, reverse only all the vowels in the string and return it.\n\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.\n\n \n\nExample 1:\n\nInput: s = \"IceCreAm\"\n\nOutput: \"AceCreIm\"\n\nExplanation:\n\nThe vowels in s are ['I', 'e', 'e', 'A']. On reversing the vowels, s becomes \"AceCreIm\".\n\nExample 2:\n\nInput: s = \"leetcode\"\n\nOutput: \"leotcede\"\n\n \n\nConstraints:\n\n * 1 <= s.length <= 3 * 105\n * s consist of printable ASCII characters.",
        "Answer": "",
        "title": "reverse-vowels-of-a-string"
    },
    {
        "Question": "Intersection of Two Arrays - Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\n\n\nExample 2:\n\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.\n\n\n \n\nConstraints:\n\n * 1 <= nums1.length, nums2.length <= 1000\n * 0 <= nums1[i], nums2[i] <= 1000",
        "Answer": "",
        "title": "intersection-of-two-arrays"
    },
    {
        "Question": "Intersection of Two Arrays II - Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n\n\nExample 2:\n\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n\n\n \n\nConstraints:\n\n * 1 <= nums1.length, nums2.length <= 1000\n * 0 <= nums1[i], nums2[i] <= 1000\n\n \n\nFollow up:\n\n * What if the given array is already sorted? How would you optimize your algorithm?\n * What if nums1's size is small compared to nums2's size? Which algorithm is better?\n * What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?",
        "Answer": "",
        "title": "intersection-of-two-arrays-ii"
    },
    {
        "Question": "Longest Repeating Character Replacement - You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\n\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\n\n \n\nExample 1:\n\n\nInput: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\n\n\nExample 2:\n\n\nInput: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of only uppercase English letters.\n * 0 <= k <= s.length",
        "Answer": "",
        "title": "longest-repeating-character-replacement"
    },
    {
        "Question": "Circular Array Loop - You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\n\n * If nums[i] is positive, move nums[i] steps forward, and\n * If nums[i] is negative, move nums[i] steps backward.\n\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n\nA cycle in the array consists of a sequence of indices seq of length k where:\n\n * Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...\n * Every nums[seq[j]] is either all positive or all negative.\n * k > 1\n\nReturn true if there is a cycle in nums, or false otherwise.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2022/09/01/img1.jpg]\n\n\nInput: nums = [2,-1,1,2,2]\nOutput: true\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2022/09/01/img2.jpg]\n\n\nInput: nums = [-1,-2,-3,-4,-5,6]\nOutput: false\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2022/09/01/img3.jpg]\n\n\nInput: nums = [1,-1,5,1,4]\nOutput: true\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.\nWe can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction).\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5000\n * -1000 <= nums[i] <= 1000\n * nums[i] != 0\n\n \n\nFollow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?",
        "Answer": "",
        "title": "circular-array-loop"
    },
    {
        "Question": "Permutation in String - Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\n\nIn other words, return true if one of s1's permutations is the substring of s2.\n\n \n\nExample 1:\n\n\nInput: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true\nExplanation: s2 contains one permutation of s1 (\"ba\").\n\n\nExample 2:\n\n\nInput: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= s1.length, s2.length <= 104\n * s1 and s2 consist of lowercase English letters.",
        "Answer": "",
        "title": "permutation-in-string"
    },
    {
        "Question": "Valid Triangle Number - Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\n\n \n\nExample 1:\n\n\nInput: nums = [2,2,3,4]\nOutput: 3\nExplanation: Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n\n\nExample 2:\n\n\nInput: nums = [4,2,3,4]\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 0 <= nums[i] <= 1000",
        "Answer": "",
        "title": "valid-triangle-number"
    },
    {
        "Question": "Swap Adjacent in LR String - In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string result, return True if and only if there exists a sequence of moves to transform start to result.\n\n \n\nExample 1:\n\n\nInput: start = \"RXXLRXRXL\", result = \"XRLXXRRLX\"\nOutput: true\nExplanation: We can transform start to result following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX\n\n\nExample 2:\n\n\nInput: start = \"X\", result = \"L\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= start.length <= 104\n * start.length == result.length\n * Both start and result will only consist of characters in 'L', 'R', and 'X'.",
        "Answer": "",
        "title": "swap-adjacent-in-lr-string"
    },
    {
        "Question": "Most Profit Assigning Work - You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:\n\n * difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and\n * worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).\n\nEvery worker can be assigned at most one job, but one job can be completed multiple times.\n\n * For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\n \n\nExample 1:\n\n\nInput: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\nOutput: 100\nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n\n\nExample 2:\n\n\nInput: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == difficulty.length\n * n == profit.length\n * m == worker.length\n * 1 <= n, m <= 104\n * 1 <= difficulty[i], profit[i], worker[i] <= 105",
        "Answer": "",
        "title": "most-profit-assigning-work"
    },
    {
        "Question": "Count Unique Characters of All Substrings of a Given String - Let's define a function countUniqueChars(s) that returns the number of unique characters in s.\n\n * For example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\n\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\n\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n \n\nExample 1:\n\n\nInput: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n\n\nExample 2:\n\n\nInput: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n\n\nExample 3:\n\n\nInput: s = \"LEETCODE\"\nOutput: 92\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of uppercase English letters only.",
        "Answer": "",
        "title": "count-unique-characters-of-all-substrings-of-a-given-string"
    },
    {
        "Question": "Backspace String Compare - Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.\n\n \n\nExample 1:\n\n\nInput: s = \"ab#c\", t = \"ad#c\"\nOutput: true\nExplanation: Both s and t become \"ac\".\n\n\nExample 2:\n\n\nInput: s = \"ab##\", t = \"c#d#\"\nOutput: true\nExplanation: Both s and t become \"\".\n\n\nExample 3:\n\n\nInput: s = \"a#c\", t = \"b\"\nOutput: false\nExplanation: s becomes \"c\" while t becomes \"b\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length, t.length <= 200\n * s and t only contain lowercase letters and '#' characters.\n\n \n\nFollow up: Can you solve it in O(n) time and O(1) space?",
        "Answer": "",
        "title": "backspace-string-compare"
    },
    {
        "Question": "Shortest Subarray with Sum at Least K - Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\n\nA subarray is a contiguous part of an array.\n\n \n\nExample 1:\n\nInput: nums = [1], k = 1\nOutput: 1\n\n\nExample 2:\n\nInput: nums = [1,2], k = 4\nOutput: -1\n\n\nExample 3:\n\nInput: nums = [2,-1,2], k = 3\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -105 <= nums[i] <= 105\n * 1 <= k <= 109",
        "Answer": "",
        "title": "shortest-subarray-with-sum-at-least-k"
    },
    {
        "Question": "Middle of the Linked List - Given the head of a singly linked list, return the middle node of the linked list.\n\nIf there are two middle nodes, return the second middle node.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg]\n\n\nInput: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg]\n\n\nInput: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n\n\n \n\nConstraints:\n\n * The number of nodes in the list is in the range [1, 100].\n * 1 <= Node.val <= 100",
        "Answer": "",
        "title": "middle-of-the-linked-list"
    },
    {
        "Question": "Fruit Into Baskets - You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.\n\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n\n * You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.\n * Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\n * Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\nGiven the integer array fruits, return the maximum number of fruits you can pick.\n\n \n\nExample 1:\n\n\nInput: fruits = [1,2,1]\nOutput: 3\nExplanation: We can pick from all 3 trees.\n\n\nExample 2:\n\n\nInput: fruits = [0,1,2,2]\nOutput: 3\nExplanation: We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1].\n\n\nExample 3:\n\n\nInput: fruits = [1,2,3,2,2]\nOutput: 4\nExplanation: We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2].\n\n\n \n\nConstraints:\n\n * 1 <= fruits.length <= 105\n * 0 <= fruits[i] < fruits.length",
        "Answer": "",
        "title": "fruit-into-baskets"
    },
    {
        "Question": "Binary Subarrays With Sum - Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\n\nA subarray is a contiguous part of the array.\n\n \n\nExample 1:\n\n\nInput: nums = [1,0,1,0,1], goal = 2\nOutput: 4\nExplanation: The 4 subarrays are bolded and underlined below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n\n\nExample 2:\n\n\nInput: nums = [0,0,0,0,0], goal = 0\nOutput: 15\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 3 * 104\n * nums[i] is either 0 or 1.\n * 0 <= goal <= nums.length",
        "Answer": "",
        "title": "binary-subarrays-with-sum"
    },
    {
        "Question": "Squares of a Sorted Array - Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\n \n\nExample 1:\n\n\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n\n\nExample 2:\n\n\nInput: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -104 <= nums[i] <= 104\n * nums is sorted in non-decreasing order.\n\n \n\nFollow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?",
        "Answer": "",
        "title": "squares-of-a-sorted-array"
    },
    {
        "Question": "Subarrays with K Different Integers - Given an integer array nums and an integer k, return the number of good subarrays of nums.\n\nA good array is an array where the number of different integers in that array is exactly k.\n\n * For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.\n\nA subarray is a contiguous part of an array.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n\n\nExample 2:\n\n\nInput: nums = [1,2,1,3,4], k = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * 1 <= nums[i], k <= nums.length",
        "Answer": "",
        "title": "subarrays-with-k-different-integers"
    },
    {
        "Question": "Unique Binary Search Trees II - Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg]\n\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: [[1]]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 8",
        "Answer": "",
        "title": "unique-binary-search-trees-ii"
    },
    {
        "Question": "Validate Binary Search Tree - Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n\n * The left subtree of a node contains only nodes with keys strictly less than the node's key.\n * The right subtree of a node contains only nodes with keys strictly greater than the node's key.\n * Both the left and right subtrees must also be binary search trees.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg]\n\n\nInput: root = [2,1,3]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg]\n\n\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * -231 <= Node.val <= 231 - 1",
        "Answer": "",
        "title": "validate-binary-search-tree"
    },
    {
        "Question": "Same Tree - Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg]\n\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg]\n\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg]\n\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\n\n \n\nConstraints:\n\n * The number of nodes in both trees is in the range [0, 100].\n * -104 <= Node.val <= 104",
        "Answer": "",
        "title": "same-tree"
    },
    {
        "Question": "Maximum Depth of Binary Tree - Given the root of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n\n\nExample 2:\n\n\nInput: root = [1,null,2]\nOutput: 2\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "maximum-depth-of-binary-tree"
    },
    {
        "Question": "Construct Binary Tree from Preorder and Inorder Traversal - Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/tree.jpg]\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\n\nExample 2:\n\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n\n \n\nConstraints:\n\n * 1 <= preorder.length <= 3000\n * inorder.length == preorder.length\n * -3000 <= preorder[i], inorder[i] <= 3000\n * preorder and inorder consist of unique values.\n * Each value of inorder also appears in preorder.\n * preorder is guaranteed to be the preorder traversal of the tree.\n * inorder is guaranteed to be the inorder traversal of the tree.",
        "Answer": "",
        "title": "construct-binary-tree-from-preorder-and-inorder-traversal"
    },
    {
        "Question": "Construct Binary Tree from Inorder and Postorder Traversal - Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/tree.jpg]\n\n\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n\n\nExample 2:\n\n\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]\n\n\n \n\nConstraints:\n\n * 1 <= inorder.length <= 3000\n * postorder.length == inorder.length\n * -3000 <= inorder[i], postorder[i] <= 3000\n * inorder and postorder consist of unique values.\n * Each value of postorder also appears in inorder.\n * inorder is guaranteed to be the inorder traversal of the tree.\n * postorder is guaranteed to be the postorder traversal of the tree.",
        "Answer": "",
        "title": "construct-binary-tree-from-inorder-and-postorder-traversal"
    },
    {
        "Question": "Convert Sorted Array to Binary Search Tree - Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg]\n\n\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n[https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/18/btree.jpg]\n\n\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -104 <= nums[i] <= 104\n * nums is sorted in a strictly increasing order.",
        "Answer": "",
        "title": "convert-sorted-array-to-binary-search-tree"
    },
    {
        "Question": "Convert Sorted List to Binary Search Tree - Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/08/17/linked.jpg]\n\n\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n\n\nExample 2:\n\n\nInput: head = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in head is in the range [0, 2 * 104].\n * -105 <= Node.val <= 105",
        "Answer": "",
        "title": "convert-sorted-list-to-binary-search-tree"
    },
    {
        "Question": "Balanced Binary Tree - Given a binary tree, determine if it is height-balanced.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg]\n\n\nInput: root = [1,2,2,3,3,null,null,4,4]\nOutput: false\n\n\nExample 3:\n\n\nInput: root = []\nOutput: true\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 5000].\n * -104 <= Node.val <= 104",
        "Answer": "",
        "title": "balanced-binary-tree"
    },
    {
        "Question": "Minimum Depth of Binary Tree - Given a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\nNote: A leaf is a node with no children.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n\n\nExample 2:\n\n\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 105].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "minimum-depth-of-binary-tree"
    },
    {
        "Question": "Flatten Binary Tree to Linked List - Given the root of a binary tree, flatten the tree into a \"linked list\":\n\n * The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n * The \"linked list\" should be in the same order as a pre-order traversal [https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR] of the binary tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg]\n\n\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n\n\nExample 2:\n\n\nInput: root = []\nOutput: []\n\n\nExample 3:\n\n\nInput: root = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 2000].\n * -100 <= Node.val <= 100\n\n \n\nFollow up: Can you flatten the tree in-place (with O(1) extra space)?",
        "Answer": "",
        "title": "flatten-binary-tree-to-linked-list"
    },
    {
        "Question": "Populating Next Right Pointers in Each Node - You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n\nInitially, all next pointers are set to NULL.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/02/14/116_sample.png]\n\n\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\n\nExample 2:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 212 - 1].\n * -1000 <= Node.val <= 1000\n\n \n\nFollow-up:\n\n * You may only use constant extra space.\n * The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
        "Answer": "",
        "title": "populating-next-right-pointers-in-each-node"
    },
    {
        "Question": "Binary Tree Maximum Path Sum - A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n\nThe path sum of a path is the sum of the node's values in the path.\n\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg]\n\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg]\n\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 3 * 104].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "binary-tree-maximum-path-sum"
    },
    {
        "Question": "Sum Root to Leaf Numbers - You are given the root of a binary tree containing digits from 0 to 9 only.\n\nEach root-to-leaf path in the tree represents a number.\n\n * For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n\nA leaf node is a node with no children.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg]\n\n\nInput: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg]\n\n\nInput: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 1000].\n * 0 <= Node.val <= 9\n * The depth of the tree will not exceed 10.",
        "Answer": "",
        "title": "sum-root-to-leaf-numbers"
    },
    {
        "Question": "Different Ways to Add Parentheses - Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\n\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n\n \n\nExample 1:\n\n\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n\n\nExample 2:\n\n\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n\n\n \n\nConstraints:\n\n * 1 <= expression.length <= 20\n * expression consists of digits and the operator '+', '-', and '*'.\n * All the integer values in the input expression are in the range [0, 99].\n * The integer values in the input expression do not have a leading '-' or '+' denoting the sign.",
        "Answer": "",
        "title": "different-ways-to-add-parentheses"
    },
    {
        "Question": "Count of Range Sum - Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\n\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\n\n \n\nExample 1:\n\n\nInput: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n\n\nExample 2:\n\n\nInput: nums = [0], lower = 0, upper = 0\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -231 <= nums[i] <= 231 - 1\n * -105 <= lower <= upper <= 105\n * The answer is guaranteed to fit in a 32-bit integer.",
        "Answer": "",
        "title": "count-of-range-sum"
    },
    {
        "Question": "House Robber III - The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\n\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\n\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg]\n\n\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg]\n\n\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * 0 <= Node.val <= 104",
        "Answer": "",
        "title": "house-robber-iii"
    },
    {
        "Question": "Longest Substring with At Least K Repeating Characters - Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\n\nif no such substring exists, return 0.\n\n \n\nExample 1:\n\n\nInput: s = \"aaabb\", k = 3\nOutput: 3\nExplanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n\n\nExample 2:\n\n\nInput: s = \"ababbc\", k = 2\nOutput: 5\nExplanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s consists of only lowercase English letters.\n * 1 <= k <= 105",
        "Answer": "",
        "title": "longest-substring-with-at-least-k-repeating-characters"
    },
    {
        "Question": "Sum of Left Leaves - Given the root of a binary tree, return the sum of all left leaves.\n\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n\n\nExample 2:\n\n\nInput: root = [1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 1000].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "sum-of-left-leaves"
    },
    {
        "Question": "Path Sum III - Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg]\n\n\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\nOutput: 3\nExplanation: The paths that sum to 8 are shown.\n\n\nExample 2:\n\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: 3\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 1000].\n * -109 <= Node.val <= 109\n * -1000 <= targetSum <= 1000",
        "Answer": "",
        "title": "path-sum-iii"
    },
    {
        "Question": "Output Contest Matches - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "output-contest-matches"
    },
    {
        "Question": "Trim a Binary Search Tree - Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\n\nReturn the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg]\n\n\nInput: root = [1,0,2], low = 1, high = 2\nOutput: [1,null,2]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg]\n\n\nInput: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\nOutput: [3,2,null,1]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 104].\n * 0 <= Node.val <= 104\n * The value of each node in the tree is unique.\n * root is guaranteed to be a valid binary search tree.\n * 0 <= low <= high <= 104",
        "Answer": "",
        "title": "trim-a-binary-search-tree"
    },
    {
        "Question": "Second Minimum Node In a Binary Tree - Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\n\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.\n\n \n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg]\n\n\nInput: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg]\n\n\nInput: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 25].\n * 1 <= Node.val <= 231 - 1\n * root.val == min(root.left.val, root.right.val) for each internal node of the tree.",
        "Answer": "",
        "title": "second-minimum-node-in-a-binary-tree"
    },
    {
        "Question": "Special Binary String - Special binary strings are binary strings with the following two properties:\n\n * The number of 0's is equal to the number of 1's.\n * Every prefix of the binary string has at least as many 1's as 0's.\n\nYou are given a special binary string s.\n\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\n\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.\n\n \n\nExample 1:\n\n\nInput: s = \"11011000\"\nOutput: \"11100100\"\nExplanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.\n\n\nExample 2:\n\n\nInput: s = \"10\"\nOutput: \"10\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 50\n * s[i] is either '0' or '1'.\n * s is a special binary string.",
        "Answer": "",
        "title": "special-binary-string"
    },
    {
        "Question": "Median of Two Sorted Arrays - Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\n\nExample 2:\n\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n\n \n\nConstraints:\n\n * nums1.length == m\n * nums2.length == n\n * 0 <= m <= 1000\n * 0 <= n <= 1000\n * 1 <= m + n <= 2000\n * -106 <= nums1[i], nums2[i] <= 106",
        "Answer": "",
        "title": "median-of-two-sorted-arrays"
    },
    {
        "Question": "Search in Rotated Sorted Array - There is an integer array nums sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \n\nExample 1:\n\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\n\nExample 2:\n\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n\n\nExample 3:\n\nInput: nums = [1], target = 0\nOutput: -1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5000\n * -104 <= nums[i] <= 104\n * All values of nums are unique.\n * nums is an ascending array that is possibly rotated.\n * -104 <= target <= 104",
        "Answer": "",
        "title": "search-in-rotated-sorted-array"
    },
    {
        "Question": "Find First and Last Position of Element in Sorted Array - Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1, -1].\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \n\nExample 1:\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\n\nExample 2:\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n\n\nExample 3:\n\nInput: nums = [], target = 0\nOutput: [-1,-1]\n\n\n \n\nConstraints:\n\n * 0 <= nums.length <= 105\n * -109 <= nums[i] <= 109\n * nums is a non-decreasing array.\n * -109 <= target <= 109",
        "Answer": "",
        "title": "find-first-and-last-position-of-element-in-sorted-array"
    },
    {
        "Question": "Search Insert Position - Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\n\nExample 2:\n\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\n\nExample 3:\n\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -104 <= nums[i] <= 104\n * nums contains distinct values sorted in ascending order.\n * -104 <= target <= 104",
        "Answer": "",
        "title": "search-insert-position"
    },
    {
        "Question": "Sqrt(x) - Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n\nYou must not use any built-in exponent function or operator.\n\n * For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n\n \n\nExample 1:\n\n\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n\n\nExample 2:\n\n\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n\n \n\nConstraints:\n\n * 0 <= x <= 231 - 1",
        "Answer": "",
        "title": "sqrtx"
    },
    {
        "Question": "Search a 2D Matrix - You are given an m x n integer matrix matrix with the following two properties:\n\n * Each row is sorted in non-decreasing order.\n * The first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer target, return true if target is in matrix or false otherwise.\n\nYou must write a solution in O(log(m * n)) time complexity.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/05/mat.jpg]\n\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg]\n\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 100\n * -104 <= matrix[i][j], target <= 104",
        "Answer": "",
        "title": "search-a-2d-matrix"
    },
    {
        "Question": "Search in Rotated Sorted Array II - There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n\nYou must decrease the overall operation steps as much as possible.\n\n \n\nExample 1:\n\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n\n\nExample 2:\n\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 5000\n * -104 <= nums[i] <= 104\n * nums is guaranteed to be rotated at some pivot.\n * -104 <= target <= 104\n\n \n\nFollow up: This problem is similar to Search in Rotated Sorted Array [/problems/search-in-rotated-sorted-array/description/], but nums may contain duplicates. Would this affect the runtime complexity? How and why?",
        "Answer": "",
        "title": "search-in-rotated-sorted-array-ii"
    },
    {
        "Question": "Find Minimum in Rotated Sorted Array - Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n\n * [4,5,6,7,0,1,2] if it was rotated 4 times.\n * [0,1,2,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\n\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\n\nYou must write an algorithm that runs in O(log n) time.\n\n \n\nExample 1:\n\n\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n\n\nExample 2:\n\n\nInput: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n\n\nExample 3:\n\n\nInput: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 5000\n * -5000 <= nums[i] <= 5000\n * All the integers of nums are unique.\n * nums is sorted and rotated between 1 and n times.",
        "Answer": "",
        "title": "find-minimum-in-rotated-sorted-array"
    },
    {
        "Question": "Find Minimum in Rotated Sorted Array II - Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n * [4,5,6,7,0,1,4] if it was rotated 4 times.\n * [0,1,4,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\n\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n\nYou must decrease the overall operation steps as much as possible.\n\n \n\nExample 1:\n\nInput: nums = [1,3,5]\nOutput: 1\n\n\nExample 2:\n\nInput: nums = [2,2,2,0,1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 5000\n * -5000 <= nums[i] <= 5000\n * nums is sorted and rotated between 1 and n times.\n\n \n\nFollow up: This problem is similar to Find Minimum in Rotated Sorted Array [https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/], but nums may contain duplicates. Would this affect the runtime complexity? How and why?",
        "Answer": "",
        "title": "find-minimum-in-rotated-sorted-array-ii"
    },
    {
        "Question": "Find Peak Element - A peak element is an element that is strictly greater than its neighbors.\n\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n\nYou may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n\nYou must write an algorithm that runs in O(log n) time.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\nExample 2:\n\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * -231 <= nums[i] <= 231 - 1\n * nums[i] != nums[i + 1] for all valid i.",
        "Answer": "",
        "title": "find-peak-element"
    },
    {
        "Question": "Count Complete Tree Nodes - Given the root of a complete binary tree, return the number of the nodes in the tree.\n\nAccording to Wikipedia [http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees], every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\nDesign an algorithm that runs in less than O(n) time complexity.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/14/complete.jpg]\n\n\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n\n\nExample 2:\n\n\nInput: root = []\nOutput: 0\n\n\nExample 3:\n\n\nInput: root = [1]\nOutput: 1\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 5 * 104].\n * 0 <= Node.val <= 5 * 104\n * The tree is guaranteed to be complete.",
        "Answer": "",
        "title": "count-complete-tree-nodes"
    },
    {
        "Question": "H-Index II - Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in non-descending order, return the researcher's h-index.\n\nAccording to the definition of h-index on Wikipedia [https://en.wikipedia.org/wiki/H-index]: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\n\nYou must write an algorithm that runs in logarithmic time.\n\n \n\nExample 1:\n\n\nInput: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n\n\nExample 2:\n\n\nInput: citations = [1,2,100]\nOutput: 2\n\n\n \n\nConstraints:\n\n * n == citations.length\n * 1 <= n <= 105\n * 0 <= citations[i] <= 1000\n * citations is sorted in ascending order.",
        "Answer": "",
        "title": "h-index-ii"
    },
    {
        "Question": "First Bad Version - You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n\n \n\nExample 1:\n\n\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n\n\nExample 2:\n\n\nInput: n = 1, bad = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= bad <= n <= 231 - 1",
        "Answer": "",
        "title": "first-bad-version"
    },
    {
        "Question": "Longest Increasing Subsequence - Given an integer array nums, return the length of the longest strictly increasing subsequence.\n\n \n\nExample 1:\n\n\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n\n\nExample 2:\n\n\nInput: nums = [0,1,0,3,2,3]\nOutput: 4\n\n\nExample 3:\n\n\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2500\n * -104 <= nums[i] <= 104\n\n \n\nFollow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?",
        "Answer": "",
        "title": "longest-increasing-subsequence"
    },
    {
        "Question": "Russian Doll Envelopes - You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\n\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\n\nNote: You cannot rotate an envelope.\n\n \n\nExample 1:\n\n\nInput: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n\n\nExample 2:\n\n\nInput: envelopes = [[1,1],[1,1],[1,1]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= envelopes.length <= 105\n * envelopes[i].length == 2\n * 1 <= wi, hi <= 105",
        "Answer": "",
        "title": "russian-doll-envelopes"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "max-sum-of-sub-matrix-no-larger-than-k"
    },
    {
        "Question": "Valid Perfect Square - Given a positive integer num, return true if num is a perfect square or false otherwise.\n\nA perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n\nYou must not use any built-in library function, such as sqrt.\n\n \n\nExample 1:\n\n\nInput: num = 16\nOutput: true\nExplanation: We return true because 4 * 4 = 16 and 4 is an integer.\n\n\nExample 2:\n\n\nInput: num = 14\nOutput: false\nExplanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n\n\n \n\nConstraints:\n\n * 1 <= num <= 231 - 1",
        "Answer": "",
        "title": "valid-perfect-square"
    },
    {
        "Question": "Guess Number Higher or Lower - We are playing the Guess Game. The game is as follows:\n\nI pick a number from 1 to n. You have to guess which number I picked.\n\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n\nYou call a pre-defined API int guess(int num), which returns three possible results:\n\n * -1: Your guess is higher than the number I picked (i.e. num > pick).\n * 1: Your guess is lower than the number I picked (i.e. num < pick).\n * 0: your guess is equal to the number I picked (i.e. num == pick).\n\nReturn the number that I picked.\n\n \n\nExample 1:\n\n\nInput: n = 10, pick = 6\nOutput: 6\n\n\nExample 2:\n\n\nInput: n = 1, pick = 1\nOutput: 1\n\n\nExample 3:\n\n\nInput: n = 2, pick = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1\n * 1 <= pick <= n",
        "Answer": "",
        "title": "guess-number-higher-or-lower"
    },
    {
        "Question": "Split Array Largest Sum - Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\n\nReturn the minimized largest sum of the split.\n\nA subarray is a contiguous part of the array.\n\n \n\nExample 1:\n\n\nInput: nums = [7,2,5,10,8], k = 2\nOutput: 18\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4,5], k = 2\nOutput: 9\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 0 <= nums[i] <= 106\n * 1 <= k <= min(50, nums.length)",
        "Answer": "",
        "title": "split-array-largest-sum"
    },
    {
        "Question": "Find Right Interval - You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\n\nThe right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\n\nReturn an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\n\n \n\nExample 1:\n\n\nInput: intervals = [[1,2]]\nOutput: [-1]\nExplanation: There is only one interval in the collection, so it outputs -1.\n\n\nExample 2:\n\n\nInput: intervals = [[3,4],[2,3],[1,2]]\nOutput: [-1,0,1]\nExplanation: There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n\n\nExample 3:\n\n\nInput: intervals = [[1,4],[2,3],[3,4]]\nOutput: [-1,2,-1]\nExplanation: There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\n\n\n \n\nConstraints:\n\n * 1 <= intervals.length <= 2 * 104\n * intervals[i].length == 2\n * -106 <= starti <= endi <= 106\n * The start point of each interval is unique.",
        "Answer": "",
        "title": "find-right-interval"
    },
    {
        "Question": "Heaters - Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n\nEvery house can be warmed, as long as the house is within the heater's warm radius range. \n\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n\nNotice that all the heaters follow your radius standard, and the warm radius will the same.\n\n \n\nExample 1:\n\n\nInput: houses = [1,2,3], heaters = [2]\nOutput: 1\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n\n\nExample 2:\n\n\nInput: houses = [1,2,3,4], heaters = [1,4]\nOutput: 1\nExplanation: The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.\n\n\nExample 3:\n\n\nInput: houses = [1,5], heaters = [2]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= houses.length, heaters.length <= 3 * 104\n * 1 <= houses[i], heaters[i] <= 109",
        "Answer": "",
        "title": "heaters"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "dsingle-element-in-a-sorted-array"
    },
    {
        "Question": "Find K Closest Elements - Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.\n\nAn integer a is closer to x than an integer b if:\n\n * |a - x| < |b - x|, or\n * |a - x| == |b - x| and a < b\n\n \n\nExample 1:\n\nInput: arr = [1,2,3,4,5], k = 4, x = 3\n\nOutput: [1,2,3,4]\n\nExample 2:\n\nInput: arr = [1,1,2,3,4,5], k = 4, x = -1\n\nOutput: [1,1,2,3]\n\n \n\nConstraints:\n\n * 1 <= k <= arr.length\n * 1 <= arr.length <= 104\n * arr is sorted in ascending order.\n * -104 <= arr[i], x <= 104",
        "Answer": "",
        "title": "find-k-closest-elements"
    },
    {
        "Question": "Kth Smallest Number in Multiplication Table - Nearly everyone has used the Multiplication Table [https://en.wikipedia.org/wiki/Multiplication_table]. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\n\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/02/multtable1-grid.jpg]\n\n\nInput: m = 3, n = 3, k = 5\nOutput: 3\nExplanation: The 5th smallest number is 3.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/02/multtable2-grid.jpg]\n\n\nInput: m = 2, n = 3, k = 6\nOutput: 6\nExplanation: The 6th smallest number is 6.\n\n\n \n\nConstraints:\n\n * 1 <= m, n <= 3 * 104\n * 1 <= k <= m * n",
        "Answer": "",
        "title": "kth-smallest-number-in-multiplication-table"
    },
    {
        "Question": "Binary Search - Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \n\nExample 1:\n\n\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\n\nExample 2:\n\n\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -104 < nums[i], target < 104\n * All the integers in nums are unique.\n * nums is sorted in ascending order.",
        "Answer": "",
        "title": "binary-search"
    },
    {
        "Question": "Random Pick with Blacklist - You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\n\nOptimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\n\nImplement the Solution class:\n\n * Solution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.\n * int pick() Returns a random integer in the range [0, n - 1] and not in blacklist.\n\n \n\nExample 1:\n\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\nOutput\n[null, 0, 4, 1, 6, 1, 0, 4]\n\nExplanation\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109\n * 0 <= blacklist.length <= min(105, n - 1)\n * 0 <= blacklist[i] < n\n * All the values of blacklist are unique.\n * At most 2 * 104 calls will be made to pick.",
        "Answer": "",
        "title": "random-pick-with-blacklist"
    },
    {
        "Question": "Find K-th Smallest Pair Distance - The distance of a pair of integers a and b is defined as the absolute difference between a and b.\n\nGiven an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,1], k = 1\nOutput: 0\nExplanation: Here are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\n\n\nExample 2:\n\n\nInput: nums = [1,1,1], k = 2\nOutput: 0\n\n\nExample 3:\n\n\nInput: nums = [1,6,1], k = 3\nOutput: 5\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 2 <= n <= 104\n * 0 <= nums[i] <= 106\n * 1 <= k <= n * (n - 1) / 2",
        "Answer": "",
        "title": "find-k-th-smallest-pair-distance"
    },
    {
        "Question": "Find Smallest Letter Greater Than Target - You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.\n\nReturn the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.\n\n \n\nExample 1:\n\n\nInput: letters = [\"c\",\"f\",\"j\"], target = \"a\"\nOutput: \"c\"\nExplanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n\n\nExample 2:\n\n\nInput: letters = [\"c\",\"f\",\"j\"], target = \"c\"\nOutput: \"f\"\nExplanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n\n\nExample 3:\n\n\nInput: letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"\nOutput: \"x\"\nExplanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].\n\n\n \n\nConstraints:\n\n * 2 <= letters.length <= 104\n * letters[i] is a lowercase English letter.\n * letters is sorted in non-decreasing order.\n * letters contains at least two different characters.\n * target is a lowercase English letter.",
        "Answer": "",
        "title": "find-smallest-letter-greater-than-target"
    },
    {
        "Question": "Minimize Max Distance to Gas Station - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "minimize-max-distance-to-gas-station"
    },
    {
        "Question": "K-th Smallest Prime Fraction - You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\n\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\n\nReturn the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].\n\n \n\nExample 1:\n\n\nInput: arr = [1,2,3,5], k = 3\nOutput: [2,5]\nExplanation: The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.\n\n\nExample 2:\n\n\nInput: arr = [1,7], k = 1\nOutput: [1,7]\n\n\n \n\nConstraints:\n\n * 2 <= arr.length <= 1000\n * 1 <= arr[i] <= 3 * 104\n * arr[0] == 1\n * arr[i] is a prime number for i > 0.\n * All the numbers of arr are unique and sorted in strictly increasing order.\n * 1 <= k <= arr.length * (arr.length - 1) / 2\n\n \n\nFollow up: Can you solve the problem with better than O(n2) complexity?",
        "Answer": "",
        "title": "k-th-smallest-prime-fraction"
    },
    {
        "Question": "Preimage Size of Factorial Zeroes Function - Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\n\n * For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.\n\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.\n\n \n\nExample 1:\n\n\nInput: k = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n\n\nExample 2:\n\n\nInput: k = 5\nOutput: 0\nExplanation: There is no x such that x! ends in k = 5 zeroes.\n\n\nExample 3:\n\n\nInput: k = 3\nOutput: 5\n\n\n \n\nConstraints:\n\n * 0 <= k <= 109",
        "Answer": "",
        "title": "preimage-size-of-factorial-zeroes-function"
    },
    {
        "Question": "Peak Index in a Mountain Array - You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease.\n\nReturn the index of the peak element.\n\nYour task is to solve it in O(log(n)) time complexity.\n\n \n\nExample 1:\n\nInput: arr = [0,1,0]\n\nOutput: 1\n\nExample 2:\n\nInput: arr = [0,2,1,0]\n\nOutput: 1\n\nExample 3:\n\nInput: arr = [0,10,5,2]\n\nOutput: 1\n\n \n\nConstraints:\n\n * 3 <= arr.length <= 105\n * 0 <= arr[i] <= 106\n * arr is guaranteed to be a mountain array.",
        "Answer": "",
        "title": "peak-index-in-a-mountain-array"
    },
    {
        "Question": "Koko Eating Bananas - Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.\n\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\nReturn the minimum integer k such that she can eat all the bananas within h hours.\n\n \n\nExample 1:\n\n\nInput: piles = [3,6,7,11], h = 8\nOutput: 4\n\n\nExample 2:\n\n\nInput: piles = [30,11,23,4,20], h = 5\nOutput: 30\n\n\nExample 3:\n\n\nInput: piles = [30,11,23,4,20], h = 6\nOutput: 23\n\n\n \n\nConstraints:\n\n * 1 <= piles.length <= 104\n * piles.length <= h <= 109\n * 1 <= piles[i] <= 109",
        "Answer": "",
        "title": "koko-eating-bananas"
    },
    {
        "Question": "Nth Magical Number - A positive integer is magical if it is divisible by either a or b.\n\nGiven the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: n = 1, a = 2, b = 3\nOutput: 2\n\n\nExample 2:\n\n\nInput: n = 4, a = 2, b = 3\nOutput: 6\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109\n * 2 <= a, b <= 4 * 104",
        "Answer": "",
        "title": "nth-magical-number"
    },
    {
        "Question": "All Possible Full Binary Trees - Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.\n\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\n\nA full binary tree is a binary tree where each node has exactly 0 or 2 children.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png]\n\n\nInput: n = 7\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n\n\nExample 2:\n\n\nInput: n = 3\nOutput: [[0,0,0]]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 20",
        "Answer": "",
        "title": "all-possible-full-binary-trees"
    },
    {
        "Question": "Online Election - You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].\n\nFor each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\n\nImplement the TopVotedCandidate class:\n\n * TopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.\n * int q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.\n\n \n\nExample 1:\n\n\nInput\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\nOutput\n[null, 0, 1, 1, 0, 0, 1]\n\nExplanation\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1\n\n\n\n \n\nConstraints:\n\n * 1 <= persons.length <= 5000\n * times.length == persons.length\n * 0 <= persons[i] < persons.length\n * 0 <= times[i] <= 109\n * times is sorted in a strictly increasing order.\n * times[0] <= t <= 109\n * At most 104 calls will be made to q.",
        "Answer": "",
        "title": "online-election"
    },
    {
        "Question": "Time Based Key-Value Store - Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\n\nImplement the TimeMap class:\n\n * TimeMap() Initializes the object of the data structure.\n * void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.\n * String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \"\".\n\n \n\nExample 1:\n\n\nInput\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\nOutput\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\n\nExplanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\"\n\n\n \n\nConstraints:\n\n * 1 <= key.length, value.length <= 100\n * key and value consist of lowercase English letters and digits.\n * 1 <= timestamp <= 107\n * All the timestamps timestamp of set are strictly increasing.\n * At most 2 * 105 calls will be made to set and get.",
        "Answer": "",
        "title": "time-based-key-value-store"
    },
    {
        "Question": "Contains Duplicate III - You are given an integer array nums and two integers indexDiff and valueDiff.\n\nFind a pair of indices (i, j) such that:\n\n * i != j,\n * abs(i - j) <= indexDiff.\n * abs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n\n\nExample 2:\n\n\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 105\n * -109 <= nums[i] <= 109\n * 1 <= indexDiff <= nums.length\n * 0 <= valueDiff <= 109",
        "Answer": "",
        "title": "contains-duplicate-iii"
    },
    {
        "Question": "Kth Smallest Element in a BST - Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg]\n\n\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg]\n\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is n.\n * 1 <= k <= n <= 104\n * 0 <= Node.val <= 104\n\n \n\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?",
        "Answer": "",
        "title": "kth-smallest-element-in-a-bst"
    },
    {
        "Question": "Lowest Common Ancestor of a Binary Search Tree - Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia [https://en.wikipedia.org/wiki/Lowest_common_ancestor]: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png]\n\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png]\n\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\n\nExample 3:\n\n\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [2, 105].\n * -109 <= Node.val <= 109\n * All Node.val are unique.\n * p != q\n * p and q will exist in the BST.",
        "Answer": "",
        "title": "lowest-common-ancestor-of-a-binary-search-tree"
    },
    {
        "Question": "Data Stream as Disjoint Intervals - Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.\n\nImplement the SummaryRanges class:\n\n * SummaryRanges() Initializes the object with an empty stream.\n * void addNum(int value) Adds the integer value to the stream.\n * int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n\n \n\nExample 1:\n\n\nInput\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\nOutput\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\nExplanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n\n\n \n\nConstraints:\n\n * 0 <= value <= 104\n * At most 3 * 104 calls will be made to addNum and getIntervals.\n * At most 102 calls will be made to getIntervals.\n\n \n\nFollow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?",
        "Answer": "",
        "title": "data-stream-as-disjoint-intervals"
    },
    {
        "Question": "Serialize and Deserialize BST - Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n\nThe encoded string should be as compact as possible.\n\n \n\nExample 1:\n\nInput: root = [2,1,3]\nOutput: [2,1,3]\n\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * 0 <= Node.val <= 104\n * The input tree is guaranteed to be a binary search tree.",
        "Answer": "",
        "title": "serialize-and-deserialize-bst"
    },
    {
        "Question": "Delete Node in a BST - Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n\nBasically, the deletion can be divided into two stages:\n\n 1. Search for a node to remove.\n 2. If the node is found, delete the node.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg]\n\n\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n[https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg]\n\n\nExample 2:\n\n\nInput: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n\n\nExample 3:\n\n\nInput: root = [], key = 0\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 104].\n * -105 <= Node.val <= 105\n * Each node has a unique value.\n * root is a valid binary search tree.\n * -105 <= key <= 105\n\n \n\nFollow up: Could you solve it with time complexity O(height of tree)?",
        "Answer": "",
        "title": "delete-node-in-a-bst"
    },
    {
        "Question": "Minimum Absolute Difference in BST - Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg]\n\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg]\n\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [2, 104].\n * 0 <= Node.val <= 105\n\n \n\nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/ [https://leetcode.com/problems/minimum-distance-between-bst-nodes/]",
        "Answer": "",
        "title": "minimum-absolute-difference-in-bst"
    },
    {
        "Question": "Minimum Distance Between BST Nodes - Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg]\n\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg]\n\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [2, 100].\n * 0 <= Node.val <= 105\n\n \n\nNote: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/ [https://leetcode.com/problems/minimum-absolute-difference-in-bst/]",
        "Answer": "",
        "title": "minimum-distance-between-bst-nodes"
    },
    {
        "Question": "Binary Tree Level Order Traversal - Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n\n\nExample 2:\n\n\nInput: root = [1]\nOutput: [[1]]\n\n\nExample 3:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 2000].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "binary-tree-level-order-traversal"
    },
    {
        "Question": "Binary Tree Level Order Traversal II - Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\n\n\nExample 2:\n\n\nInput: root = [1]\nOutput: [[1]]\n\n\nExample 3:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 2000].\n * -1000 <= Node.val <= 1000",
        "Answer": "",
        "title": "binary-tree-level-order-traversal-ii"
    },
    {
        "Question": "Binary Tree Zigzag Level Order Traversal - Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg]\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n\n\nExample 2:\n\n\nInput: root = [1]\nOutput: [[1]]\n\n\nExample 3:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 2000].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "binary-tree-zigzag-level-order-traversal"
    },
    {
        "Question": "Populating Next Right Pointers in Each Node II - Given a binary tree\n\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n\nInitially, all next pointers are set to NULL.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/02/15/117_sample.png]\n\n\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\n\nExample 2:\n\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 6000].\n * -100 <= Node.val <= 100\n\n \n\nFollow-up:\n\n * You may only use constant extra space.\n * The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
        "Answer": "",
        "title": "populating-next-right-pointers-in-each-node-ii"
    },
    {
        "Question": "Word Ladder - A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\n * Every adjacent pair of words differs by a single letter.\n * Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n * sk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n\n \n\nExample 1:\n\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n\n\nExample 2:\n\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n\n \n\nConstraints:\n\n * 1 <= beginWord.length <= 10\n * endWord.length == beginWord.length\n * 1 <= wordList.length <= 5000\n * wordList[i].length == beginWord.length\n * beginWord, endWord, and wordList[i] consist of lowercase English letters.\n * beginWord != endWord\n * All the words in wordList are unique.",
        "Answer": "",
        "title": "word-ladder"
    },
    {
        "Question": "Surrounded Regions - You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:\n\n * Connect: A cell is connected to adjacent cells horizontally or vertically.\n * Region: To form a region connect every 'O' cell.\n * Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.\n\nTo capture a surrounded region, replace all 'O's with 'X's in-place within the original board. You do not need to return anything.\n\n \n\nExample 1:\n\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg]\n\nIn the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.\n\nExample 2:\n\nInput: board = [[\"X\"]]\n\nOutput: [[\"X\"]]\n\n \n\nConstraints:\n\n * m == board.length\n * n == board[i].length\n * 1 <= m, n <= 200\n * board[i][j] is 'X' or 'O'.",
        "Answer": "",
        "title": "surrounded-regions"
    },
    {
        "Question": "Clone Graph - Given a reference of a node in a connected [https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph] undirected graph.\n\nReturn a deep copy [https://en.wikipedia.org/wiki/Object_copying#Deep_copy] (clone) of the graph.\n\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n\n\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n\n\n \n\nTest case format:\n\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png]\n\n\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/01/07/graph.png]\n\n\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n\n\nExample 3:\n\n\nInput: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.\n\n\n \n\nConstraints:\n\n * The number of nodes in the graph is in the range [0, 100].\n * 1 <= Node.val <= 100\n * Node.val is unique for each node.\n * There are no repeated edges and no self-loops in the graph.\n * The Graph is connected and all nodes can be visited starting from the given node.",
        "Answer": "",
        "title": "clone-graph"
    },
    {
        "Question": "Course Schedule - There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\n * For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn true if you can finish all courses. Otherwise, return false.\n\n \n\nExample 1:\n\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\n\nExample 2:\n\n\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\n\n \n\nConstraints:\n\n * 1 <= numCourses <= 2000\n * 0 <= prerequisites.length <= 5000\n * prerequisites[i].length == 2\n * 0 <= ai, bi < numCourses\n * All the pairs prerequisites[i] are unique.",
        "Answer": "",
        "title": "course-schedule"
    },
    {
        "Question": "Course Schedule II - There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\n * For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n\n \n\nExample 1:\n\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n\n\nExample 2:\n\n\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n\n\nExample 3:\n\n\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\n\n\n \n\nConstraints:\n\n * 1 <= numCourses <= 2000\n * 0 <= prerequisites.length <= numCourses * (numCourses - 1)\n * prerequisites[i].length == 2\n * 0 <= ai, bi < numCourses\n * ai != bi\n * All the pairs [ai, bi] are distinct.",
        "Answer": "",
        "title": "course-schedule-ii"
    },
    {
        "Question": "Minimum Height Trees - A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n\nGiven a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).\n\nReturn a list of all MHTs' root labels. You can return the answer in any order.\n\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/01/e1.jpg]\n\n\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/01/e2.jpg]\n\n\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 2 * 104\n * edges.length == n - 1\n * 0 <= ai, bi < n\n * ai != bi\n * All the pairs (ai, bi) are distinct.\n * The given input is guaranteed to be a tree and there will be no repeated edges.",
        "Answer": "",
        "title": "minimum-height-trees"
    },
    {
        "Question": "Minimum Genetic Mutation - A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\n\nSuppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\n\n * For example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\n\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\n\nGiven the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\n\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\n\n \n\nExample 1:\n\n\nInput: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\nOutput: 1\n\n\nExample 2:\n\n\nInput: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\nOutput: 2\n\n\n \n\nConstraints:\n\n * 0 <= bank.length <= 10\n * startGene.length == endGene.length == bank[i].length == 8\n * startGene, endGene, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].",
        "Answer": "",
        "title": "minimum-genetic-mutation"
    },
    {
        "Question": "The Maze - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "the-maze"
    },
    {
        "Question": "The Maze III - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "the-maze-iii"
    },
    {
        "Question": "The Maze II - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "the-maze-ii"
    },
    {
        "Question": "01 Matrix - Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\n\nThe distance between two cells sharing a common edge is 1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg]\n\n\nInput: mat = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: [[0,0,0],[0,1,0],[0,0,0]]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg]\n\n\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]]\nOutput: [[0,0,0],[0,1,0],[1,2,1]]\n\n\n \n\nConstraints:\n\n * m == mat.length\n * n == mat[i].length\n * 1 <= m, n <= 104\n * 1 <= m * n <= 104\n * mat[i][j] is either 0 or 1.\n * There is at least one 0 in mat.\n\n \n\nNote: This question is the same as 1765: https://leetcode.com/problems/map-of-highest-peak/ [https://leetcode.com/problems/map-of-highest-peak/description/]",
        "Answer": "",
        "title": "01-matrix"
    },
    {
        "Question": "Cut Off Trees for Golf Event - You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:\n\n * 0 means the cell cannot be walked through.\n * 1 represents an empty cell that can be walked through.\n * A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).\n\nStarting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.\n\nNote: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg]\n\n\nInput: forest = [[1,2,3],[0,0,4],[7,6,5]]\nOutput: 6\nExplanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg]\n\n\nInput: forest = [[1,2,3],[0,0,0],[7,6,5]]\nOutput: -1\nExplanation: The trees in the bottom row cannot be accessed as the middle row is blocked.\n\n\nExample 3:\n\n\nInput: forest = [[2,3,4],[0,0,5],[8,7,6]]\nOutput: 6\nExplanation: You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n\n\n \n\nConstraints:\n\n * m == forest.length\n * n == forest[i].length\n * 1 <= m, n <= 50\n * 0 <= forest[i][j] <= 109\n * Heights of all trees are distinct.",
        "Answer": "",
        "title": "cut-off-trees-for-golf-event"
    },
    {
        "Question": "Closest Leaf in a Binary Tree - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "closest-leaf-in-a-binary-tree"
    },
    {
        "Question": "Network Delay Time - You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png]\n\n\nInput: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\nOutput: 2\n\n\nExample 2:\n\n\nInput: times = [[1,2,1]], n = 2, k = 1\nOutput: 1\n\n\nExample 3:\n\n\nInput: times = [[1,2,1]], n = 2, k = 2\nOutput: -1\n\n\n \n\nConstraints:\n\n * 1 <= k <= n <= 100\n * 1 <= times.length <= 6000\n * times[i].length == 3\n * 1 <= ui, vi <= n\n * ui != vi\n * 0 <= wi <= 100\n * All the pairs (ui, vi) are unique. (i.e., no multiple edges.)",
        "Answer": "",
        "title": "network-delay-time"
    },
    {
        "Question": "Open the Lock - You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.\n\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\n\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n \n\nExample 1:\n\n\nInput: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\nOutput: 6\nExplanation: \nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\n\n\nExample 2:\n\n\nInput: deadends = [\"8888\"], target = \"0009\"\nOutput: 1\nExplanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\n\n\nExample 3:\n\n\nInput: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\nOutput: -1\nExplanation: We cannot reach the target without getting stuck.\n\n\n \n\nConstraints:\n\n * 1 <= deadends.length <= 500\n * deadends[i].length == 4\n * target.length == 4\n * target will not be in the list deadends.\n * target and deadends[i] consist of digits only.",
        "Answer": "",
        "title": "open-the-lock"
    },
    {
        "Question": "Sliding Puzzle - On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n\nGiven the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg]\n\n\nInput: board = [[1,2,3],[4,0,5]]\nOutput: 1\nExplanation: Swap the 0 and the 5 in one move.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg]\n\n\nInput: board = [[1,2,3],[5,4,0]]\nOutput: -1\nExplanation: No number of moves will make the board solved.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg]\n\n\nInput: board = [[4,1,2],[5,0,3]]\nOutput: 5\nExplanation: 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]\n\n\n \n\nConstraints:\n\n * board.length == 2\n * board[i].length == 3\n * 0 <= board[i][j] <= 5\n * Each value board[i][j] is unique.",
        "Answer": "",
        "title": "sliding-puzzle"
    },
    {
        "Question": "Cheapest Flights Within K Stops - There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\n\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png]\n\n\nInput: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png]\n\n\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png]\n\n\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 100\n * 0 <= flights.length <= (n * (n - 1) / 2)\n * flights[i].length == 3\n * 0 <= fromi, toi < n\n * fromi != toi\n * 1 <= pricei <= 104\n * There will not be any multiple flights between two cities.\n * 0 <= src, dst, k < n\n * src != dst",
        "Answer": "",
        "title": "cheapest-flights-within-k-stops"
    },
    {
        "Question": "Bus Routes - You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\n\n * For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.\n\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\n\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\n\n \n\nExample 1:\n\n\nInput: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\nOutput: 2\nExplanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n\n\nExample 2:\n\n\nInput: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\nOutput: -1\n\n\n \n\n \n\nConstraints:\n\n * 1 <= routes.length <= 500.\n * 1 <= routes[i].length <= 105\n * All the values of routes[i] are unique.\n * sum(routes[i].length) <= 105\n * 0 <= routes[i][j] < 106\n * 0 <= source, target < 106",
        "Answer": "",
        "title": "bus-routes"
    },
    {
        "Question": "K-Similar Strings - Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\n\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.\n\n \n\nExample 1:\n\n\nInput: s1 = \"ab\", s2 = \"ba\"\nOutput: 1\nExplanation: The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\".\n\n\nExample 2:\n\n\nInput: s1 = \"abc\", s2 = \"bca\"\nOutput: 2\nExplanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\".\n\n\n \n\nConstraints:\n\n * 1 <= s1.length <= 20\n * s2.length == s1.length\n * s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.\n * s2 is an anagram of s1.",
        "Answer": "",
        "title": "k-similar-strings"
    },
    {
        "Question": "Shortest Path to Get All Keys - You are given an m x n grid grid where:\n\n * '.' is an empty cell.\n * '#' is a wall.\n * '@' is the starting point.\n * Lowercase letters represent keys.\n * Uppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\n\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\n\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\n\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-keys2.jpg]\n\n\nInput: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-key2.jpg]\n\n\nInput: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-keys3.jpg]\n\n\nInput: grid = [\"@Aa\"]\nOutput: -1\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 30\n * grid[i][j] is either an English letter, '.', '#', or '@'. \n * There is exactly one '@' in the grid.\n * The number of keys in the grid is in the range [1, 6].\n * Each key in the grid is unique.\n * Each key in the grid has a matching lock.",
        "Answer": "",
        "title": "shortest-path-to-get-all-keys"
    },
    {
        "Question": "Reachable Nodes In Subdivided Graph - You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\n\nThe graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.\n\nTo subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].\n\nIn this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\n\nGiven the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png]\n\n\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\nOutput: 13\nExplanation: The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.\n\n\nExample 2:\n\n\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\nOutput: 23\n\n\nExample 3:\n\n\nInput: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\nOutput: 1\nExplanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n\n\n \n\nConstraints:\n\n * 0 <= edges.length <= min(n * (n - 1) / 2, 104)\n * edges[i].length == 3\n * 0 <= ui < vi < n\n * There are no multiple edges in the graph.\n * 0 <= cnti <= 104\n * 0 <= maxMoves <= 109\n * 1 <= n <= 3000",
        "Answer": "",
        "title": "reachable-nodes-in-subdivided-graph"
    },
    {
        "Question": "Possible Bipartition - We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\n\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.\n\n \n\nExample 1:\n\n\nInput: n = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: The first group has [1,4], and the second group has [2,3].\n\n\nExample 2:\n\n\nInput: n = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\nExplanation: We need at least 3 groups to divide them. We cannot put them in two groups.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 2000\n * 0 <= dislikes.length <= 104\n * dislikes[i].length == 2\n * 1 <= ai < bi <= n\n * All the pairs of dislikes are unique.",
        "Answer": "",
        "title": "possible-bipartition"
    },
    {
        "Question": "Cat and Mouse - A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\n\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\n\nThe mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\n\nDuring each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0).\n\nThen, the game can end in three ways:\n\n * If ever the Cat occupies the same node as the Mouse, the Cat wins.\n * If ever the Mouse reaches the Hole, the Mouse wins.\n * If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n\nGiven a graph, and assuming both players play optimally, return\n\n * 1 if the mouse wins the game,\n * 2 if the cat wins the game, or\n * 0 if the game is a draw.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg]\n\n\nInput: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\nOutput: 0\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg]\n\n\nInput: graph = [[1,3],[0],[3],[0,2]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 3 <= graph.length <= 50\n * 1 <= graph[i].length < graph.length\n * 0 <= graph[i][j] < graph.length\n * graph[i][j] != i\n * graph[i] is unique.\n * The mouse and the cat can always move.",
        "Answer": "",
        "title": "cat-and-mouse"
    },
    {
        "Question": "Shortest Bridge - You are given an n x n binary matrix grid where 1 represents land and 0 represents water.\n\nAn island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\n\nYou may change 0's to 1's to connect the two islands to form one island.\n\nReturn the smallest number of 0's you must flip to connect the two islands.\n\n \n\nExample 1:\n\n\nInput: grid = [[0,1],[1,0]]\nOutput: 1\n\n\nExample 2:\n\n\nInput: grid = [[0,1,0],[0,0,0],[0,0,1]]\nOutput: 2\n\n\nExample 3:\n\n\nInput: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == grid.length == grid[i].length\n * 2 <= n <= 100\n * grid[i][j] is either 0 or 1.\n * There are exactly two islands in grid.",
        "Answer": "",
        "title": "shortest-bridge"
    },
    {
        "Question": "Numbers With Same Consecutive Differences - Given two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. You may return the answer in any order.\n\nNote that the integers should not have leading zeros. Integers as 02 and 043 are not allowed.\n\n \n\nExample 1:\n\n\nInput: n = 3, k = 7\nOutput: [181,292,707,818,929]\nExplanation: Note that 070 is not a valid number, because it has leading zeroes.\n\n\nExample 2:\n\n\nInput: n = 2, k = 1\nOutput: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n\n\n \n\nConstraints:\n\n * 2 <= n <= 9\n * 0 <= k <= 9",
        "Answer": "",
        "title": "numbers-with-same-consecutive-differences"
    },
    {
        "Question": "Rotting Oranges - You are given an m x n grid where each cell can have one of three values:\n\n * 0 representing an empty cell,\n * 1 representing a fresh orange, or\n * 2 representing a rotten orange.\n\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2019/02/16/oranges.png]\n\n\nInput: grid = [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4\n\n\nExample 2:\n\n\nInput: grid = [[2,1,1],[0,1,1],[1,0,1]]\nOutput: -1\nExplanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n\n\nExample 3:\n\n\nInput: grid = [[0,2]]\nOutput: 0\nExplanation: Since there are already no fresh oranges at minute 0, the answer is just 0.\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 10\n * grid[i][j] is 0, 1, or 2.",
        "Answer": "",
        "title": "rotting-oranges"
    },
    {
        "Question": "Path Sum - Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n\nA leaf is a node with no children.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg]\n\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg]\n\n\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\n\nExample 3:\n\n\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 5000].\n * -1000 <= Node.val <= 1000\n * -1000 <= targetSum <= 1000",
        "Answer": "",
        "title": "path-sum"
    },
    {
        "Question": "Path Sum II - Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg]\n\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg]\n\n\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n\n\nExample 3:\n\n\nInput: root = [1,2], targetSum = 0\nOutput: []\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 5000].\n * -1000 <= Node.val <= 1000\n * -1000 <= targetSum <= 1000",
        "Answer": "",
        "title": "path-sum-ii"
    },
    {
        "Question": "Binary Tree Right Side View - Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n\n \n\nExample 1:\n\nInput: root = [1,2,3,null,5,null,4]\n\nOutput: [1,3,4]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/11/24/tmpd5jn43fs-1.png]\n\nExample 2:\n\nInput: root = [1,2,3,4,null,null,null,5]\n\nOutput: [1,3,4,5]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2024/11/24/tmpkpe40xeh-1.png]\n\nExample 3:\n\nInput: root = [1,null,3]\n\nOutput: [1,3]\n\nExample 4:\n\nInput: root = []\n\nOutput: []\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [0, 100].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "binary-tree-right-side-view"
    },
    {
        "Question": "Number of Islands - Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n \n\nExample 1:\n\n\nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n\n\nExample 2:\n\n\nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 300\n * grid[i][j] is '0' or '1'.",
        "Answer": "",
        "title": "number-of-islands"
    },
    {
        "Question": "Lowest Common Ancestor of a Binary Tree - Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia [https://en.wikipedia.org/wiki/Lowest_common_ancestor]: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/14/binarytree.png]\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/14/binarytree.png]\n\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\n\nExample 3:\n\n\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [2, 105].\n * -109 <= Node.val <= 109\n * All Node.val are unique.\n * p != q\n * p and q will exist in the tree.",
        "Answer": "",
        "title": "lowest-common-ancestor-of-a-binary-tree"
    },
    {
        "Question": "Binary Tree Paths - Given the root of a binary tree, return all root-to-leaf paths in any order.\n\nA leaf is a node with no children.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg]\n\n\nInput: root = [1,2,3,null,5]\nOutput: [\"1->2->5\",\"1->3\"]\n\n\nExample 2:\n\n\nInput: root = [1]\nOutput: [\"1\"]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 100].\n * -100 <= Node.val <= 100",
        "Answer": "",
        "title": "binary-tree-paths"
    },
    {
        "Question": "Expression Add Operators - Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\n\nNote that operands in the returned expressions should not contain leading zeros.\n\nNote that a number can contain multiple digits.\n\n \n\nExample 1:\n\n\nInput: num = \"123\", target = 6\nOutput: [\"1*2*3\",\"1+2+3\"]\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n\n\nExample 2:\n\n\nInput: num = \"232\", target = 8\nOutput: [\"2*3+2\",\"2+3*2\"]\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n\n\nExample 3:\n\n\nInput: num = \"3456237490\", target = 9191\nOutput: []\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n\n\n \n\nConstraints:\n\n * 1 <= num.length <= 10\n * num consists of only digits.\n * -231 <= target <= 231 - 1",
        "Answer": "",
        "title": "expression-add-operators"
    },
    {
        "Question": "Remove Invalid Parentheses - Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\nReturn a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n\n\nExample 2:\n\n\nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n\n\nExample 3:\n\n\nInput: s = \")(\"\nOutput: [\"\"]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 25\n * s consists of lowercase English letters and parentheses '(' and ')'.\n * There will be at most 20 parentheses in s.",
        "Answer": "",
        "title": "remove-invalid-parentheses"
    },
    {
        "Question": "Longest Increasing Path in a Matrix - Given an m x n integers matrix, return the length of the longest increasing path in matrix.\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg]\n\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg]\n\n\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n\nExample 3:\n\n\nInput: matrix = [[1]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 200\n * 0 <= matrix[i][j] <= 231 - 1",
        "Answer": "",
        "title": "longest-increasing-path-in-a-matrix"
    },
    {
        "Question": "Pacific Atlantic Water Flow - There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg]\n\n\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\nExplanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n       [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n       [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n       [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n       [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n       [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n\n\nExample 2:\n\n\nInput: heights = [[1]]\nOutput: [[0,0]]\nExplanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n\n\n \n\nConstraints:\n\n * m == heights.length\n * n == heights[r].length\n * 1 <= m, n <= 200\n * 0 <= heights[r][c] <= 105",
        "Answer": "",
        "title": "pacific-atlantic-water-flow"
    },
    {
        "Question": "K-th Smallest in Lexicographical Order - Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\n\n \n\nExample 1:\n\n\nInput: n = 13, k = 2\nOutput: 10\nExplanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n\n\nExample 2:\n\n\nInput: n = 1, k = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= k <= n <= 109",
        "Answer": "",
        "title": "k-th-smallest-in-lexicographical-order"
    },
    {
        "Question": "Can I Win - In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\n\nWhat if we change the game so that players cannot re-use integers?\n\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n\n \n\nExample 1:\n\n\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n\n\nExample 2:\n\n\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n\n\nExample 3:\n\n\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n\n\n \n\nConstraints:\n\n * 1 <= maxChoosableInteger <= 20\n * 0 <= desiredTotal <= 300",
        "Answer": "",
        "title": "can-i-win"
    },
    {
        "Question": "Find Largest Value in Each Tree Row - Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg]\n\n\nInput: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]\n\n\nExample 2:\n\n\nInput: root = [1,2,3]\nOutput: [1,3]\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree will be in the range [0, 104].\n * -231 <= Node.val <= 231 - 1",
        "Answer": "",
        "title": "find-largest-value-in-each-tree-row"
    },
    {
        "Question": "Number of Provinces - There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\n\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\n\nReturn the total number of provinces.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg]\n\n\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg]\n\n\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= n <= 200\n * n == isConnected.length\n * n == isConnected[i].length\n * isConnected[i][j] is 1 or 0.\n * isConnected[i][i] == 1\n * isConnected[i][j] == isConnected[j][i]",
        "Answer": "",
        "title": "friend-circles"
    },
    {
        "Question": "Shopping Offers - In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n\nYou are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\n\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.\n\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n\n \n\nExample 1:\n\n\nInput: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\nOutput: 14\nExplanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n\n\nExample 2:\n\n\nInput: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\nOutput: 11\nExplanation: The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n\n\n \n\nConstraints:\n\n * n == price.length == needs.length\n * 1 <= n <= 6\n * 0 <= price[i], needs[i] <= 10\n * 1 <= special.length <= 100\n * special[i].length == n + 1\n * 0 <= special[i][j] <= 50\n * The input is generated that at least one of special[i][j] is non-zero for 0 <= j <= n - 1.",
        "Answer": "",
        "title": "shopping-offers"
    },
    {
        "Question": "Employee Importance - You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\n\nYou are given an array of employees employees where:\n\n * employees[i].id is the ID of the ith employee.\n * employees[i].importance is the importance value of the ith employee.\n * employees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee.\n\nGiven an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/31/emp1-tree.jpg]\n\n\nInput: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\nOutput: 11\nExplanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/31/emp2-tree.jpg]\n\n\nInput: employees = [[1,2,[5]],[5,-3,[]]], id = 5\nOutput: -3\nExplanation: Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3.\n\n\n \n\nConstraints:\n\n * 1 <= employees.length <= 2000\n * 1 <= employees[i].id <= 2000\n * All employees[i].id are unique.\n * -100 <= employees[i].importance <= 100\n * One employee has at most one direct leader and may have several subordinates.\n * The IDs in employees[i].subordinates are valid IDs.",
        "Answer": "",
        "title": "employee-importance"
    },
    {
        "Question": "Max Area of Island - You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nThe area of an island is the number of cells with a value 1 in the island.\n\nReturn the maximum area of an island in grid. If there is no island, return 0.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg]\n\n\nInput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.\n\n\nExample 2:\n\n\nInput: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 50\n * grid[i][j] is either 0 or 1.",
        "Answer": "",
        "title": "max-area-of-island"
    },
    {
        "Question": "Flood Fill - You are given an image represented by an m x n grid of integers image, where image[i][j] represents the pixel value of the image. You are also given three integers sr, sc, and color. Your task is to perform a flood fill on the image starting from the pixel image[sr][sc].\n\nTo perform a flood fill:\n\n 1. Begin with the starting pixel and change its color to color.\n 2. Perform the same process for each pixel that is directly adjacent (pixels that share a side with the original pixel, either horizontally or vertically) and shares the same color as the starting pixel.\n 3. Keep repeating this process by checking neighboring pixels of the updated pixels and modifying their color if it matches the original color of the starting pixel.\n 4. The process stops when there are no more adjacent pixels of the original color to update.\n\nReturn the modified image after performing the flood fill.\n\n \n\nExample 1:\n\nInput: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\n\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\n\nExplanation:\n\n[https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg]\n\nFrom the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\n\nNote the bottom corner is not colored 2, because it is not horizontally or vertically connected to the starting pixel.\n\nExample 2:\n\nInput: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\n\nOutput: [[0,0,0],[0,0,0]]\n\nExplanation:\n\nThe starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image.\n\n \n\nConstraints:\n\n * m == image.length\n * n == image[i].length\n * 1 <= m, n <= 50\n * 0 <= image[i][j], color < 216\n * 0 <= sr < m\n * 0 <= sc < n",
        "Answer": "",
        "title": "flood-fill"
    },
    {
        "Question": "Contain Virus - A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\n\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\n\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\n\nReturn the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/01/virus11-grid.jpg]\n\n\nInput: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\nOutput: 10\nExplanation: There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n[https://assets.leetcode.com/uploads/2021/06/01/virus12edited-grid.jpg]\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n[https://assets.leetcode.com/uploads/2021/06/01/virus13edited-grid.jpg]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/01/virus2-grid.jpg]\n\n\nInput: isInfected = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 4\nExplanation: Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells.\n\n\nExample 3:\n\n\nInput: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\nOutput: 13\nExplanation: The region on the left only builds two new walls.\n\n\n \n\nConstraints:\n\n * m == isInfected.length\n * n == isInfected[i].length\n * 1 <= m, n <= 50\n * isInfected[i][j] is either 0 or 1.\n * There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.",
        "Answer": "",
        "title": "contain-virus"
    },
    {
        "Question": "Cracking the Safe - There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\n\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\n\n * For example, the correct password is \"345\" and you enter in \"012345\":\n   * After typing 0, the most recent 3 digits is \"0\", which is incorrect.\n   * After typing 1, the most recent 3 digits is \"01\", which is incorrect.\n   * After typing 2, the most recent 3 digits is \"012\", which is incorrect.\n   * After typing 3, the most recent 3 digits is \"123\", which is incorrect.\n   * After typing 4, the most recent 3 digits is \"234\", which is incorrect.\n   * After typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\n\nReturn any string of minimum length that will unlock the safe at some point of entering it.\n\n \n\nExample 1:\n\n\nInput: n = 1, k = 2\nOutput: \"10\"\nExplanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.\n\n\nExample 2:\n\n\nInput: n = 2, k = 2\nOutput: \"01100\"\nExplanation: For each possible password:\n- \"00\" is typed in starting from the 4th digit.\n- \"01\" is typed in starting from the 1st digit.\n- \"10\" is typed in starting from the 3rd digit.\n- \"11\" is typed in starting from the 2nd digit.\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 4\n * 1 <= k <= 10\n * 1 <= kn <= 4096",
        "Answer": "",
        "title": "cracking-the-safe"
    },
    {
        "Question": "Pyramid Transition Matrix - You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.\n\nTo make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\n\n * For example, \"ABC\" represents a triangular pattern with a 'C' block stacked on top of an 'A' (left) and 'B' (right) block. Note that this is different from \"BAC\" where 'B' is on the left bottom and 'A' is on the right bottom.\n\nYou start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.\n\nGiven bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/08/26/pyramid1-grid.jpg]\n\n\nInput: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]\nOutput: true\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/08/26/pyramid2-grid.jpg]\n\n\nInput: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]\nOutput: false\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\n\n\n \n\nConstraints:\n\n * 2 <= bottom.length <= 6\n * 0 <= allowed.length <= 216\n * allowed[i].length == 3\n * The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}.\n * All the values of allowed are unique.",
        "Answer": "",
        "title": "pyramid-transition-matrix"
    },
    {
        "Question": "Is Graph Bipartite? - There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\n\n * There are no self-edges (graph[u] does not contain u).\n * There are no parallel edges (graph[u] does not contain duplicate values).\n * If v is in graph[u], then u is in graph[v] (the graph is undirected).\n * The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\n\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\n\nReturn true if and only if it is bipartite.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg]\n\n\nInput: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg]\n\n\nInput: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.\n\n \n\nConstraints:\n\n * graph.length == n\n * 1 <= n <= 100\n * 0 <= graph[u].length < n\n * 0 <= graph[u][i] <= n - 1\n * graph[u] does not contain u.\n * All the values of graph[u] are unique.\n * If graph[u] contains v, then graph[v] contains u.",
        "Answer": "",
        "title": "is-graph-bipartite"
    },
    {
        "Question": "All Paths From Source to Target - Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\n\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg]\n\n\nInput: graph = [[1,2],[3],[3],[]]\nOutput: [[0,1,3],[0,2,3]]\nExplanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg]\n\n\nInput: graph = [[4,3,1],[3,2,4],[3],[4],[]]\nOutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n\n\n \n\nConstraints:\n\n * n == graph.length\n * 2 <= n <= 15\n * 0 <= graph[i][j] < n\n * graph[i][j] != i (i.e., there will be no self-loops).\n * All the elements of graph[i] are unique.\n * The input graph is guaranteed to be a DAG.",
        "Answer": "",
        "title": "all-paths-from-source-to-target"
    },
    {
        "Question": "Find Eventual Safe States - There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\n\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\n\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\n\n \n\nExample 1:\n\nIllustration of graph [https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png]\n\n\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\nOutput: [2,4,5,6]\nExplanation: The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\n\nExample 2:\n\n\nInput: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\nOutput: [4]\nExplanation:\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n\n\n \n\nConstraints:\n\n * n == graph.length\n * 1 <= n <= 104\n * 0 <= graph[i].length <= n\n * 0 <= graph[i][j] <= n - 1\n * graph[i] is sorted in a strictly increasing order.\n * The graph may contain self-loops.\n * The number of edges in the graph will be in the range [1, 4 * 104].",
        "Answer": "",
        "title": "find-eventual-safe-states"
    },
    {
        "Question": "Making A Large Island - You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\n\nReturn the size of the largest island in grid after applying this operation.\n\nAn island is a 4-directionally connected group of 1s.\n\n \n\nExample 1:\n\n\nInput: grid = [[1,0],[0,1]]\nOutput: 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n\n\nExample 2:\n\n\nInput: grid = [[1,1],[1,0]]\nOutput: 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\n\nExample 3:\n\n\nInput: grid = [[1,1],[1,1]]\nOutput: 4\nExplanation: Can't change any 0 to 1, only one island with area = 4.\n\n\n \n\nConstraints:\n\n * n == grid.length\n * n == grid[i].length\n * 1 <= n <= 500\n * grid[i][j] is either 0 or 1.",
        "Answer": "",
        "title": "making-a-large-island"
    },
    {
        "Question": "Sum of Distances in Tree - There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\n\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n\nReturn an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg]\n\n\nInput: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\nOutput: [8,12,6,10,10,10]\nExplanation: The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg]\n\n\nInput: n = 1, edges = []\nOutput: [0]\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg]\n\n\nInput: n = 2, edges = [[1,0]]\nOutput: [1,1]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 3 * 104\n * edges.length == n - 1\n * edges[i].length == 2\n * 0 <= ai, bi < n\n * ai != bi\n * The given input represents a valid tree.",
        "Answer": "",
        "title": "sum-of-distances-in-tree"
    },
    {
        "Question": "Keys and Rooms - There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: rooms = [[1],[2],[3],[]]\nOutput: true\nExplanation: \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n\n\nExample 2:\n\n\nInput: rooms = [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can not enter room number 2 since the only key that unlocks it is in that room.\n\n\n \n\nConstraints:\n\n * n == rooms.length\n * 2 <= n <= 1000\n * 0 <= rooms[i].length <= 1000\n * 1 <= sum(rooms[i].length) <= 3000\n * 0 <= rooms[i][j] < n\n * All the values of rooms[i] are unique.",
        "Answer": "",
        "title": "keys-and-rooms"
    },
    {
        "Question": "Loud and Rich - There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\n\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\n\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.\n\n \n\nExample 1:\n\n\nInput: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation: \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.\n\n\nExample 2:\n\n\nInput: richer = [], quiet = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\n * n == quiet.length\n * 1 <= n <= 500\n * 0 <= quiet[i] < n\n * All the values of quiet are unique.\n * 0 <= richer.length <= n * (n - 1) / 2\n * 0 <= ai, bi < n\n * ai != bi\n * All the pairs of richer are unique.\n * The observations in richer are all logically consistent.",
        "Answer": "",
        "title": "loud-and-rich"
    },
    {
        "Question": "Letter Combinations of a Phone Number - Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n[https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png]\n\n \n\nExample 1:\n\n\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n\n\nExample 2:\n\n\nInput: digits = \"\"\nOutput: []\n\n\nExample 3:\n\n\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n\n\n \n\nConstraints:\n\n * 0 <= digits.length <= 4\n * digits[i] is a digit in the range ['2', '9'].",
        "Answer": "",
        "title": "letter-combinations-of-a-phone-number"
    },
    {
        "Question": "Generate Parentheses - Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n \n\nExample 1:\n\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\n\nExample 2:\n\nInput: n = 1\nOutput: [\"()\"]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 8",
        "Answer": "",
        "title": "generate-parentheses"
    },
    {
        "Question": "Sudoku Solver - Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\n\n 1. Each of the digits 1-9 must occur exactly once in each row.\n 2. Each of the digits 1-9 must occur exactly once in each column.\n 3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n\n \n\nExample 1:\n\n[https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png]\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n[https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png]\n\n\n \n\nConstraints:\n\n * board.length == 9\n * board[i].length == 9\n * board[i][j] is a digit or '.'.\n * It is guaranteed that the input board has only one solution.",
        "Answer": "",
        "title": "sudoku-solver"
    },
    {
        "Question": "Combination Sum - Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n\n \n\nExample 1:\n\n\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n\n\nExample 2:\n\n\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n\n\nExample 3:\n\n\nInput: candidates = [2], target = 1\nOutput: []\n\n\n \n\nConstraints:\n\n * 1 <= candidates.length <= 30\n * 2 <= candidates[i] <= 40\n * All elements of candidates are distinct.\n * 1 <= target <= 40",
        "Answer": "",
        "title": "combination-sum"
    },
    {
        "Question": "Combination Sum II - Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n\nEach number in candidates may only be used once in the combination.\n\nNote: The solution set must not contain duplicate combinations.\n\n \n\nExample 1:\n\n\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n\n\nExample 2:\n\n\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n\n\n \n\nConstraints:\n\n * 1 <= candidates.length <= 100\n * 1 <= candidates[i] <= 50\n * 1 <= target <= 30",
        "Answer": "",
        "title": "combination-sum-ii"
    },
    {
        "Question": "Permutations - Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n\n \n\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n\n\nExample 3:\n\nInput: nums = [1]\nOutput: [[1]]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 6\n * -10 <= nums[i] <= 10\n * All the integers of nums are unique.",
        "Answer": "",
        "title": "permutations"
    },
    {
        "Question": "Permutations II - Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n\n \n\nExample 1:\n\n\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\n\nExample 2:\n\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 8\n * -10 <= nums[i] <= 10",
        "Answer": "",
        "title": "permutations-ii"
    },
    {
        "Question": "N-Queens - The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/13/queens.jpg]\n\n\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: [[\"Q\"]]\n\n\n \n\nConstraints:\n\n * 1 <= n <= 9",
        "Answer": "",
        "title": "n-queens"
    },
    {
        "Question": "N-Queens II - The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/13/queens.jpg]\n\n\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 9",
        "Answer": "",
        "title": "n-queens-ii"
    },
    {
        "Question": "Combinations - Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n\nYou may return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n\n\nExample 2:\n\n\nInput: n = 1, k = 1\nOutput: [[1]]\nExplanation: There is 1 choose 1 = 1 total combination.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 20\n * 1 <= k <= n",
        "Answer": "",
        "title": "combinations"
    },
    {
        "Question": "Word Search - Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/04/word2.jpg]\n\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg]\n\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2020/10/15/word3.jpg]\n\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false\n\n\n \n\nConstraints:\n\n * m == board.length\n * n = board[i].length\n * 1 <= m, n <= 6\n * 1 <= word.length <= 15\n * board and word consists of only lowercase and uppercase English letters.\n\n \n\nFollow up: Could you use search pruning to make your solution faster with a larger board?",
        "Answer": "",
        "title": "word-search"
    },
    {
        "Question": "Restore IP Addresses - A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n\n * For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n\n \n\nExample 1:\n\n\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\n\n\nExample 2:\n\n\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]\n\n\nExample 3:\n\n\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 20\n * s consists of digits only.",
        "Answer": "",
        "title": "restore-ip-addresses"
    },
    {
        "Question": "Subsets - Given an integer array nums of unique elements, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\n\nExample 2:\n\n\nInput: nums = [0]\nOutput: [[],[0]]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 10\n * -10 <= nums[i] <= 10\n * All the numbers of nums are unique.",
        "Answer": "",
        "title": "subsets"
    },
    {
        "Question": "Subsets II - Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n\n \n\nExample 1:\n\nInput: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n\n\nExample 2:\n\nInput: nums = [0]\nOutput: [[],[0]]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 10\n * -10 <= nums[i] <= 10",
        "Answer": "",
        "title": "subsets-ii"
    },
    {
        "Question": "Word Ladder II - A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\n * Every adjacent pair of words differs by a single letter.\n * Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n * sk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\n\n \n\nExample 1:\n\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation: There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n\n\nExample 2:\n\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n\n \n\nConstraints:\n\n * 1 <= beginWord.length <= 5\n * endWord.length == beginWord.length\n * 1 <= wordList.length <= 500\n * wordList[i].length == beginWord.length\n * beginWord, endWord, and wordList[i] consist of lowercase English letters.\n * beginWord != endWord\n * All the words in wordList are unique.\n * The sum of all shortest transformation sequences does not exceed 105.",
        "Answer": "",
        "title": "word-ladder-ii"
    },
    {
        "Question": "Palindrome Partitioning - Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n\n \n\nExample 1:\n\nInput: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n\n\nExample 2:\n\nInput: s = \"a\"\nOutput: [[\"a\"]]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 16\n * s contains only lowercase English letters.",
        "Answer": "",
        "title": "palindrome-partitioning"
    },
    {
        "Question": "Word Break II - Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\n \n\nExample 1:\n\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\n\nExample 2:\n\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\n\nExample 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 20\n * 1 <= wordDict.length <= 1000\n * 1 <= wordDict[i].length <= 10\n * s and wordDict[i] consist of only lowercase English letters.\n * All the strings of wordDict are unique.\n * Input is generated in a way that the length of the answer doesn't exceed 105.",
        "Answer": "",
        "title": "word-break-ii"
    },
    {
        "Question": "Word Search II - Given an m x n board of characters and a list of strings words, return all words on the board.\n\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/07/search1.jpg]\n\n\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/07/search2.jpg]\n\n\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n\n\n \n\nConstraints:\n\n * m == board.length\n * n == board[i].length\n * 1 <= m, n <= 12\n * board[i][j] is a lowercase English letter.\n * 1 <= words.length <= 3 * 104\n * 1 <= words[i].length <= 10\n * words[i] consists of lowercase English letters.\n * All the strings of words are unique.",
        "Answer": "",
        "title": "word-search-ii"
    },
    {
        "Question": "Combination Sum III - Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\n * Only numbers 1 through 9 are used.\n * Each number is used at most once.\n\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\n \n\nExample 1:\n\n\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.\n\nExample 2:\n\n\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n\n\nExample 3:\n\n\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n\n\n \n\nConstraints:\n\n * 2 <= k <= 9\n * 1 <= n <= 60",
        "Answer": "",
        "title": "combination-sum-iii"
    },
    {
        "Question": "Zuma Game - You are playing a variation of the game Zuma.\n\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\n\nYour goal is to clear all of the balls from the board. On each turn:\n\n * Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.\n * If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\n   * If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n * If there are no more balls on the board, then you win the game.\n * Repeat this process until you either win or do not have any more balls in your hand.\n\nGiven a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\n\n \n\nExample 1:\n\n\nInput: board = \"WRRBBW\", hand = \"RB\"\nOutput: -1\nExplanation: It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert.\n\nExample 2:\n\n\nInput: board = \"WWRRBBWW\", hand = \"WRBRW\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board.\n\n\nExample 3:\n\n\nInput: board = \"G\", hand = \"GGGGG\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board.\n\n\n \n\nConstraints:\n\n * 1 <= board.length <= 16\n * 1 <= hand.length <= 5\n * board and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'.\n * The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.",
        "Answer": "",
        "title": "zuma-game"
    },
    {
        "Question": "Non-decreasing Subsequences - Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\n\n \n\nExample 1:\n\n\nInput: nums = [4,6,7,7]\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n\n\nExample 2:\n\n\nInput: nums = [4,4,3,2,1]\nOutput: [[4,4]]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 15\n * -100 <= nums[i] <= 100",
        "Answer": "",
        "title": "increasing-subsequences"
    },
    {
        "Question": "Beautiful Arrangement - Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\n\n * perm[i] is divisible by i.\n * i is divisible by perm[i].\n\nGiven an integer n, return the number of the beautiful arrangements that you can construct.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 2\nExplanation: \nThe first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 15",
        "Answer": "",
        "title": "beautiful-arrangement"
    },
    {
        "Question": "Implement Magic Dictionary - Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n\nImplement the MagicDictionary class:\n\n * MagicDictionary() Initializes the object.\n * void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.\n * bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.\n\n \n\nExample 1:\n\n\nInput\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\nOutput\n[null, null, false, true, false, false]\n\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False\n\n\n \n\nConstraints:\n\n * 1 <= dictionary.length <= 100\n * 1 <= dictionary[i].length <= 100\n * dictionary[i] consists of only lower-case English letters.\n * All the strings in dictionary are distinct.\n * 1 <= searchWord.length <= 100\n * searchWord consists of only lower-case English letters.\n * buildDict will be called only once before search.\n * At most 100 calls will be made to search.",
        "Answer": "",
        "title": "implement-magic-dictionary"
    },
    {
        "Question": "24 Game - You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\n\nYou are restricted with the following rules:\n\n * The division operator '/' represents real division, not integer division.\n   * For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\n * Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.\n   * For example, if cards = [1, 1, 1, 1], the expression \"-1 - 1 - 1 - 1\" is not allowed.\n * You cannot concatenate numbers together\n   * For example, if cards = [1, 2, 1, 2], the expression \"12 + 12\" is not valid.\n\nReturn true if you can get such expression that evaluates to 24, and false otherwise.\n\n \n\nExample 1:\n\n\nInput: cards = [4,1,8,7]\nOutput: true\nExplanation: (8-4) * (7-1) = 24\n\n\nExample 2:\n\n\nInput: cards = [1,2,1,2]\nOutput: false\n\n\n \n\nConstraints:\n\n * cards.length == 4\n * 1 <= cards[i] <= 9",
        "Answer": "",
        "title": "24-game"
    },
    {
        "Question": "Partition to K Equal Sum Subsets - Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\n\n \n\nExample 1:\n\n\nInput: nums = [4,3,2,3,5,2,1], k = 4\nOutput: true\nExplanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4], k = 3\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= k <= nums.length <= 16\n * 1 <= nums[i] <= 104\n * The frequency of each element is in the range [1, 4].",
        "Answer": "",
        "title": "partition-to-k-equal-sum-subsets"
    },
    {
        "Question": "Maximum Length of Repeated Subarray - Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\nOutput: 3\nExplanation: The repeated subarray with maximum length is [3,2,1].\n\n\nExample 2:\n\n\nInput: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\nOutput: 5\nExplanation: The repeated subarray with maximum length is [0,0,0,0,0].\n\n\n \n\nConstraints:\n\n * 1 <= nums1.length, nums2.length <= 1000\n * 0 <= nums1[i], nums2[i] <= 100",
        "Answer": "",
        "title": "maximum-length-of-repeated-subarray"
    },
    {
        "Question": "Letter Case Permutation - Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.\n\nReturn a list of all possible strings we could create. Return the output in any order.\n\n \n\nExample 1:\n\n\nInput: s = \"a1b2\"\nOutput: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]\n\n\nExample 2:\n\n\nInput: s = \"3z4\"\nOutput: [\"3z4\",\"3Z4\"]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 12\n * s consists of lowercase English letters, uppercase English letters, and digits.",
        "Answer": "",
        "title": "letter-case-permutation"
    },
    {
        "Question": "Number of Squareful Arrays - An array is squareful if the sum of every pair of adjacent elements is a perfect square.\n\nGiven an integer array nums, return the number of permutations of nums that are squareful.\n\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].\n\n \n\nExample 1:\n\n\nInput: nums = [1,17,8]\nOutput: 2\nExplanation: [1,8,17] and [17,8,1] are the valid permutations.\n\n\nExample 2:\n\n\nInput: nums = [2,2,2]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 12\n * 0 <= nums[i] <= 109",
        "Answer": "",
        "title": "number-of-squareful-arrays"
    },
    {
        "Question": "Regular Expression Matching - Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n * '.' Matches any single character.\n * '*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\n \n\nExample 1:\n\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\n\nExample 3:\n\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 20\n * 1 <= p.length <= 20\n * s contains only lowercase English letters.\n * p contains only lowercase English letters, '.', and '*'.\n * It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.",
        "Answer": "",
        "title": "regular-expression-matching"
    },
    {
        "Question": "Wildcard Matching - Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n\n * '?' Matches any single character.\n * '*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\n \n\nExample 1:\n\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\n\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\n\n\nExample 3:\n\n\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n\n \n\nConstraints:\n\n * 0 <= s.length, p.length <= 2000\n * s contains only lowercase English letters.\n * p contains only lowercase English letters, '?' or '*'.",
        "Answer": "",
        "title": "wildcard-matching"
    },
    {
        "Question": "Maximum Subarray - Given an integer array nums, find the subarray with the largest sum, and return its sum.\n\n \n\nExample 1:\n\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n\n\nExample 2:\n\n\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n\n\nExample 3:\n\n\nInput: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * -104 <= nums[i] <= 104\n\n \n\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",
        "Answer": "",
        "title": "maximum-subarray"
    },
    {
        "Question": "Unique Paths - There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png]\n\n\nInput: m = 3, n = 7\nOutput: 28\n\n\nExample 2:\n\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n\n\n \n\nConstraints:\n\n * 1 <= m, n <= 100",
        "Answer": "",
        "title": "unique-paths"
    },
    {
        "Question": "Unique Paths II - You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg]\n\n\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg]\n\n\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * m == obstacleGrid.length\n * n == obstacleGrid[i].length\n * 1 <= m, n <= 100\n * obstacleGrid[i][j] is 0 or 1.",
        "Answer": "",
        "title": "unique-paths-ii"
    },
    {
        "Question": "Minimum Path Sum - Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\nNote: You can only move either down or right at any point in time.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg]\n\n\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\n\nExample 2:\n\n\nInput: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 200\n * 0 <= grid[i][j] <= 200",
        "Answer": "",
        "title": "minimum-path-sum"
    },
    {
        "Question": "Climbing Stairs - You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\n\nExample 2:\n\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n\n \n\nConstraints:\n\n * 1 <= n <= 45",
        "Answer": "",
        "title": "climbing-stairs"
    },
    {
        "Question": "Edit Distance - Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n\nYou have the following three operations permitted on a word:\n\n * Insert a character\n * Delete a character\n * Replace a character\n\n \n\nExample 1:\n\n\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\n\nExample 2:\n\n\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\n\n \n\nConstraints:\n\n * 0 <= word1.length, word2.length <= 500\n * word1 and word2 consist of lowercase English letters.",
        "Answer": "",
        "title": "edit-distance"
    },
    {
        "Question": "Scramble String - We can scramble a string s to get a string t using the following algorithm:\n\n 1. If the length of the string is 1, stop.\n 2. If the length of the string is > 1, do the following:\n    * Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n    * Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n    * Apply step 1 recursively on each of the two substrings x and y.\n\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n\n \n\nExample 1:\n\n\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n\n\nExample 2:\n\n\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\n\n\nExample 3:\n\n\nInput: s1 = \"a\", s2 = \"a\"\nOutput: true\n\n\n \n\nConstraints:\n\n * s1.length == s2.length\n * 1 <= s1.length <= 30\n * s1 and s2 consist of lowercase English letters.",
        "Answer": "",
        "title": "scramble-string"
    },
    {
        "Question": "Decode Ways - You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\n\n\"1\" -> 'A'\n\"2\" -> 'B'\n...\n\"25\" -> 'Y'\n\"26\" -> 'Z'\n\nHowever, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (\"2\" and \"5\" vs \"25\").\n\nFor example, \"11106\" can be decoded into:\n\n * \"AAJF\" with the grouping (1, 1, 10, 6)\n * \"KJF\" with the grouping (11, 10, 6)\n * The grouping (1, 11, 06) is invalid because \"06\" is not a valid code (only \"6\" is valid).\n\nNote: there may be strings that are impossible to decode.\n\nGiven a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n \n\nExample 1:\n\nInput: s = \"12\"\n\nOutput: 2\n\nExplanation:\n\n\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n\nExample 2:\n\nInput: s = \"226\"\n\nOutput: 3\n\nExplanation:\n\n\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n\nExample 3:\n\nInput: s = \"06\"\n\nOutput: 0\n\nExplanation:\n\n\"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\"). In this case, the string is not a valid encoding, so return 0.\n\n \n\nConstraints:\n\n * 1 <= s.length <= 100\n * s contains only digits and may contain leading zero(s).",
        "Answer": "",
        "title": "decode-ways"
    },
    {
        "Question": "Unique Binary Search Trees - Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg]\n\n\nInput: n = 3\nOutput: 5\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 19",
        "Answer": "",
        "title": "unique-binary-search-trees"
    },
    {
        "Question": "Interleaving String - Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n\n * s = s1 + s2 + ... + sn\n * t = t1 + t2 + ... + tm\n * |n - m| <= 1\n * The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\n\nNote: a + b is the concatenation of strings a and b.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg]\n\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\n\nExample 2:\n\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\n\nExample 3:\n\n\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true\n\n\n \n\nConstraints:\n\n * 0 <= s1.length, s2.length <= 100\n * 0 <= s3.length <= 200\n * s1, s2, and s3 consist of lowercase English letters.\n\n \n\nFollow up: Could you solve it using only O(s2.length) additional memory space?",
        "Answer": "",
        "title": "interleaving-string"
    },
    {
        "Question": "Distinct Subsequences - Given two strings s and t, return the number of distinct subsequences of s which equals t.\n\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\n \n\nExample 1:\n\n\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit\n\n\nExample 2:\n\n\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n\n \n\nConstraints:\n\n * 1 <= s.length, t.length <= 1000\n * s and t consist of English letters.",
        "Answer": "",
        "title": "distinct-subsequences"
    },
    {
        "Question": "Triangle - Given a triangle array, return the minimum path sum from top to bottom.\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n\n \n\nExample 1:\n\n\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n\n\nExample 2:\n\n\nInput: triangle = [[-10]]\nOutput: -10\n\n\n \n\nConstraints:\n\n * 1 <= triangle.length <= 200\n * triangle[0].length == 1\n * triangle[i].length == triangle[i - 1].length + 1\n * -104 <= triangle[i][j] <= 104\n\n \n\nFollow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?",
        "Answer": "",
        "title": "triangle"
    },
    {
        "Question": "Best Time to Buy and Sell Stock III - You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nFind the maximum profit you can achieve. You may complete at most two transactions.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n \n\nExample 1:\n\n\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n\nExample 2:\n\n\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\n\nExample 3:\n\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\n\n \n\nConstraints:\n\n * 1 <= prices.length <= 105\n * 0 <= prices[i] <= 105",
        "Answer": "",
        "title": "best-time-to-buy-and-sell-stock-iii"
    },
    {
        "Question": "Palindrome Partitioning II - Given a string s, partition s such that every substring of the partition is a palindrome.\n\nReturn the minimum cuts needed for a palindrome partitioning of s.\n\n \n\nExample 1:\n\n\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\n\nExample 2:\n\n\nInput: s = \"a\"\nOutput: 0\n\n\nExample 3:\n\n\nInput: s = \"ab\"\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 2000\n * s consists of lowercase English letters only.",
        "Answer": "",
        "title": "palindrome-partitioning-ii"
    },
    {
        "Question": "Word Break - Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\n \n\nExample 1:\n\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\n\nExample 2:\n\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n\n\nExample 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 300\n * 1 <= wordDict.length <= 1000\n * 1 <= wordDict[i].length <= 20\n * s and wordDict[i] consist of only lowercase English letters.\n * All the strings of wordDict are unique.",
        "Answer": "",
        "title": "word-break"
    },
    {
        "Question": "Maximum Product Subarray - Given an integer array nums, find a subarray that has the largest product, and return the product.\n\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\n\nExample 2:\n\n\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * -10 <= nums[i] <= 10\n * The product of any subarray of nums is guaranteed to fit in a 32-bit integer.",
        "Answer": "",
        "title": "maximum-product-subarray"
    },
    {
        "Question": "Dungeon Game - The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n\nReturn the knight's minimum initial health so that he can rescue the princess.\n\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg]\n\n\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n\n\nExample 2:\n\n\nInput: dungeon = [[0]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * m == dungeon.length\n * n == dungeon[i].length\n * 1 <= m, n <= 200\n * -1000 <= dungeon[i][j] <= 1000",
        "Answer": "",
        "title": "dungeon-game"
    },
    {
        "Question": "Best Time to Buy and Sell Stock IV - You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\n\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n \n\nExample 1:\n\n\nInput: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\n\nExample 2:\n\n\nInput: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\n\n \n\nConstraints:\n\n * 1 <= k <= 100\n * 1 <= prices.length <= 1000\n * 0 <= prices[i] <= 1000",
        "Answer": "",
        "title": "best-time-to-buy-and-sell-stock-iv"
    },
    {
        "Question": "House Robber - You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n\nExample 2:\n\n\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 100\n * 0 <= nums[i] <= 400",
        "Answer": "",
        "title": "house-robber"
    },
    {
        "Question": "House Robber II - You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\n \n\nExample 1:\n\n\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n\nExample 3:\n\n\nInput: nums = [1,2,3]\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 100\n * 0 <= nums[i] <= 1000",
        "Answer": "",
        "title": "house-robber-ii"
    },
    {
        "Question": "Maximal Square - Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg]\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg]\n\n\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n\n\nExample 3:\n\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 300\n * matrix[i][j] is '0' or '1'.",
        "Answer": "",
        "title": "maximal-square"
    },
    {
        "Question": "Perfect Squares - Given an integer n, return the least number of perfect square numbers that sum to n.\n\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n\n \n\nExample 1:\n\n\nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n\n\nExample 2:\n\n\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 104",
        "Answer": "",
        "title": "perfect-squares"
    },
    {
        "Question": "Range Sum Query - Immutable - Given an integer array nums, handle multiple queries of the following type:\n\n 1. Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\n * NumArray(int[] nums) Initializes the object with the integer array nums.\n * int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \n\nExample 1:\n\n\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -105 <= nums[i] <= 105\n * 0 <= left <= right < nums.length\n * At most 104 calls will be made to sumRange.",
        "Answer": "",
        "title": "range-sum-query-immutable"
    },
    {
        "Question": "Range Sum Query 2D - Immutable - Given a 2D matrix matrix, handle multiple queries of the following type:\n\n * Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n\nImplement the NumMatrix class:\n\n * NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\n * int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n\nYou must design an algorithm where sumRegion works on O(1) time complexity.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg]\n\n\nInput\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\n\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n\n\n \n\nConstraints:\n\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 200\n * -104 <= matrix[i][j] <= 104\n * 0 <= row1 <= row2 < m\n * 0 <= col1 <= col2 < n\n * At most 104 calls will be made to sumRegion.",
        "Answer": "",
        "title": "range-sum-query-2d-immutable"
    },
    {
        "Question": "Best Time to Buy and Sell Stock with Cooldown - You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\n * After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n \n\nExample 1:\n\n\nInput: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n\n\nExample 2:\n\n\nInput: prices = [1]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= prices.length <= 5000\n * 0 <= prices[i] <= 1000",
        "Answer": "",
        "title": "best-time-to-buy-and-sell-stock-with-cooldown"
    },
    {
        "Question": "Burst Balloons - You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\n\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\n\nReturn the maximum coins you can collect by bursting the balloons wisely.\n\n \n\nExample 1:\n\n\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n\nExample 2:\n\n\nInput: nums = [1,5]\nOutput: 10\n\n\n \n\nConstraints:\n\n * n == nums.length\n * 1 <= n <= 300\n * 0 <= nums[i] <= 100",
        "Answer": "",
        "title": "burst-balloons"
    },
    {
        "Question": "Coin Change - You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\nYou may assume that you have an infinite number of each kind of coin.\n\n \n\nExample 1:\n\n\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n\n\nExample 2:\n\n\nInput: coins = [2], amount = 3\nOutput: -1\n\n\nExample 3:\n\n\nInput: coins = [1], amount = 0\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= coins.length <= 12\n * 1 <= coins[i] <= 231 - 1\n * 0 <= amount <= 104",
        "Answer": "",
        "title": "coin-change"
    },
    {
        "Question": "Count Numbers with Unique Digits - Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99\n\n\nExample 2:\n\n\nInput: n = 0\nOutput: 1\n\n\n \n\nConstraints:\n\n * 0 <= n <= 8",
        "Answer": "",
        "title": "count-numbers-with-unique-digits"
    },
    {
        "Question": "Largest Divisible Subset - Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n\n * answer[i] % answer[j] == 0, or\n * answer[j] % answer[i] == 0\n\nIf there are multiple solutions, return any of them.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.\n\n\nExample 2:\n\n\nInput: nums = [1,2,4,8]\nOutput: [1,2,4,8]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 2 * 109\n * All the integers in nums are unique.",
        "Answer": "",
        "title": "largest-divisible-subset"
    },
    {
        "Question": "Guess Number Higher or Lower II - We are playing the Guessing Game. The game will work as follows:\n\n 1. I pick a number between 1 and n.\n 2. You guess a number.\n 3. If you guess the right number, you win the game.\n 4. If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n 5. Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.\n\nGiven a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/09/10/graph.png]\n\n\nInput: n = 10\nOutput: 16\nExplanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n    - If this is my number, your total is $0. Otherwise, you pay $7.\n    - If my number is higher, the range is [8,10]. Guess 9.\n        - If this is my number, your total is $7. Otherwise, you pay $9.\n        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n    - If my number is lower, the range is [1,6]. Guess 3.\n        - If this is my number, your total is $7. Otherwise, you pay $3.\n        - If my number is higher, the range is [4,6]. Guess 5.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n        - If my number is lower, the range is [1,2]. Guess 1.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 0\nExplanation: There is only one possible number, so you can guess 1 and not have to pay anything.\n\n\nExample 3:\n\n\nInput: n = 2\nOutput: 1\nExplanation: There are two possible numbers, 1 and 2.\n- Guess 1.\n    - If this is my number, your total is $0. Otherwise, you pay $1.\n    - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 200",
        "Answer": "",
        "title": "guess-number-higher-or-lower-ii"
    },
    {
        "Question": "Combination Sum IV - Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\n\nThe test cases are generated so that the answer can fit in a 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n\n\nExample 2:\n\n\nInput: nums = [9], target = 3\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 200\n * 1 <= nums[i] <= 1000\n * All the elements of nums are unique.\n * 1 <= target <= 1000\n\n \n\nFollow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",
        "Answer": "",
        "title": "combination-sum-iv"
    },
    {
        "Question": "Frog Jump - A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n\nGiven a list of stones positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\n\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\n\n \n\nExample 1:\n\n\nInput: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n\n\nExample 2:\n\n\nInput: stones = [0,1,2,3,4,8,9,11]\nOutput: false\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n\n\n \n\nConstraints:\n\n * 2 <= stones.length <= 2000\n * 0 <= stones[i] <= 231 - 1\n * stones[0] == 0\n * stones is sorted in a strictly increasing order.",
        "Answer": "",
        "title": "frog-jump"
    },
    {
        "Question": "Partition Equal Subset Sum - Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n\n \n\nExample 1:\n\n\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 200\n * 1 <= nums[i] <= 100",
        "Answer": "",
        "title": "partition-equal-subset-sum"
    },
    {
        "Question": "Arithmetic Slices II - Subsequence - Given an integer array nums, return the number of all the arithmetic subsequences of nums.\n\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\n * For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\n * For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n * For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n\nThe test cases are generated so that the answer fits in 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: nums = [2,4,6,8,10]\nOutput: 7\nExplanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n\n\nExample 2:\n\n\nInput: nums = [7,7,7,7,7]\nOutput: 16\nExplanation: Any subsequence of this array is arithmetic.\n\n\n \n\nConstraints:\n\n * 1  <= nums.length <= 1000\n * -231 <= nums[i] <= 231 - 1",
        "Answer": "",
        "title": "arithmetic-slices-ii-subsequence"
    },
    {
        "Question": "Count The Repetitions - We define str = [s, n] as the string str which consists of the string s concatenated n times.\n\n * For example, str == [\"abc\", 3] ==\"abcabcabc\".\n\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\n\n * For example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\n\nYou are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\n\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.\n\n \n\nExample 1:\n\nInput: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\nOutput: 2\n\n\nExample 2:\n\nInput: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= s1.length, s2.length <= 100\n * s1 and s2 consist of lowercase English letters.\n * 1 <= n1, n2 <= 106",
        "Answer": "",
        "title": "count-the-repetitions"
    },
    {
        "Question": "Unique Substrings in Wraparound String - We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n\n * \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n\nGiven a string s, return the number of unique non-empty substrings of s are present in base.\n\n \n\nExample 1:\n\n\nInput: s = \"a\"\nOutput: 1\nExplanation: Only the substring \"a\" of s is in base.\n\n\nExample 2:\n\n\nInput: s = \"cac\"\nOutput: 2\nExplanation: There are two substrings (\"a\", \"c\") of s in base.\n\n\nExample 3:\n\n\nInput: s = \"zab\"\nOutput: 6\nExplanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "unique-substrings-in-wraparound-string"
    },
    {
        "Question": "Concatenated Words - Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\n\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array.\n\n \n\nExample 1:\n\n\nInput: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\nOutput: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n\nExample 2:\n\n\nInput: words = [\"cat\",\"dog\",\"catdog\"]\nOutput: [\"catdog\"]\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 104\n * 1 <= words[i].length <= 30\n * words[i] consists of only lowercase English letters.\n * All the strings of words are unique.\n * 1 <= sum(words[i].length) <= 105",
        "Answer": "",
        "title": "concatenated-words"
    },
    {
        "Question": "Ones and Zeroes - You are given an array of binary strings strs and two integers m and n.\n\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\n\nA set x is a subset of a set y if all elements of x are also elements of y.\n\n \n\nExample 1:\n\n\nInput: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\nOutput: 4\nExplanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n\n\nExample 2:\n\n\nInput: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\nOutput: 2\nExplanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\n\n\n \n\nConstraints:\n\n * 1 <= strs.length <= 600\n * 1 <= strs[i].length <= 100\n * strs[i] consists only of digits '0' and '1'.\n * 1 <= m, n <= 100",
        "Answer": "",
        "title": "ones-and-zeroes"
    },
    {
        "Question": "Predict the Winner - You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\n\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n\nReturn true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\n\n \n\nExample 1:\n\n\nInput: nums = [1,5,2]\nOutput: false\nExplanation: Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.\n\n\nExample 2:\n\n\nInput: nums = [1,5,233,7]\nOutput: true\nExplanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 20\n * 0 <= nums[i] <= 107",
        "Answer": "",
        "title": "predict-the-winner"
    },
    {
        "Question": "Target Sum - You are given an integer array nums and an integer target.\n\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n\n * For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n\nReturn the number of different expressions that you can build, which evaluates to target.\n\n \n\nExample 1:\n\n\nInput: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n\n\nExample 2:\n\n\nInput: nums = [1], target = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 20\n * 0 <= nums[i] <= 1000\n * 0 <= sum(nums[i]) <= 1000\n * -1000 <= target <= 1000",
        "Answer": "",
        "title": "target-sum"
    },
    {
        "Question": "Fibonacci Number - The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\n\nGiven n, calculate F(n).\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n\nExample 2:\n\n\nInput: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n\n\nExample 3:\n\n\nInput: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n\n\n \n\nConstraints:\n\n * 0 <= n <= 30",
        "Answer": "",
        "title": "fibonacci-number"
    },
    {
        "Question": "Freedom Trail - In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\n\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\n\nInitially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\n\nAt the stage of rotating the ring to spell the key character key[i]:\n\n 1. You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the \"12:00\" direction, where this character must equal key[i].\n 2. If the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/22/ring.jpg]\n\n\nInput: ring = \"godding\", key = \"gd\"\nOutput: 4\nExplanation:\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n\n\nExample 2:\n\n\nInput: ring = \"godding\", key = \"godding\"\nOutput: 13\n\n\n \n\nConstraints:\n\n * 1 <= ring.length, key.length <= 100\n * ring and key consist of only lower case English letters.\n * It is guaranteed that key could always be spelled by rotating ring.",
        "Answer": "",
        "title": "freedom-trail"
    },
    {
        "Question": "Longest Palindromic Subsequence - Given a string s, find the longest palindromic subsequence's length in s.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n \n\nExample 1:\n\n\nInput: s = \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence is \"bbbb\".\n\n\nExample 2:\n\n\nInput: s = \"cbbd\"\nOutput: 2\nExplanation: One possible longest palindromic subsequence is \"bb\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s consists only of lowercase English letters.",
        "Answer": "",
        "title": "longest-palindromic-subsequence"
    },
    {
        "Question": "Coin Change II - You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n\nYou may assume that you have an infinite number of each kind of coin.\n\nThe answer is guaranteed to fit into a signed 32-bit integer.\n\n \n\nExample 1:\n\n\nInput: amount = 5, coins = [1,2,5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n\n\nExample 2:\n\n\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.\n\n\nExample 3:\n\n\nInput: amount = 10, coins = [10]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= coins.length <= 300\n * 1 <= coins[i] <= 5000\n * All the values of coins are unique.\n * 0 <= amount <= 5000",
        "Answer": "",
        "title": "coin-change-2"
    },
    {
        "Question": "Remove Boxes - You are given several boxes with different colors represented by different positive numbers.\n\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.\n\nReturn the maximum points you can get.\n\n \n\nExample 1:\n\n\nInput: boxes = [1,3,2,2,2,3,4,3,1]\nOutput: 23\nExplanation:\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----> [1, 3, 3, 3, 1] (1*1=1 points) \n----> [1, 1] (3*3=9 points) \n----> [] (2*2=4 points)\n\n\nExample 2:\n\n\nInput: boxes = [1,1,1]\nOutput: 9\n\n\nExample 3:\n\n\nInput: boxes = [1]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= boxes.length <= 100\n * 1 <= boxes[i] <= 100",
        "Answer": "",
        "title": "remove-boxes"
    },
    {
        "Question": "Student Attendance Record II - An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n * 'A': Absent.\n * 'L': Late.\n * 'P': Present.\n\nAny student is eligible for an attendance award if they meet both of the following criteria:\n\n * The student was absent ('A') for strictly fewer than 2 days total.\n * The student was never late ('L') for 3 or more consecutive days.\n\nGiven an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: n = 2\nOutput: 8\nExplanation: There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 3\n\n\nExample 3:\n\n\nInput: n = 10101\nOutput: 183236316\n\n\n \n\nConstraints:\n\n * 1 <= n <= 105",
        "Answer": "",
        "title": "student-attendance-record-ii"
    },
    {
        "Question": "Out of Boundary Paths - There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\n\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png]\n\n\nInput: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\nOutput: 6\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png]\n\n\nInput: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\nOutput: 12\n\n\n \n\nConstraints:\n\n * 1 <= m, n <= 50\n * 0 <= maxMove <= 50\n * 0 <= startRow < m\n * 0 <= startColumn < n",
        "Answer": "",
        "title": "out-of-boundary-paths"
    },
    {
        "Question": "Delete Operation for Two Strings - Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\n\nIn one step, you can delete exactly one character in either string.\n\n \n\nExample 1:\n\n\nInput: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n\n\nExample 2:\n\n\nInput: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4\n\n\n \n\nConstraints:\n\n * 1 <= word1.length, word2.length <= 500\n * word1 and word2 consist of only lowercase English letters.",
        "Answer": "",
        "title": "delete-operation-for-two-strings"
    },
    {
        "Question": "Non-negative Integers without Consecutive Ones - Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.\n\n \n\nExample 1:\n\n\nInput: n = 5\nOutput: 5\nExplanation:\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 2\n\n\nExample 3:\n\n\nInput: n = 2\nOutput: 3\n\n\n \n\nConstraints:\n\n * 1 <= n <= 109",
        "Answer": "",
        "title": "non-negative-integers-without-consecutive-ones"
    },
    {
        "Question": "K Inverse Pairs Array - For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\n\nGiven two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: n = 3, k = 0\nOutput: 1\nExplanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n\n\nExample 2:\n\n\nInput: n = 3, k = 1\nOutput: 2\nExplanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1000\n * 0 <= k <= 1000",
        "Answer": "",
        "title": "k-inverse-pairs-array"
    },
    {
        "Question": "Decode Ways II - A message containing letters from A-Z can be encoded into numbers using the following mapping:\n\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\n * \"AAJF\" with the grouping (1 1 10 6)\n * \"KJF\" with the grouping (11 10 6)\n\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n\nIn addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\n\nGiven a string s consisting of digits and '*' characters, return the number of ways to decode it.\n\nSince the answer may be very large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: s = \"*\"\nOutput: 9\nExplanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\".\n\n\nExample 2:\n\n\nInput: s = \"1*\"\nOutput: 18\nExplanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".\n\n\nExample 3:\n\n\nInput: s = \"2*\"\nOutput: 15\nExplanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is a digit or '*'.",
        "Answer": "",
        "title": "decode-ways-ii"
    },
    {
        "Question": "2 Keys Keyboard - There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:\n\n * Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).\n * Paste: You can paste the characters which are copied last time.\n\nGiven an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.\n\n \n\nExample 1:\n\n\nInput: n = 3\nOutput: 3\nExplanation: Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1000",
        "Answer": "",
        "title": "2-keys-keyboard"
    },
    {
        "Question": "Strange Printer - There is a strange printer with the following two special properties:\n\n * The printer can only print a sequence of the same character each time.\n * At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n\nGiven a string s, return the minimum number of turns the printer needed to print it.\n\n \n\nExample 1:\n\n\nInput: s = \"aaabbb\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"bbb\".\n\n\nExample 2:\n\n\nInput: s = \"aba\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 100\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "strange-printer"
    },
    {
        "Question": "Number of Longest Increasing Subsequence - Given an integer array nums, return the number of longest increasing subsequences.\n\nNotice that the sequence has to be strictly increasing.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3,5,4,7]\nOutput: 2\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n\n\nExample 2:\n\n\nInput: nums = [2,2,2,2,2]\nOutput: 5\nExplanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2000\n * -106 <= nums[i] <= 106\n * The answer is guaranteed to fit inside a 32-bit integer.",
        "Answer": "",
        "title": "number-of-longest-increasing-subsequence"
    },
    {
        "Question": "Knight Probability in Chessboard - On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\n\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\n[https://assets.leetcode.com/uploads/2018/10/12/knight.png]\n\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\n\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\n\nReturn the probability that the knight remains on the board after it has stopped moving.\n\n \n\nExample 1:\n\n\nInput: n = 3, k = 2, row = 0, column = 0\nOutput: 0.06250\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.\n\n\nExample 2:\n\n\nInput: n = 1, k = 0, row = 0, column = 0\nOutput: 1.00000\n\n\n \n\nConstraints:\n\n * 1 <= n <= 25\n * 0 <= k <= 100\n * 0 <= row, column <= n - 1",
        "Answer": "",
        "title": "knight-probability-in-chessboard"
    },
    {
        "Question": "Maximum Sum of 3 Non-Overlapping Subarrays - Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\n\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,1,2,6,7,5,1], k = 2\nOutput: [0,3,5]\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n\n\nExample 2:\n\n\nInput: nums = [1,2,1,2,1,2,1,2,1], k = 2\nOutput: [0,2,4]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * 1 <= nums[i] < 216\n * 1 <= k <= floor(nums.length / 3)",
        "Answer": "",
        "title": "maximum-sum-of-3-non-overlapping-subarrays"
    },
    {
        "Question": "Stickers to Spell Word - We are given n different types of stickers. Each sticker has a lowercase English word on it.\n\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\n\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\n\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\n\n \n\nExample 1:\n\n\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\nOutput: 3\nExplanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string.\n\n\nExample 2:\n\n\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\nOutput: -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n\n\n \n\nConstraints:\n\n * n == stickers.length\n * 1 <= n <= 50\n * 1 <= stickers[i].length <= 10\n * 1 <= target.length <= 15\n * stickers[i] and target consist of lowercase English letters.",
        "Answer": "",
        "title": "stickers-to-spell-word"
    },
    {
        "Question": "Minimum ASCII Delete Sum for Two Strings - Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.\n\n \n\nExample 1:\n\n\nInput: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n\n\nExample 2:\n\n\nInput: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n\n\n \n\nConstraints:\n\n * 1 <= s1.length, s2.length <= 1000\n * s1 and s2 consist of lowercase English letters.",
        "Answer": "",
        "title": "minimum-ascii-delete-sum-for-two-strings"
    },
    {
        "Question": "Best Time to Buy and Sell Stock with Transaction Fee - You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\n\nNote:\n\n * You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n * The transaction fee is only charged once for each stock purchase and sale.\n\n \n\nExample 1:\n\n\nInput: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n\n\nExample 2:\n\n\nInput: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6\n\n\n \n\nConstraints:\n\n * 1 <= prices.length <= 5 * 104\n * 1 <= prices[i] < 5 * 104\n * 0 <= fee < 5 * 104",
        "Answer": "",
        "title": "best-time-to-buy-and-sell-stock-with-transaction-fee"
    },
    {
        "Question": "Count Different Palindromic Subsequences - Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.\n\nA subsequence of a string is obtained by deleting zero or more characters from the string.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.\n\n \n\nExample 1:\n\n\nInput: s = \"bccb\"\nOutput: 6\nExplanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice.\n\n\nExample 2:\n\n\nInput: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"\nOutput: 104860361\nExplanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 1000\n * s[i] is either 'a', 'b', 'c', or 'd'.",
        "Answer": "",
        "title": "count-different-palindromic-subsequences"
    },
    {
        "Question": "Delete and Earn - You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:\n\n * Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.\n\nReturn the maximum number of points you can earn by applying the above operation some number of times.\n\n \n\nExample 1:\n\n\nInput: nums = [3,4,2]\nOutput: 6\nExplanation: You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points.\n\n\nExample 2:\n\n\nInput: nums = [2,2,3,3,3,4]\nOutput: 9\nExplanation: You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points.\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 2 * 104\n * 1 <= nums[i] <= 104",
        "Answer": "",
        "title": "delete-and-earn"
    },
    {
        "Question": "Cherry Pickup - You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\n\n * 0 means the cell is empty, so you can pass through,\n * 1 means the cell contains a cherry that you can pick up and pass through, or\n * -1 means the cell contains a thorn that blocks your way.\n\nReturn the maximum number of cherries you can collect by following the rules below:\n\n * Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\n * After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\n * When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\n * If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2020/12/14/grid.jpg]\n\n\nInput: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\nOutput: 5\nExplanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n\n\nExample 2:\n\n\nInput: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * n == grid.length\n * n == grid[i].length\n * 1 <= n <= 50\n * grid[i][j] is -1, 0, or 1.\n * grid[0][0] != -1\n * grid[n - 1][n - 1] != -1",
        "Answer": "",
        "title": "cherry-pickup"
    },
    {
        "Question": "Min Cost Climbing Stairs - You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index 0, or the step with index 1.\n\nReturn the minimum cost to reach the top of the floor.\n\n \n\nExample 1:\n\n\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n\n\nExample 2:\n\n\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n\n\n \n\nConstraints:\n\n * 2 <= cost.length <= 1000\n * 0 <= cost[i] <= 999",
        "Answer": "",
        "title": "min-cost-climbing-stairs"
    },
    {
        "Question": "Number Of Corner Rectangles - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "number-of-corner-rectangles"
    },
    {
        "Question": "Largest Plus Sign - You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\n\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\n\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/06/13/plus1-grid.jpg]\n\n\nInput: n = 5, mines = [[4,2]]\nOutput: 2\nExplanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/06/13/plus2-grid.jpg]\n\n\nInput: n = 1, mines = [[0,0]]\nOutput: 0\nExplanation: There is no plus sign, so return 0.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 500\n * 1 <= mines.length <= 5000\n * 0 <= xi, yi < n\n * All the pairs (xi, yi) are unique.",
        "Answer": "",
        "title": "largest-plus-sign"
    },
    {
        "Question": "Rotated Digits - An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\n\nA number is valid if each digit remains a digit after rotation. For example:\n\n * 0, 1, and 8 rotate to themselves,\n * 2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\n * 6 and 9 rotate to each other, and\n * the rest of the numbers do not rotate to any other number and become invalid.\n\nGiven an integer n, return the number of good integers in the range [1, n].\n\n \n\nExample 1:\n\n\nInput: n = 10\nOutput: 4\nExplanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 0\n\n\nExample 3:\n\n\nInput: n = 2\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 104",
        "Answer": "",
        "title": "rotated-digits"
    },
    {
        "Question": "Domino and Tromino Tiling - You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\n\n[https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg]\n\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\n\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg]\n\n\nInput: n = 3\nOutput: 5\nExplanation: The five different ways are shown above.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: 1\n\n\n \n\nConstraints:\n\n * 1 <= n <= 1000",
        "Answer": "",
        "title": "domino-and-tromino-tiling"
    },
    {
        "Question": "Champagne Tower - We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.\n\nThen, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png]\n\nNow after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)\n\n \n\nExample 1:\n\n\r\nInput: poured = 1, query_row = 1, query_glass = 1\r\nOutput: 0.00000\r\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n\n\nExample 2:\n\n\r\nInput: poured = 2, query_row = 1, query_glass = 1\r\nOutput: 0.50000\r\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\r\n\n\nExample 3:\n\n\r\nInput: poured = 100000009, query_row = 33, query_glass = 17\r\nOutput: 1.00000\r\n\n\n \n\nConstraints:\n\n * 0 <= poured <= 109\n * 0 <= query_glass <= query_row < 100",
        "Answer": "",
        "title": "champagne-tower"
    },
    {
        "Question": "Minimum Swaps To Make Sequences Increasing - You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\n\n * For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\n\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\n\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].\n\n \n\nExample 1:\n\n\nInput: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\nOutput: 1\nExplanation: \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n\n\nExample 2:\n\n\nInput: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\nOutput: 1\n\n\n \n\nConstraints:\n\n * 2 <= nums1.length <= 105\n * nums2.length == nums1.length\n * 0 <= nums1[i], nums2[i] <= 2 * 105",
        "Answer": "",
        "title": "minimum-swaps-to-make-sequences-increasing"
    },
    {
        "Question": "Split Array With Same Average - You are given an integer array nums.\n\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\n\nReturn true if it is possible to achieve that and false otherwise.\n\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n\n\nExample 2:\n\n\nInput: nums = [3,1]\nOutput: false\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 30\n * 0 <= nums[i] <= 104",
        "Answer": "",
        "title": "split-array-with-same-average"
    },
    {
        "Question": "Soup Servings - There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:\n\n 1. Serve 100 ml of soup A and 0 ml of soup B,\n 2. Serve 75 ml of soup A and 25 ml of soup B,\n 3. Serve 50 ml of soup A and 50 ml of soup B, and\n 4. Serve 25 ml of soup A and 75 ml of soup B.\n\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\n\nNote that we do not have an operation where all 100 ml's of soup B are used first.\n\nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n\nInput: n = 50\nOutput: 0.62500\nExplanation: If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n\n\nExample 2:\n\n\nInput: n = 100\nOutput: 0.71875\n\n\n \n\nConstraints:\n\n * 0 <= n <= 109",
        "Answer": "",
        "title": "soup-servings"
    },
    {
        "Question": "Largest Sum of Averages - You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.\n\nNote that the partition must use every integer in nums, and that the score is not necessarily an integer.\n\nReturn the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.\n\n \n\nExample 1:\n\n\nInput: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation: \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,4,5,6,7], k = 4\nOutput: 20.50000\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 104\n * 1 <= k <= nums.length",
        "Answer": "",
        "title": "largest-sum-of-averages"
    },
    {
        "Question": "Race Car - Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\n\n * When you get an instruction 'A', your car does the following:\n   * position += speed\n   * speed *= 2\n * When you get an instruction 'R', your car does the following:\n   * If your speed is positive then speed = -1\n   * otherwise speed = 1\n   Your position stays the same.\n\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\n\nGiven a target position target, return the length of the shortest sequence of instructions to get there.\n\n \n\nExample 1:\n\n\nInput: target = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3.\n\n\nExample 2:\n\n\nInput: target = 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\n\n\n \n\nConstraints:\n\n * 1 <= target <= 104",
        "Answer": "",
        "title": "race-car"
    },
    {
        "Question": "Binary Trees With Factors - Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\n\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: arr = [2,4]\nOutput: 3\nExplanation: We can make these trees: [2], [4], [4, 2, 2]\n\nExample 2:\n\n\nInput: arr = [2,4,5,10]\nOutput: 7\nExplanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 1000\n * 2 <= arr[i] <= 109\n * All the values of arr are unique.",
        "Answer": "",
        "title": "binary-trees-with-factors"
    },
    {
        "Question": "New 21 Game - Alice plays the following game, loosely based on the card game \"21\".\n\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\n\nAlice stops drawing numbers when she gets k or more points.\n\nReturn the probability that Alice has n or fewer points.\n\nAnswers within 10-5 of the actual answer are considered accepted.\n\n \n\nExample 1:\n\n\nInput: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.\n\n\nExample 2:\n\n\nInput: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.\n\n\nExample 3:\n\n\nInput: n = 21, k = 17, maxPts = 10\nOutput: 0.73278\n\n\n \n\nConstraints:\n\n * 0 <= k <= n <= 104\n * 1 <= maxPts <= 104",
        "Answer": "",
        "title": "new-21-game"
    },
    {
        "Question": "Push Dominoes - There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n\nYou are given a string dominoes representing the initial state where:\n\n * dominoes[i] = 'L', if the ith domino has been pushed to the left,\n * dominoes[i] = 'R', if the ith domino has been pushed to the right, and\n * dominoes[i] = '.', if the ith domino has not been pushed.\n\nReturn a string representing the final state.\n\n \n\nExample 1:\n\n\nInput: dominoes = \"RR.L\"\nOutput: \"RR.L\"\nExplanation: The first domino expends no additional force on the second domino.\n\n\nExample 2:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png]\n\n\nInput: dominoes = \".L.R...LR..L..\"\nOutput: \"LL.RR.LLRRLL..\"\n\n\n \n\nConstraints:\n\n * n == dominoes.length\n * 1 <= n <= 105\n * dominoes[i] is either 'L', 'R', or '.'.",
        "Answer": "",
        "title": "push-dominoes"
    },
    {
        "Question": "Shortest Path Visiting All Nodes - You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\n\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg]\n\n\nInput: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg]\n\n\nInput: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]\n\n\n \n\nConstraints:\n\n * n == graph.length\n * 1 <= n <= 12\n * 0 <= graph[i].length < n\n * graph[i] does not contain i.\n * If graph[a] contains b, then graph[b] contains a.\n * The input graph is always connected.",
        "Answer": "",
        "title": "shortest-path-visiting-all-nodes"
    },
    {
        "Question": "Stone Game - Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\n\nThe objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.\n\nAlice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.\n\nAssuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.\n\n \n\nExample 1:\n\n\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n\n\nExample 2:\n\n\nInput: piles = [3,7,2,3]\nOutput: true\n\n\n \n\nConstraints:\n\n * 2 <= piles.length <= 500\n * piles.length is even.\n * 1 <= piles[i] <= 500\n * sum(piles[i]) is odd.",
        "Answer": "",
        "title": "stone-game"
    },
    {
        "Question": "Profitable Schemes - There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.\n\nLet's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.\n\nReturn the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.\n\nExample 2:\n\n\nInput: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n\n \n\nConstraints:\n\n * 1 <= n <= 100\n * 0 <= minProfit <= 100\n * 1 <= group.length <= 100\n * 1 <= group[i] <= 100\n * profit.length == group.length\n * 0 <= profit[i] <= 100",
        "Answer": "",
        "title": "profitable-schemes"
    },
    {
        "Question": "Valid Permutations for DI Sequence - You are given a string s of length n where s[i] is either:\n\n * 'D' means decreasing, or\n * 'I' means increasing.\n\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\n\n * If s[i] == 'D', then perm[i] > perm[i + 1], and\n * If s[i] == 'I', then perm[i] < perm[i + 1].\n\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: s = \"DID\"\nOutput: 5\nExplanation: The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n\n\nExample 2:\n\n\nInput: s = \"D\"\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == s.length\n * 1 <= n <= 200\n * s[i] is either 'I' or 'D'.",
        "Answer": "",
        "title": "valid-permutations-for-di-sequence"
    },
    {
        "Question": "Number of Music Playlists - Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n\n * Every song is played at least once.\n * A song can only be played again only if k other songs have been played.\n\nGiven n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: n = 3, goal = 3, k = 1\nOutput: 6\nExplanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\n\n\nExample 2:\n\n\nInput: n = 2, goal = 3, k = 0\nOutput: 6\nExplanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\n\n\nExample 3:\n\n\nInput: n = 2, goal = 3, k = 1\nOutput: 2\nExplanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\n\n\n \n\nConstraints:\n\n * 0 <= k < n <= goal <= 100",
        "Answer": "",
        "title": "number-of-music-playlists"
    },
    {
        "Question": "Flip String to Monotone Increasing - A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\n\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\n\nReturn the minimum number of flips to make s monotone increasing.\n\n \n\nExample 1:\n\n\nInput: s = \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.\n\n\nExample 2:\n\n\nInput: s = \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.\n\n\nExample 3:\n\n\nInput: s = \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 105\n * s[i] is either '0' or '1'.",
        "Answer": "",
        "title": "flip-string-to-monotone-increasing"
    },
    {
        "Question": "Minimum Falling Path Sum - Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg]\n\n\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]]\nOutput: 13\nExplanation: There are two falling paths with a minimum sum as shown.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg]\n\n\nInput: matrix = [[-19,57],[-40,-5]]\nOutput: -59\nExplanation: The falling path with a minimum sum is shown.\n\n\n \n\nConstraints:\n\n * n == matrix.length == matrix[i].length\n * 1 <= n <= 100\n * -100 <= matrix[i][j] <= 100",
        "Answer": "",
        "title": "minimum-falling-path-sum"
    },
    {
        "Question": "Knight Dialer - The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagram:\n\nA chess knight can move as indicated in the chess diagram below:\n\n[https://assets.leetcode.com/uploads/2020/08/18/chess.jpg]\n\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).\n\n[https://assets.leetcode.com/uploads/2020/08/18/phone.jpg]\n\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\n\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\n\nAs the answer may be very large, return the answer modulo 109 + 7.\n\n \n\nExample 1:\n\n\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n\n\nExample 2:\n\n\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n\n\nExample 3:\n\n\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.\n\n\n \n\nConstraints:\n\n * 1 <= n <= 5000",
        "Answer": "",
        "title": "knight-dialer"
    },
    {
        "Question": "Distinct Subsequences II - Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.\n\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.\n\n \n\nExample 1:\n\n\nInput: s = \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n\n\nExample 2:\n\n\nInput: s = \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".\n\n\nExample 3:\n\n\nInput: s = \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 2000\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "distinct-subsequences-ii"
    },
    {
        "Question": "Find the Shortest Superstring - Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.\n\nYou may assume that no string in words is a substring of another string in words.\n\n \n\nExample 1:\n\n\nInput: words = [\"alex\",\"loves\",\"leetcode\"]\nOutput: \"alexlovesleetcode\"\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\n\n\nExample 2:\n\n\nInput: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\nOutput: \"gctaagttcatgcatc\"\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 12\n * 1 <= words[i].length <= 20\n * words[i] consists of lowercase English letters.\n * All the strings of words are unique.",
        "Answer": "",
        "title": "find-the-shortest-superstring"
    },
    {
        "Question": "Tallest Billboard - You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\n\nYou are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\n\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return 0.\n\n \n\nExample 1:\n\n\nInput: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\n\nExample 2:\n\n\nInput: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\n\nExample 3:\n\n\nInput: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.\n\n\n \n\nConstraints:\n\n * 1 <= rods.length <= 20\n * 1 <= rods[i] <= 1000\n * sum(rods[i]) <= 5000",
        "Answer": "",
        "title": "tallest-billboard"
    },
    {
        "Question": "Delete Columns to Make Sorted III - You are given an array of n strings strs, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\n\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). Return the minimum possible value of answer.length.\n\n \n\nExample 1:\n\n\nInput: strs = [\"babca\",\"bbazb\"]\nOutput: 3\nExplanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.\n\nExample 2:\n\n\nInput: strs = [\"edcba\"]\nOutput: 4\nExplanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.\n\n\nExample 3:\n\n\nInput: strs = [\"ghi\",\"def\",\"abc\"]\nOutput: 0\nExplanation: All rows are already lexicographically sorted.\n\n\n \n\nConstraints:\n\n * n == strs.length\n * 1 <= n <= 100\n * 1 <= strs[i].length <= 100\n * strs[i] consists of lowercase English letters.\n\n *",
        "Answer": "",
        "title": "delete-columns-to-make-sorted-iii"
    },
    {
        "Question": "Least Operators to Express Number - Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\n\nWhen writing such an expression, we adhere to the following conventions:\n\n * The division operator (/) returns rational numbers.\n * There are no parentheses placed anywhere.\n * We use the usual order of operations: multiplication and division happen before addition and subtraction.\n * It is not allowed to use the unary negation operator (-). For example, \"x - x\" is a valid expression as it only uses subtraction, but \"-x + x\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.\n\n \n\nExample 1:\n\n\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.\n\n\nExample 2:\n\n\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.\n\n\nExample 3:\n\n\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations.\n\n\n \n\nConstraints:\n\n * 2 <= x <= 100\n * 1 <= target <= 2 * 108",
        "Answer": "",
        "title": "least-operators-to-express-number"
    },
    {
        "Question": "Odd Even Jump - You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.\n\nYou may jump forward from index i to index j (with i < j) in the following way:\n\n * During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.\n * During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.\n * It may be the case that for some index i, there are no legal jumps.\n\nA starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).\n\nReturn the number of good starting indices.\n\n \n\nExample 1:\n\n\nInput: arr = [10,13,12,14,15]\nOutput: 2\nExplanation: \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.\n\n\nExample 2:\n\n\nInput: arr = [2,3,1,1,4]\nOutput: 3\nExplanation: \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.\n\n\nExample 3:\n\n\nInput: arr = [5,1,3,4,2]\nOutput: 3\nExplanation: We can reach the end from starting indices 1, 2, and 4.\n\n\n \n\nConstraints:\n\n * 1 <= arr.length <= 2 * 104\n * 0 <= arr[i] < 105",
        "Answer": "",
        "title": "odd-even-jump"
    },
    {
        "Question": "Unique Paths III - You are given an m x n integer array grid where grid[i][j] could be:\n\n * 1 representing the starting square. There is exactly one starting square.\n * 2 representing the ending square. There is exactly one ending square.\n * 0 representing empty squares we can walk over.\n * -1 representing obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/08/02/lc-unique1.jpg]\n\n\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/08/02/lc-unique2.jpg]\n\n\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/08/02/lc-unique3-.jpg]\n\n\nInput: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 20\n * 1 <= m * n <= 20\n * -1 <= grid[i][j] <= 2\n * There is exactly one starting cell and one ending cell.",
        "Answer": "",
        "title": "unique-paths-iii"
    },
    {
        "Question": "Minimum Cost For Tickets - You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.\n\nTrain tickets are sold in three different ways:\n\n * a 1-day pass is sold for costs[0] dollars,\n * a 7-day pass is sold for costs[1] dollars, and\n * a 30-day pass is sold for costs[2] dollars.\n\nThe passes allow that many days of consecutive travel.\n\n * For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.\n\nReturn the minimum number of dollars you need to travel every day in the given list of days.\n\n \n\nExample 1:\n\n\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n\n\nExample 2:\n\n\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\n\n\n \n\nConstraints:\n\n * 1 <= days.length <= 365\n * 1 <= days[i] <= 365\n * days is in strictly increasing order.\n * costs.length == 3\n * 1 <= costs[i] <= 1000",
        "Answer": "",
        "title": "minimum-cost-for-tickets"
    },
    {
        "Question": "Minimum Cost to Merge Stones - There are n piles of stones arranged in a row. The ith pile has stones[i] stones.\n\nA move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.\n\nReturn the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.\n\n \n\nExample 1:\n\n\nInput: stones = [3,2,4,1], k = 2\nOutput: 20\nExplanation: We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.\n\n\nExample 2:\n\n\nInput: stones = [3,2,4,1], k = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n\n\nExample 3:\n\n\nInput: stones = [3,5,1,2,6], k = 3\nOutput: 25\nExplanation: We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.\n\n\n \n\nConstraints:\n\n * n == stones.length\n * 1 <= n <= 30\n * 1 <= stones[i] <= 100\n * 2 <= k <= 30",
        "Answer": "",
        "title": "minimum-cost-to-merge-stones"
    },
    {
        "Question": "Container With Most Water - You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.\n\n \n\nExample 1:\n\n[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg]\n\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\n\nExample 2:\n\n\nInput: height = [1,1]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == height.length\n * 2 <= n <= 105\n * 0 <= height[i] <= 104",
        "Answer": "",
        "title": "container-with-most-water"
    },
    {
        "Question": "Trapping Rain Water - Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png]\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\n\nExample 2:\n\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n\n \n\nConstraints:\n\n * n == height.length\n * 1 <= n <= 2 * 104\n * 0 <= height[i] <= 105",
        "Answer": "",
        "title": "trapping-rain-water"
    },
    {
        "Question": "Jump Game II - You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n\n * 0 <= j <= nums[i] and\n * i + j < n\n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n\n \n\nExample 1:\n\n\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n\nExample 2:\n\n\nInput: nums = [2,3,0,1,4]\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * 0 <= nums[i] <= 1000\n * It's guaranteed that you can reach nums[n - 1].",
        "Answer": "",
        "title": "jump-game-ii"
    },
    {
        "Question": "Jump Game - You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n\nReturn true if you can reach the last index, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n\nExample 2:\n\n\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * 0 <= nums[i] <= 105",
        "Answer": "",
        "title": "jump-game"
    },
    {
        "Question": "Best Time to Buy and Sell Stock II - You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n\nFind and return the maximum profit you can achieve.\n\n \n\nExample 1:\n\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n\n\nExample 2:\n\n\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n\n\nExample 3:\n\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n\n\n \n\nConstraints:\n\n * 1 <= prices.length <= 3 * 104\n * 0 <= prices[i] <= 104",
        "Answer": "",
        "title": "best-time-to-buy-and-sell-stock-ii"
    },
    {
        "Question": "Gas Station - There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.\n\n \n\nExample 1:\n\n\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\n\nExample 2:\n\n\nInput: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\n\n \n\nConstraints:\n\n * n == gas.length == cost.length\n * 1 <= n <= 105\n * 0 <= gas[i], cost[i] <= 104\n * The input is generated such that the answer is unique.",
        "Answer": "",
        "title": "gas-station"
    },
    {
        "Question": "Candy - There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n\nYou are giving candies to these children subjected to the following requirements:\n\n * Each child must have at least one candy.\n * Children with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\n \n\nExample 1:\n\n\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\n\nExample 2:\n\n\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n\n\n \n\nConstraints:\n\n * n == ratings.length\n * 1 <= n <= 2 * 104\n * 0 <= ratings[i] <= 2 * 104",
        "Answer": "",
        "title": "candy"
    },
    {
        "Question": "Remove Duplicate Letters - Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\n \n\nExample 1:\n\n\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\n\nExample 2:\n\n\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 104\n * s consists of lowercase English letters.\n\n \n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/ [https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/]",
        "Answer": "",
        "title": "remove-duplicate-letters"
    },
    {
        "Question": "Create Maximum Number - You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\n\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n\nReturn an array of the k digits representing the answer.\n\n \n\nExample 1:\n\n\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]\n\n\nExample 2:\n\n\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]\n\n\nExample 3:\n\n\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]\n\n\n \n\nConstraints:\n\n * m == nums1.length\n * n == nums2.length\n * 1 <= m, n <= 500\n * 0 <= nums1[i], nums2[i] <= 9\n * 1 <= k <= m + n\n * nums1 and nums2 do not have leading zeros.",
        "Answer": "",
        "title": "create-maximum-number"
    },
    {
        "Question": "Patching Array - Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\n\nReturn the minimum number of patches required.\n\n \n\nExample 1:\n\n\nInput: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n\n\nExample 2:\n\n\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n\n\nExample 3:\n\n\nInput: nums = [1,2,2], n = 5\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 104\n * nums is sorted in ascending order.\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "patching-array"
    },
    {
        "Question": "Wiggle Subsequence - A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\n * For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\n * In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.\n\n \n\nExample 1:\n\n\nInput: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n\n\nExample 2:\n\n\nInput: nums = [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nExplanation: There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n\n\nExample 3:\n\n\nInput: nums = [1,2,3,4,5,6,7,8,9]\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 0 <= nums[i] <= 1000\n\n \n\nFollow up: Could you solve this in O(n) time?",
        "Answer": "",
        "title": "wiggle-subsequence"
    },
    {
        "Question": "Is Subsequence - Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\n\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\n \n\nExample 1:\n\nInput: s = \"abc\", t = \"ahbgdc\"\nOutput: true\n\n\nExample 2:\n\nInput: s = \"axc\", t = \"ahbgdc\"\nOutput: false\n\n\n \n\nConstraints:\n\n * 0 <= s.length <= 100\n * 0 <= t.length <= 104\n * s and t consist only of lowercase English letters.\n\n \n\nFollow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?",
        "Answer": "",
        "title": "is-subsequence"
    },
    {
        "Question": "Integer Replacement - Given a positive integer n, you can apply one of the following operations:\n\n 1. If n is even, replace n with n / 2.\n 2. If n is odd, replace n with either n + 1 or n - 1.\n\nReturn the minimum number of operations needed for n to become 1.\n\n \n\nExample 1:\n\n\nInput: n = 8\nOutput: 3\nExplanation: 8 -> 4 -> 2 -> 1\n\n\nExample 2:\n\n\nInput: n = 7\nOutput: 4\nExplanation: 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1\n\n\nExample 3:\n\n\nInput: n = 4\nOutput: 2\n\n\n \n\nConstraints:\n\n * 1 <= n <= 231 - 1",
        "Answer": "",
        "title": "integer-replacement"
    },
    {
        "Question": "Remove K Digits - Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n\n \n\nExample 1:\n\n\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\n\nExample 2:\n\n\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\n\nExample 3:\n\n\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n\n\n \n\nConstraints:\n\n * 1 <= k <= num.length <= 105\n * num consists of only digits.\n * num does not have any leading zeros except for the zero itself.",
        "Answer": "",
        "title": "remove-k-digits"
    },
    {
        "Question": "Non-overlapping Intervals - Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\n\n \n\nExample 1:\n\n\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n\n\nExample 2:\n\n\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n\n\nExample 3:\n\n\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n\n\n \n\nConstraints:\n\n * 1 <= intervals.length <= 105\n * intervals[i].length == 2\n * -5 * 104 <= starti < endi <= 5 * 104",
        "Answer": "",
        "title": "non-overlapping-intervals"
    },
    {
        "Question": "Minimum Number of Arrows to Burst Balloons - There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\n\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.\n\n \n\nExample 1:\n\n\nInput: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n\n\nExample 2:\n\n\nInput: points = [[1,2],[3,4],[5,6],[7,8]]\nOutput: 4\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n\n\nExample 3:\n\n\nInput: points = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n\n\n \n\nConstraints:\n\n * 1 <= points.length <= 105\n * points[i].length == 2\n * -231 <= xstart < xend <= 231 - 1",
        "Answer": "",
        "title": "minimum-number-of-arrows-to-burst-balloons"
    },
    {
        "Question": "Assign Cookies - Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n \n\nExample 1:\n\n\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n\nExample 2:\n\n\nInput: g = [1,2], s = [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\n\n \n\nConstraints:\n\n * 1 <= g.length <= 3 * 104\n * 0 <= s.length <= 3 * 104\n * 1 <= g[i], s[j] <= 231 - 1\n\n \n\nNote: This question is the same as 2410: Maximum Matching of Players With Trainers. [https://leetcode.com/problems/maximum-matching-of-players-with-trainers/description/]",
        "Answer": "",
        "title": "assign-cookies"
    },
    {
        "Question": "Task Scheduler - You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label.\n\nReturn the minimum number of CPU intervals required to complete all tasks.\n\n \n\nExample 1:\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n\nOutput: 8\n\nExplanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.\n\nAfter completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed.\n\nExample 2:\n\nInput: tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1\n\nOutput: 6\n\nExplanation: A possible sequence is: A -> B -> C -> D -> A -> B.\n\nWith a cooling interval of 1, you can repeat a task after just one other task.\n\nExample 3:\n\nInput: tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3\n\nOutput: 10\n\nExplanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.\n\nThere are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.\n\n \n\nConstraints:\n\n * 1 <= tasks.length <= 104\n * tasks[i] is an uppercase English letter.\n * 0 <= n <= 100",
        "Answer": "",
        "title": "task-scheduler"
    },
    {
        "Question": "Course Schedule III - There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.\n\nYou will start on the 1st day and you cannot take two or more courses simultaneously.\n\nReturn the maximum number of courses that you can take.\n\n \n\nExample 1:\n\n\nInput: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\nOutput: 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n\n\nExample 2:\n\n\nInput: courses = [[1,2]]\nOutput: 1\n\n\nExample 3:\n\n\nInput: courses = [[3,2],[4,3]]\nOutput: 0\n\n\n \n\nConstraints:\n\n * 1 <= courses.length <= 104\n * 1 <= durationi, lastDayi <= 104",
        "Answer": "",
        "title": "course-schedule-iii"
    },
    {
        "Question": "Maximum Length of Pair Chain - You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.\n\nA pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.\n\nReturn the length longest chain which can be formed.\n\nYou do not need to use up all the given intervals. You can select pairs in any order.\n\n \n\nExample 1:\n\n\nInput: pairs = [[1,2],[2,3],[3,4]]\nOutput: 2\nExplanation: The longest chain is [1,2] -> [3,4].\n\n\nExample 2:\n\n\nInput: pairs = [[1,2],[7,8],[4,5]]\nOutput: 3\nExplanation: The longest chain is [1,2] -> [4,5] -> [7,8].\n\n\n \n\nConstraints:\n\n * n == pairs.length\n * 1 <= n <= 1000\n * -1000 <= lefti < righti <= 1000",
        "Answer": "",
        "title": "maximum-length-of-pair-chain"
    },
    {
        "Question": "Dota2 Senate - In the world of Dota2, there are two parties: the Radiant and the Dire.\n\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\n\n * Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.\n * Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\nGiven a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".\n\n \n\nExample 1:\n\n\nInput: senate = \"RD\"\nOutput: \"Radiant\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n\n\nExample 2:\n\n\nInput: senate = \"RDD\"\nOutput: \"Dire\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\n\n \n\nConstraints:\n\n * n == senate.length\n * 1 <= n <= 104\n * senate[i] is either 'R' or 'D'.",
        "Answer": "",
        "title": "dota2-senate"
    },
    {
        "Question": "Split Array into Consecutive Subsequences - You are given an integer array nums that is sorted in non-decreasing order.\n\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\n\n * Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).\n * All subsequences have a length of 3 or more.\n\nReturn true if you can split nums according to the above conditions, or false otherwise.\n\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).\n\n \n\nExample 1:\n\n\nInput: nums = [1,2,3,3,4,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,5] --> 1, 2, 3\n[1,2,3,3,4,5] --> 3, 4, 5\n\n\nExample 2:\n\n\nInput: nums = [1,2,3,3,4,4,5,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\n[1,2,3,3,4,4,5,5] --> 3, 4, 5\n\n\nExample 3:\n\n\nInput: nums = [1,2,3,4,4,5]\nOutput: false\nExplanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 104\n * -1000 <= nums[i] <= 1000\n * nums is sorted in non-decreasing order.",
        "Answer": "",
        "title": "split-array-into-consecutive-subsequences"
    },
    {
        "Question": "Monotone Increasing Digits - An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\n\nGiven an integer n, return the largest number that is less than or equal to n with monotone increasing digits.\n\n \n\nExample 1:\n\n\nInput: n = 10\nOutput: 9\n\n\nExample 2:\n\n\nInput: n = 1234\nOutput: 1234\n\n\nExample 3:\n\n\nInput: n = 332\nOutput: 299\n\n\n \n\nConstraints:\n\n * 0 <= n <= 109",
        "Answer": "",
        "title": "monotone-increasing-digits"
    },
    {
        "Question": "Set Intersection Size At Least Two - You are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.\n\nA containing set is an array nums where each interval from intervals has at least two integers in nums.\n\n * For example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets.\n\nReturn the minimum possible size of a containing set.\n\n \n\nExample 1:\n\n\nInput: intervals = [[1,3],[3,7],[8,9]]\nOutput: 5\nExplanation: let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.\n\n\nExample 2:\n\n\nInput: intervals = [[1,3],[1,4],[2,5],[3,5]]\nOutput: 3\nExplanation: let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.\n\n\nExample 3:\n\n\nInput: intervals = [[1,2],[2,3],[2,4],[4,5]]\nOutput: 5\nExplanation: let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.\n\n\n \n\nConstraints:\n\n * 1 <= intervals.length <= 3000\n * intervals[i].length == 2\n * 0 <= starti < endi <= 108",
        "Answer": "",
        "title": "set-intersection-size-at-least-two"
    },
    {
        "Question": "Partition Labels - You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string \"ababcc\" can be partitioned into [\"abab\", \"cc\"], but partitions such as [\"aba\", \"bcc\"] or [\"ab\", \"ab\", \"cc\"] are invalid.\n\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\n\nReturn a list of integers representing the size of these parts.\n\n \n\nExample 1:\n\n\nInput: s = \"ababcbacadefegdehijhklij\"\nOutput: [9,7,8]\nExplanation:\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\n\n\nExample 2:\n\n\nInput: s = \"eccbbbbdec\"\nOutput: [10]\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 500\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "partition-labels"
    },
    {
        "Question": "Reorganize String - Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\n\nReturn any possible rearrangement of s or return \"\" if not possible.\n\n \n\nExample 1:\n\nInput: s = \"aab\"\nOutput: \"aba\"\n\n\nExample 2:\n\nInput: s = \"aaab\"\nOutput: \"\"\n\n\n \n\nConstraints:\n\n * 1 <= s.length <= 500\n * s consists of lowercase English letters.",
        "Answer": "",
        "title": "reorganize-string"
    },
    {
        "Question": "Smallest Rotation with Highest Score - You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.\n\n * For example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\n\nReturn the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.\n\n \n\nExample 1:\n\n\nInput: nums = [2,3,1,4,0]\nOutput: 3\nExplanation: Scores for each k are listed below: \nk = 0,  nums = [2,3,1,4,0],    score 2\nk = 1,  nums = [3,1,4,0,2],    score 3\nk = 2,  nums = [1,4,0,2,3],    score 3\nk = 3,  nums = [4,0,2,3,1],    score 4\nk = 4,  nums = [0,2,3,1,4],    score 3\nSo we should choose k = 3, which has the highest score.\n\n\nExample 2:\n\n\nInput: nums = [1,3,0,2,4]\nOutput: 0\nExplanation: nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0.\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 0 <= nums[i] < nums.length",
        "Answer": "",
        "title": "smallest-rotation-with-highest-score"
    },
    {
        "Question": "Guess the Word - You are given an array of unique strings words where words[i] is six letters long. One word of words was chosen as a secret word.\n\nYou are also given the helper object Master. You may call Master.guess(word) where word is a six-letter-long string, and it must be from words. Master.guess(word) returns:\n\n * -1 if word is not from words, or\n * an integer representing the number of exact matches (value and position) of your guess to the secret word.\n\nThere is a parameter allowedGuesses for each test case where allowedGuesses is the maximum number of times you can call Master.guess(word).\n\nFor each test case, you should call Master.guess with the secret word without exceeding the maximum number of allowed guesses. You will get:\n\n * \"Either you took too many guesses, or you did not find the secret word.\" if you called Master.guess more than allowedGuesses times or if you did not call Master.guess with the secret word, or\n * \"You guessed the secret word correctly.\" if you called Master.guess with the secret word with the number of calls to Master.guess less than or equal to allowedGuesses.\n\nThe test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).\n\n \n\nExample 1:\n\n\nInput: secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10\nOutput: You guessed the secret word correctly.\nExplanation:\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case.\n\n\nExample 2:\n\n\nInput: secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10\nOutput: You guessed the secret word correctly.\nExplanation: Since there are two words, you can guess both.\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 100\n * words[i].length == 6\n * words[i] consist of lowercase English letters.\n * All the strings of wordlist are unique.\n * secret exists in words.\n * 10 <= allowedGuesses <= 30",
        "Answer": "",
        "title": "guess-the-word"
    },
    {
        "Question": "Score After Flipping Matrix - You are given an m x n binary matrix grid.\n\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\n\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\n\nReturn the highest possible score after making any number of moves (including zero moves).\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/07/23/lc-toogle1.jpg]\n\n\nInput: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\nOutput: 39\nExplanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n\n\nExample 2:\n\n\nInput: grid = [[0]]\nOutput: 1\n\n\n \n\nConstraints:\n\n * m == grid.length\n * n == grid[i].length\n * 1 <= m, n <= 20\n * grid[i][j] is either 0 or 1.",
        "Answer": "",
        "title": "score-after-flipping-matrix"
    },
    {
        "Question": "Advantage Shuffle - You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\n\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.\n\n \n\nExample 1:\n\nInput: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\nOutput: [2,11,7,15]\n\n\nExample 2:\n\nInput: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\nOutput: [24,32,8,12]\n\n\n \n\nConstraints:\n\n * 1 <= nums1.length <= 105\n * nums2.length == nums1.length\n * 0 <= nums1[i], nums2[i] <= 109",
        "Answer": "",
        "title": "advantage-shuffle"
    },
    {
        "Question": "Boats to Save People - You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\n\nReturn the minimum number of boats to carry every given person.\n\n \n\nExample 1:\n\n\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n\n\nExample 2:\n\n\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n\n\nExample 3:\n\n\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n\n\n \n\nConstraints:\n\n * 1 <= people.length <= 5 * 104\n * 1 <= people[i] <= limit <= 3 * 104",
        "Answer": "",
        "title": "boats-to-save-people"
    },
    {
        "Question": "Stamping The Sequence - You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.\n\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\n\n * For example, if stamp = \"abc\" and target = \"abcba\", then s is \"?????\" initially. In one turn you can:\n   * place stamp at index 0 of s to obtain \"abc??\",\n   * place stamp at index 1 of s to obtain \"?abc?\", or\n   * place stamp at index 2 of s to obtain \"??abc\".\n   Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).\n\nWe want to convert s to target using at most 10 * target.length turns.\n\nReturn an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.\n\n \n\nExample 1:\n\n\nInput: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\nExplanation: Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n\n\nExample 2:\n\n\nInput: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\nExplanation: Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\".\n\n\n \n\nConstraints:\n\n * 1 <= stamp.length <= target.length <= 1000\n * stamp and target consist of lowercase English letters.",
        "Answer": "",
        "title": "stamping-the-sequence"
    },
    {
        "Question": "Bag of Tokens - You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] denotes the value of tokeni.\n\nYour goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):\n\n * Face-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.\n * Face-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.\n\nReturn the maximum possible score you can achieve after playing any number of tokens.\n\n \n\nExample 1:\n\nInput: tokens = [100], power = 50\n\nOutput: 0\n\nExplanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100).\n\nExample 2:\n\nInput: tokens = [200,100], power = 150\n\nOutput: 1\n\nExplanation: Play token1 (100) face-up, reducing your power to 50 and increasing your score to 1.\n\nThere is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1.\n\nExample 3:\n\nInput: tokens = [100,200,300,400], power = 200\n\nOutput: 2\n\nExplanation: Play the tokens in this order to get a score of 2:\n\n 1. Play token0 (100) face-up, reducing power to 100 and increasing score to 1.\n 2. Play token3 (400) face-down, increasing power to 500 and reducing score to 0.\n 3. Play token1 (200) face-up, reducing power to 300 and increasing score to 1.\n 4. Play token2 (300) face-up, reducing power to 0 and increasing score to 2.\n\nThe maximum score achievable is 2.\n\n \n\nConstraints:\n\n * 0 <= tokens.length <= 1000\n * 0 <= tokens[i], power < 104",
        "Answer": "",
        "title": "bag-of-tokens"
    },
    {
        "Question": "Maximum Width Ramp - A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.\n\nGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.\n\n \n\nExample 1:\n\n\nInput: nums = [6,0,8,2,1,5]\nOutput: 4\nExplanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.\n\n\nExample 2:\n\n\nInput: nums = [9,8,1,0,1,9,4,0,4,1]\nOutput: 7\nExplanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.\n\n\n \n\nConstraints:\n\n * 2 <= nums.length <= 5 * 104\n * 0 <= nums[i] <= 5 * 104",
        "Answer": "",
        "title": "maximum-width-ramp"
    },
    {
        "Question": "Binary Tree Cameras - You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\n\nReturn the minimum number of cameras needed to monitor all nodes of the tree.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png]\n\n\nInput: root = [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png]\n\n\nInput: root = [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 1000].\n * Node.val == 0",
        "Answer": "",
        "title": "binary-tree-cameras"
    },
    {
        "Question": "String Without AAA or BBB - Given two integers a and b, return any string s such that:\n\n * s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,\n * The substring 'aaa' does not occur in s, and\n * The substring 'bbb' does not occur in s.\n\n \n\nExample 1:\n\n\nInput: a = 1, b = 2\nOutput: \"abb\"\nExplanation: \"abb\", \"bab\" and \"bba\" are all correct answers.\n\n\nExample 2:\n\n\nInput: a = 4, b = 1\nOutput: \"aabaa\"\n\n\n \n\nConstraints:\n\n * 0 <= a, b <= 100\n * It is guaranteed such an s exists for the given a and b.",
        "Answer": "",
        "title": "string-without-aaa-or-bbb"
    },
    {
        "Question": "Broken Calculator - There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\n\n * multiply the number on display by 2, or\n * subtract 1 from the number on display.\n\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.\n\n \n\nExample 1:\n\n\nInput: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\n\nExample 2:\n\n\nInput: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\n\nExample 3:\n\n\nInput: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n\n \n\nConstraints:\n\n * 1 <= startValue, target <= 109",
        "Answer": "",
        "title": "broken-calculator"
    },
    {
        "Question": "Minimum Number of K Consecutive Bit Flips - You are given a binary array nums and an integer k.\n\nA k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\n\nReturn the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.\n\nA subarray is a contiguous part of an array.\n\n \n\nExample 1:\n\n\nInput: nums = [0,1,0], k = 1\nOutput: 2\nExplanation: Flip nums[0], then flip nums[2].\n\n\nExample 2:\n\n\nInput: nums = [1,1,0], k = 2\nOutput: -1\nExplanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].\n\n\nExample 3:\n\n\nInput: nums = [0,0,0,1,0,1,1,0], k = 3\nOutput: 3\nExplanation: \nFlip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 105\n * 1 <= k <= nums.length",
        "Answer": "",
        "title": "minimum-number-of-k-consecutive-bit-flips"
    },
    {
        "Question": "Reconstruct Itinerary - You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\n * For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg]\n\n\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg]\n\n\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n\n\n \n\nConstraints:\n\n * 1 <= tickets.length <= 300\n * tickets[i].length == 2\n * fromi.length == 3\n * toi.length == 3\n * fromi and toi consist of uppercase English letters.\n * fromi != toi",
        "Answer": "",
        "title": "reconstruct-itinerary"
    },
    {
        "Question": "Evaluate Division - You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\n\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.\n\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\n\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n\nNote: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\n\n \n\nExample 1:\n\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation: \nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined => -1.0\n\nExample 2:\n\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000,0.40000,5.00000,0.20000]\n\n\nExample 3:\n\n\nInput: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]\n\n\n \n\nConstraints:\n\n * 1 <= equations.length <= 20\n * equations[i].length == 2\n * 1 <= Ai.length, Bi.length <= 5\n * values.length == equations.length\n * 0.0 < values[i] <= 20.0\n * 1 <= queries.length <= 20\n * queries[i].length == 2\n * 1 <= Cj.length, Dj.length <= 5\n * Ai, Bi, Cj, Dj consist of lower case English letters and digits.",
        "Answer": "",
        "title": "evaluate-division"
    },
    {
        "Question": "Couples Holding Hands - There are n couples sitting in 2n seats arranged in a row and want to hold hands.\n\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\n\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\n\n \n\nExample 1:\n\n\nInput: row = [0,2,1,3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\n\n\nExample 2:\n\n\nInput: row = [3,2,0,1]\nOutput: 0\nExplanation: All couples are already seated side by side.\n\n\n \n\nConstraints:\n\n * 2n == row.length\n * 2 <= n <= 30\n * n is even.\n * 0 <= row[i] < 2n\n * All the elements of row are unique.",
        "Answer": "",
        "title": "couples-holding-hands"
    },
    {
        "Question": "Minimize Malware Spread - You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\n\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\n\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.\n\n \n\nExample 1:\n\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n\n\nExample 2:\n\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0\n\n\nExample 3:\n\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == graph.length\n * n == graph[i].length\n * 2 <= n <= 300\n * graph[i][j] is 0 or 1.\n * graph[i][j] == graph[j][i]\n * graph[i][i] == 1\n * 1 <= initial.length <= n\n * 0 <= initial[i] <= n - 1\n * All the integers in initial are unique.",
        "Answer": "",
        "title": "minimize-malware-spread"
    },
    {
        "Question": "Minimize Malware Spread II - You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\n\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\n\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n\n \n\nExample 1:\n\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n\n\nExample 2:\n\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1\n\n\nExample 3:\n\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1\n\n\n \n\nConstraints:\n\n * n == graph.length\n * n == graph[i].length\n * 2 <= n <= 300\n * graph[i][j] is 0 or 1.\n * graph[i][j] == graph[j][i]\n * graph[i][i] == 1\n * 1 <= initial.length < n\n * 0 <= initial[i] <= n - 1\n * All the integers in initial are unique.",
        "Answer": "",
        "title": "minimize-malware-spread-ii"
    },
    {
        "Question": "Regions Cut By Slashes - An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '. These characters divide the square into contiguous regions.\n\nGiven the grid grid represented as a string array, return the number of regions.\n\nNote that backslash characters are escaped, so a '\\' is represented as '\\\\'.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/15/1.png]\n\n\nInput: grid = [\" /\",\"/ \"]\nOutput: 2\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2018/12/15/2.png]\n\n\nInput: grid = [\" /\",\"  \"]\nOutput: 1\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2018/12/15/4.png]\n\n\nInput: grid = [\"/\\\\\",\"\\\\/\"]\nOutput: 5\nExplanation: Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.\n\n\n \n\nConstraints:\n\n * n == grid.length == grid[i].length\n * 1 <= n <= 30\n * grid[i][j] is either '/', '\\', or ' '.",
        "Answer": "",
        "title": "regions-cut-by-slashes"
    },
    {
        "Question": "Satisfiability of Equality Equations - You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\n\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\n\n \n\nExample 1:\n\n\nInput: equations = [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n\n\nExample 2:\n\n\nInput: equations = [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\n\n\n \n\nConstraints:\n\n * 1 <= equations.length <= 500\n * equations[i].length == 4\n * equations[i][0] is a lowercase letter.\n * equations[i][1] is either '=' or '!'.\n * equations[i][2] is '='.\n * equations[i][3] is a lowercase letter.",
        "Answer": "",
        "title": "satisfiability-of-equality-equations"
    },
    {
        "Question": "Erect the Fence - You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\n\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.\n\nReturn the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/04/24/erect2-plane.jpg]\n\n\nInput: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\nExplanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/04/24/erect1-plane.jpg]\n\n\nInput: trees = [[1,2],[2,2],[4,2]]\nOutput: [[4,2],[2,2],[1,2]]\nExplanation: The fence forms a line that passes through all the trees.\n\n\n \n\nConstraints:\n\n * 1 <= trees.length <= 3000\n * trees[i].length == 2\n * 0 <= xi, yi <= 100\n * All the given positions are unique.",
        "Answer": "",
        "title": "erect-the-fence"
    },
    {
        "Question": "Surface Area of 3D Shapes - You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\n\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\n\nReturn the total surface area of the resulting shapes.\n\nNote: The bottom face of each shape counts toward its surface area.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg]\n\n\nInput: grid = [[1,2],[3,4]]\nOutput: 34\n\n\nExample 2:\n\n[https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg]\n\n\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 32\n\n\nExample 3:\n\n[https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg]\n\n\nInput: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 46\n\n\n \n\nConstraints:\n\n * n == grid.length == grid[i].length\n * 1 <= n <= 50\n * 0 <= grid[i][j] <= 50",
        "Answer": "",
        "title": "surface-area-of-3d-shapes"
    },
    {
        "Question": "Walking Robot Simulation - A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot receives an array of integers commands, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive:\n\n * -2: Turn left 90 degrees.\n * -1: Turn right 90 degrees.\n * 1 <= k <= 9: Move forward k units, one unit at a time.\n\nSome of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command.\n\nReturn the maximum squared Euclidean distance that the robot reaches at any point in its path (i.e. if the distance is 5, return 25).\n\nNote:\n\n * There can be an obstacle at (0, 0). If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to (0, 0) due to the obstacle.\n * North means +Y direction.\n * East means +X direction.\n * South means -Y direction.\n * West means -X direction.\n\n \n\nExample 1:\n\nInput: commands = [4,-1,3], obstacles = []\n\nOutput: 25\n\nExplanation:\n\nThe robot starts at (0, 0):\n\n 1. Move north 4 units to (0, 4).\n 2. Turn right.\n 3. Move east 3 units to (3, 4).\n\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.\n\nExample 2:\n\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n\nOutput: 65\n\nExplanation:\n\nThe robot starts at (0, 0):\n\n 1. Move north 4 units to (0, 4).\n 2. Turn right.\n 3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n 4. Turn left.\n 5. Move north 4 units to (1, 8).\n\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.\n\nExample 3:\n\nInput: commands = [6,-1,-1,6], obstacles = [[0,0]]\n\nOutput: 36\n\nExplanation:\n\nThe robot starts at (0, 0):\n\n 1. Move north 6 units to (0, 6).\n 2. Turn right.\n 3. Turn right.\n 4. Move south 5 units and get blocked by the obstacle at (0,0), robot is at (0, 1).\n\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.\n\n \n\nConstraints:\n\n * 1 <= commands.length <= 104\n * commands[i] is either -2, -1, or an integer in the range [1, 9].\n * 0 <= obstacles.length <= 104\n * -3 * 104 <= xi, yi <= 3 * 104\n * The answer is guaranteed to be less than 231.",
        "Answer": "",
        "title": "walking-robot-simulation"
    },
    {
        "Question": "LRU Cache - Design a data structure that follows the constraints of a Least Recently Used (LRU) cache [https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU].\n\nImplement the LRUCache class:\n\n * LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n * int get(int key) Return the value of the key if the key exists, otherwise return -1.\n * void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.\n\n \n\nExample 1:\n\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\n \n\nConstraints:\n\n * 1 <= capacity <= 3000\n * 0 <= key <= 104\n * 0 <= value <= 105\n * At most 2 * 105 calls will be made to get and put.",
        "Answer": "",
        "title": "lru-cache"
    },
    {
        "Question": "Implement Stack using Queues - Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n\nImplement the MyStack class:\n\n * void push(int x) Pushes element x to the top of the stack.\n * int pop() Removes the element on the top of the stack and returns it.\n * int top() Returns the element on the top of the stack.\n * boolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\n * You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\n * Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n \n\nExample 1:\n\n\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n\n \n\nConstraints:\n\n * 1 <= x <= 9\n * At most 100 calls will be made to push, pop, top, and empty.\n * All the calls to pop and top are valid.\n\n \n\nFollow-up: Can you implement the stack using only one queue?",
        "Answer": "",
        "title": "implement-stack-using-queues"
    },
    {
        "Question": "Binary Search Tree Iterator - Implement the BSTIterator class that represents an iterator over the in-order traversal [https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)] of a binary search tree (BST):\n\n * BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n * boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n * int next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n\n \n\nExample 1:\n\n[https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png]\n\n\nInput\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n\n\n \n\nConstraints:\n\n * The number of nodes in the tree is in the range [1, 105].\n * 0 <= Node.val <= 106\n * At most 105 calls will be made to hasNext, and next.\n\n \n\nFollow up:\n\n * Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?",
        "Answer": "",
        "title": "binary-search-tree-iterator"
    },
    {
        "Question": "Peeking Iterator - Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\n\nImplement the PeekingIterator class:\n\n * PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\n * int next() Returns the next element in the array and moves the pointer to the next element.\n * boolean hasNext() Returns true if there are still elements in the array.\n * int peek() Returns the next element in the array without moving the pointer.\n\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\n\n \n\nExample 1:\n\n\nInput\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 2, 2, 3, false]\n\nExplanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False\n\n\n \n\nConstraints:\n\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 1000\n * All the calls to next and peek are valid.\n * At most 1000 calls will be made to next, hasNext, and peek.\n\n \n\nFollow up: How would you extend your design to be generic and work with all types, not just integer?",
        "Answer": "",
        "title": "peeking-iterator"
    },
    {
        "Question": "Design Twitter - Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n\nImplement the Twitter class:\n\n * Twitter() Initializes your twitter object.\n * void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n * List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n * void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n * void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n\n \n\nExample 1:\n\n\nInput\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.\n\n\n \n\nConstraints:\n\n * 1 <= userId, followerId, followeeId <= 500\n * 0 <= tweetId <= 104\n * All the tweets have unique IDs.\n * At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.\n * A user cannot follow himself.",
        "Answer": "",
        "title": "design-twitter"
    },
    {
        "Question": "Insert Delete GetRandom O(1) - Implement the RandomizedSet class:\n\n * RandomizedSet() Initializes the RandomizedSet object.\n * bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n * bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n * int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n\nYou must implement the functions of the class such that each function works in average O(1) time complexity.\n\n \n\nExample 1:\n\n\nInput\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n\n\n \n\nConstraints:\n\n * -231 <= val <= 231 - 1\n * At most 2 * 105 calls will be made to insert, remove, and getRandom.\n * There will be at least one element in the data structure when getRandom is called.",
        "Answer": "",
        "title": "insert-delete-getrandom-o1"
    },
    {
        "Question": "Insert Delete GetRandom O(1) - Duplicates allowed - RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\nImplement the RandomizedCollection class:\n\n * RandomizedCollection() Initializes the empty RandomizedCollection object.\n * bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\n * bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\n * int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.\n\nYou must implement the functions of the class such that each function works on average O(1) time complexity.\n\nNote: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\n\n \n\nExample 1:\n\n\nInput\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\n\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n\n\n \n\nConstraints:\n\n * -231 <= val <= 231 - 1\n * At most 2 * 105 calls in total will be made to insert, remove, and getRandom.\n * There will be at least one element in the data structure when getRandom is called.",
        "Answer": "",
        "title": "insert-delete-getrandom-o1-duplicates-allowed"
    },
    {
        "Question": "All O`one Data Structure - Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n\nImplement the AllOne class:\n\n * AllOne() Initializes the object of the data structure.\n * inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n * dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n * getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n * getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n\nNote that each function must run in O(1) average time complexity.\n\n \n\nExample 1:\n\n\nInput\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\nOutput\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\nExplanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"\n\n\n \n\nConstraints:\n\n * 1 <= key.length <= 10\n * key consists of lowercase English letters.\n * It is guaranteed that for each call to dec, key is existing in the data structure.\n * At most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.",
        "Answer": "",
        "title": "all-oone-data-structure"
    },
    {
        "Question": "LFU Cache - Design and implement a data structure for a Least Frequently Used (LFU) [https://en.wikipedia.org/wiki/Least_frequently_used] cache.\n\nImplement the LFUCache class:\n\n * LFUCache(int capacity) Initializes the object with the capacity of the data structure.\n * int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\n * void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\n\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\n\nThe functions get and put must each run in O(1) average time complexity.\n\n \n\nExample 1:\n\n\nInput\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                 // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\n\n\n \n\nConstraints:\n\n * 1 <= capacity <= 104\n * 0 <= key <= 105\n * 0 <= value <= 109\n * At most 2 * 105 calls will be made to get and put.",
        "Answer": "",
        "title": "lfu-cache"
    },
    {
        "Question": "Encode and Decode TinyURL - > Note: This is a companion problem to the System Design [https://leetcode.com/discuss/interview-question/system-design/] problem: Design TinyURL [https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/].\n\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\n\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n\nImplement the Solution class:\n\n * Solution() Initializes the object of the system.\n * String encode(String longUrl) Returns a tiny URL for the given longUrl.\n * String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.\n\n \n\nExample 1:\n\n\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\n\nExplanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.\n\n\n \n\nConstraints:\n\n * 1 <= url.length <= 104\n * url is guranteed to be a valid URL.",
        "Answer": "",
        "title": "encode-and-decode-tinyurl"
    },
    {
        "Question": "Design Circular Queue - Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\nImplement the MyCircularQueue class:\n\n * MyCircularQueue(k) Initializes the object with the size of the queue to be k.\n * int Front() Gets the front item from the queue. If the queue is empty, return -1.\n * int Rear() Gets the last item from the queue. If the queue is empty, return -1.\n * boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.\n * boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.\n * boolean isEmpty() Checks whether the circular queue is empty or not.\n * boolean isFull() Checks whether the circular queue is full or not.\n\nYou must solve the problem without using the built-in queue data structure in your programming language. \n\n \n\nExample 1:\n\n\nInput\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 3, true, true, true, 4]\n\nExplanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n\n\n \n\nConstraints:\n\n * 1 <= k <= 1000\n * 0 <= value <= 1000\n * At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.",
        "Answer": "",
        "title": "design-circular-queue"
    },
    {
        "Question": "Design Circular Deque - Design your implementation of the circular double-ended queue (deque).\n\nImplement the MyCircularDeque class:\n\n * MyCircularDeque(int k) Initializes the deque with a maximum size of k.\n * boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.\n * boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.\n * boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.\n * boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.\n * int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.\n * int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.\n * boolean isEmpty() Returns true if the deque is empty, or false otherwise.\n * boolean isFull() Returns true if the deque is full, or false otherwise.\n\n \n\nExample 1:\n\n\nInput\n[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 2, true, true, true, 4]\n\nExplanation\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4\n\n\n \n\nConstraints:\n\n * 1 <= k <= 1000\n * 0 <= value <= 1000\n * At most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull.",
        "Answer": "",
        "title": "design-circular-deque"
    },
    {
        "Question": "Design HashSet - Design a HashSet without using any built-in hash table libraries.\n\nImplement MyHashSet class:\n\n * void add(key) Inserts the value key into the HashSet.\n * bool contains(key) Returns whether the value key exists in the HashSet or not.\n * void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.\n\n \n\nExample 1:\n\n\nInput\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\n\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)\n\n \n\nConstraints:\n\n * 0 <= key <= 106\n * At most 104 calls will be made to add, remove, and contains.",
        "Answer": "",
        "title": "design-hashset"
    },
    {
        "Question": "Design HashMap - Design a HashMap without using any built-in hash table libraries.\n\nImplement the MyHashMap class:\n\n * MyHashMap() initializes the object with an empty map.\n * void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.\n * int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.\n * void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.\n\n \n\nExample 1:\n\n\nInput\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\n\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n\n\n \n\nConstraints:\n\n * 0 <= key, value <= 106\n * At most 104 calls will be made to put, get, and remove.",
        "Answer": "",
        "title": "design-hashmap"
    },
    {
        "Question": "Design Linked List - Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\nA node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n\nImplement the MyLinkedList class:\n\n * MyLinkedList() Initializes the MyLinkedList object.\n * int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.\n * void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n * void addAtTail(int val) Append a node of value val as the last element of the linked list.\n * void addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.\n * void deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.\n\n \n\nExample 1:\n\n\nInput\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]\nOutput\n[null, null, null, null, 2, null, 3]\n\nExplanation\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\nmyLinkedList.get(1);              // return 3\n\n\n \n\nConstraints:\n\n * 0 <= index, val <= 1000\n * Please do not use the built-in LinkedList library.\n * At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.",
        "Answer": "",
        "title": "design-linked-list"
    },
    {
        "Question": "Range Module - A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\n\nA half-open interval [left, right) denotes all the real numbers x where left <= x < right.\n\nImplement the RangeModule class:\n\n * RangeModule() Initializes the object of the data structure.\n * void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\n * boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.\n * void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).\n\n \n\nExample 1:\n\n\nInput\n[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\nOutput\n[null, null, null, true, false, true]\n\nExplanation\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\n\n\n \n\nConstraints:\n\n * 1 <= left < right <= 109\n * At most 104 calls will be made to addRange, queryRange, and removeRange.",
        "Answer": "",
        "title": "range-module"
    },
    {
        "Question": "Max Stack - Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "max-stack"
    },
    {
        "Question": "Prefix and Suffix Search - Design a special dictionary that searches the words in it by a prefix and a suffix.\n\nImplement the WordFilter class:\n\n * WordFilter(string[] words) Initializes the object with the words in the dictionary.\n * f(string pref, string suff) Returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.\n\n \n\nExample 1:\n\n\nInput\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]\nOutput\n[null, 0]\nExplanation\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\".\n\n\n \n\nConstraints:\n\n * 1 <= words.length <= 104\n * 1 <= words[i].length <= 7\n * 1 <= pref.length, suff.length <= 7\n * words[i], pref and suff consist of lowercase English letters only.\n * At most 104 calls will be made to the function f.",
        "Answer": "",
        "title": "prefix-and-suffix-search"
    },
    {
        "Question": "RLE Iterator - We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\n\n * For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.\n\nGiven a run-length encoded array, design an iterator that iterates through it.\n\nImplement the RLEIterator class:\n\n * RLEIterator(int[] encoded) Initializes the object with the encoded array encoded.\n * int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.\n\n \n\nExample 1:\n\n\nInput\n[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\nOutput\n[null, 8, 8, 5, -1]\n\nExplanation\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.\n\n\n \n\nConstraints:\n\n * 2 <= encoding.length <= 1000\n * encoding.length is even.\n * 0 <= encoding[i] <= 109\n * 1 <= n <= 109\n * At most 1000 calls will be made to next.",
        "Answer": "",
        "title": "rle-iterator"
    },
    {
        "Question": "Combine Two Tables - Table: Person\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n\n\n \n\nTable: Address\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n\n\n \n\nWrite a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\nOutput: \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\nExplanation: \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.",
        "Answer": "",
        "title": "combine-two-tables"
    },
    {
        "Question": "Second Highest Salary - Table: Employee\n\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n\n \n\nWrite a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n\n\nExample 2:\n\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+",
        "Answer": "",
        "title": "second-highest-salary"
    },
    {
        "Question": "Nth Highest Salary - Table: Employee\n\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n\n \n\nWrite a solution to find the nth highest distinct salary from the Employee table. If there are less than n distinct salaries, return null.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n\n\nExample 2:\n\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+",
        "Answer": "",
        "title": "nth-highest-salary"
    },
    {
        "Question": "Rank Scores - Table: Scores\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| score       | decimal |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\n\n\n \n\nWrite a solution to find the rank of the scores. The ranking should be calculated according to the following rules:\n\n * The scores should be ranked from the highest to the lowest.\n * If there is a tie between two scores, both should have the same ranking.\n * After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.\n\nReturn the result table ordered by score in descending order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\nOutput: \n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+",
        "Answer": "",
        "title": "rank-scores"
    },
    {
        "Question": "Consecutive Numbers - Table: Logs\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nIn SQL, id is the primary key for this table.\nid is an autoincrement column starting from 1.\n\n\n \n\nFind all numbers that appear at least three times consecutively.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+\nOutput: \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\nExplanation: 1 is the only number that appears consecutively for at least three times.",
        "Answer": "",
        "title": "consecutive-numbers"
    },
    {
        "Question": "Employees Earning More Than Their Managers - Table: Employee\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n\n\n \n\nWrite a solution to find the employees who earn more than their managers.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+\nOutput: \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\nExplanation: Joe is the only employee who earns more than his manager.",
        "Answer": "",
        "title": "employees-earning-more-than-their-managers"
    },
    {
        "Question": "Duplicate Emails - Table: Person\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n\n\n \n\nWrite a solution to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\nOutput: \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\nExplanation: a@b.com is repeated two times.",
        "Answer": "",
        "title": "duplicate-emails"
    },
    {
        "Question": "Customers Who Never Order - Table: Customers\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID and name of a customer.\n\n\n \n\nTable: Orders\n\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\ncustomerId is a foreign key (reference columns) of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n\n\n \n\nWrite a solution to find all customers who never order anything.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\nOutput: \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+",
        "Answer": "",
        "title": "customers-who-never-order"
    },
    {
        "Question": "Department Highest Salary - Table: Employee\n\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference columns) of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\n\n \n\nTable: Department\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table. It is guaranteed that department name is not NULL.\nEach row of this table indicates the ID of a department and its name.\n\n\n \n\nWrite a solution to find employees who have the highest salary in each of the departments.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Jim   | 90000  | 1            |\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\nOutput: \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Jim      | 90000  |\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n+------------+----------+--------+\nExplanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.",
        "Answer": "",
        "title": "department-highest-salary"
    },
    {
        "Question": "Department Top Three Salaries - Table: Employee\n\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\n\n \n\nTable: Department\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n\n\n \n\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\n\nWrite a solution to find the employees who are high earners in each of the departments.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\nOutput: \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\nExplanation: \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees\n\n\n \n\nConstraints:\n\n * There are no employees with the exact same name, salary and department.",
        "Answer": "",
        "title": "department-top-three-salaries"
    },
    {
        "Question": "Delete Duplicate Emails - Table: Person\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n\n\n \n\nWrite a solution to delete all duplicate emails, keeping only one unique email with the smallest id.\n\nFor SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.\n\nFor Pandas users, please note that you are supposed to modify Person in place.\n\nAfter running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nOutput: \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\nExplanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.",
        "Answer": "",
        "title": "delete-duplicate-emails"
    },
    {
        "Question": "Rising Temperature - Table: Weather\n\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nThere are no different rows with the same recordDate.\nThis table contains information about the temperature on a certain day.\n\n\n \n\nWrite a solution to find all dates' id with higher temperatures compared to its previous dates (yesterday).\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\nOutput: \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\nExplanation: \nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30).",
        "Answer": "",
        "title": "rising-temperature"
    },
    {
        "Question": "Trips and Users - Table: Trips\n\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| client_id   | int      |\n| driver_id   | int      |\n| city_id     | int      |\n| status      | enum     |\n| request_at  | varchar  |     \n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM (category) type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').\n\n\n\n\nTable: Users\n\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| users_id    | int      |\n| banned      | enum     |\n| role        | enum     |\n+-------------+----------+\nusers_id is the primary key (column with unique values) for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of ('client', 'driver', 'partner').\nbanned is an ENUM (category) type of ('Yes', 'No').\n\n\n\n\nThe cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\n\nWrite a solution to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between \"2013-10-01\" and \"2013-10-03\" with at least one trip. Round Cancellation Rate to two decimal points.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+\nOutput: \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+\nExplanation: \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50",
        "Answer": "",
        "title": "trips-and-users"
    },
    {
        "Question": "Big Countries - Table: World\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| name        | varchar |\n| continent   | varchar |\n| area        | int     |\n| population  | int     |\n| gdp         | bigint  |\n+-------------+---------+\nname is the primary key (column with unique values) for this table.\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\n\n\n \n\nA country is big if:\n\n * it has an area of at least three million (i.e., 3000000 km2), or\n * it has a population of at least twenty-five million (i.e., 25000000).\n\nWrite a solution to find the name, population, and area of the big countries.\n\nReturn the result table in any order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name        | continent | area    | population | gdp          |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\n+-------------+-----------+---------+------------+--------------+\nOutput: \n+-------------+------------+---------+\n| name        | population | area    |\n+-------------+------------+---------+\n| Afghanistan | 25500100   | 652230  |\n| Algeria     | 37100000   | 2381741 |\n+-------------+------------+---------+",
        "Answer": "",
        "title": "big-countries"
    },
    {
        "Question": "Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.",
        "Answer": "",
        "title": "classes-more-than-5-students"
    },
    {
        "Question": "Human Traffic of Stadium - Table: Stadium\n\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the column with unique values for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nAs the id increases, the date increases as well.\n\n\n \n\nWrite a solution to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.\n\nReturn the result table ordered by visit_date in ascending order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nOutput: \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nExplanation: \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.",
        "Answer": "",
        "title": "human-traffic-of-stadium"
    },
    {
        "Question": "Not Boring Movies - Table: Cinema\n\n\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| id             | int      |\n| movie          | varchar  |\n| description    | varchar  |\n| rating         | float    |\n+----------------+----------+\nid is the primary key (column with unique values) for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\n\n\n \n\nWrite a solution to report the movies with an odd-numbered ID and a description that is not \"boring\".\n\nReturn the result table ordered by rating in descending order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+\nOutput: \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+\nExplanation: \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.",
        "Answer": "",
        "title": "not-boring-movies"
    },
    {
        "Question": "Exchange Seats - Table: Seat\n\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| student     | varchar |\n+-------------+---------+\nid is the primary key (unique value) column for this table.\nEach row of this table indicates the name and the ID of a student.\nThe ID sequence always starts from 1 and increments continuously.\n\n\n \n\nWrite a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.\n\nReturn the result table ordered by id in ascending order.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Abbot   |\n| 2  | Doris   |\n| 3  | Emerson |\n| 4  | Green   |\n| 5  | Jeames  |\n+----+---------+\nOutput: \n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Doris   |\n| 2  | Abbot   |\n| 3  | Green   |\n| 4  | Emerson |\n| 5  | Jeames  |\n+----+---------+\nExplanation: \nNote that if the number of students is odd, there is no need to change the last one's seat.",
        "Answer": "",
        "title": "exchange-seats"
    },
    {
        "Question": "Swap Salary - Table: Salary\n\n\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| name        | varchar  |\n| sex         | ENUM     |\n| salary      | int      |\n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe sex column is ENUM (category) value of type ('m', 'f').\nThe table contains information about an employee.\n\n\n \n\nWrite a solution to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.\n\nNote that you must write a single update statement, do not write any select statement for this problem.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\n\nInput: \nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n+----+------+-----+--------+\nOutput: \n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n+----+------+-----+--------+\nExplanation: \n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'.",
        "Answer": "",
        "title": "swap-salary"
    },
    {
        "Question": "Word Frequency - Write a bash script to calculate the frequency of each word in a text file words.txt.\n\nFor simplicity sake, you may assume:\n\n * words.txt contains only lowercase characters and space ' ' characters.\n * Each word must consist of lowercase characters only.\n * Words are separated by one or more whitespace characters.\n\nExample:\n\nAssume that words.txt has the following content:\n\n\nthe day is sunny the the\nthe sunny is is\n\n\nYour script should output the following, sorted by descending frequency:\n\n\nthe 4\nis 3\nsunny 2\nday 1\n\n\nNote:\n\n * Don't worry about handling ties, it is guaranteed that each word's frequency count is unique.\n * Could you write it in one-line using Unix pipes [http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html]?",
        "Answer": "",
        "title": "word-frequency"
    },
    {
        "Question": "Valid Phone Numbers - Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\n\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\n\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\n\nExample:\n\nAssume that file.txt has the following content:\n\n\n987-123-4567\n123 456 7890\n(123) 456-7890\n\n\nYour script should output the following valid phone numbers:\n\n\n987-123-4567\n(123) 456-7890",
        "Answer": "",
        "title": "valid-phone-numbers"
    },
    {
        "Question": "Transpose File - Given a text file file.txt, transpose its content.\n\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.\n\nExample:\n\nIf file.txt has the following content:\n\n\nname age\nalice 21\nryan 30\n\n\nOutput the following:\n\n\nname alice ryan\nage 21 30",
        "Answer": "",
        "title": "transpose-file"
    },
    {
        "Question": "Tenth Line - Given a text file file.txt, print just the 10th line of the file.\n\nExample:\n\nAssume that file.txt has the following content:\n\n\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n\n\nYour script should output the tenth line, which is:\n\n\r\nLine 10\r\n\n\nNote:\n1. If the file contains less than 10 lines, what should you output?\n2. There's at least three different solutions. Try to explore all possibilities.",
        "Answer": "",
        "title": "tenth-line"
    }
]